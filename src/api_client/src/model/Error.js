/**
 * Mastercard Checkout Solutions Merchant Registration API
 * Registration APIs for Mastercard Checkout Solutions to submit new DPA data or check status of an existing uploaded batch
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ErrorDetail from './ErrorDetail';

/**
 * The Error model module.
 * @module model/Error
 * @version 1.0.0
 */
class Error {
    /**
     * Constructs a new <code>Error</code>.
     * An error object is associated with individual DPA failures in a given batch (assuming a COMPLETED_WITH_ERRORS response).  Please note: In the event of a SUCCESSFUL response, this error object may be sent as NULL. 
     * @alias module:model/Error
     * @param status {Number} HTTP status code associated with the Digital Payment Application (DPA) item error.
     * @param reason {module:model/Error.ReasonEnum} Reason for receiving an error for the Digital Payment Application (DPA) item.
     * @param message {String} Additional details on the Digital Payment Application (DPA) item error.
     */
    constructor(status, reason, message) { 
        
        Error.initialize(this, status, reason, message);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, status, reason, message) { 
        obj['status'] = status;
        obj['reason'] = reason;
        obj['message'] = message;
    }

    /**
     * Constructs a <code>Error</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Error} obj Optional instance to populate.
     * @return {module:model/Error} The populated <code>Error</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Error();

            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'Number');
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('errordetail')) {
                obj['errordetail'] = ApiClient.convertToType(data['errordetail'], [ErrorDetail]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Error</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Error</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Error.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        if (data['errordetail']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errordetail'])) {
                throw new Error("Expected the field `errordetail` to be an array in the JSON data but got " + data['errordetail']);
            }
            // validate the optional field `errordetail` (array)
            for (const item of data['errordetail']) {
                ErrorDetail.validateJSON(item);
            };
        }

        return true;
    }


}

Error.RequiredProperties = ["status", "reason", "message"];

/**
 * HTTP status code associated with the Digital Payment Application (DPA) item error.
 * @member {Number} status
 */
Error.prototype['status'] = undefined;

/**
 * Reason for receiving an error for the Digital Payment Application (DPA) item.
 * @member {module:model/Error.ReasonEnum} reason
 */
Error.prototype['reason'] = undefined;

/**
 * Additional details on the Digital Payment Application (DPA) item error.
 * @member {String} message
 */
Error.prototype['message'] = undefined;

/**
 * List of errors associated with a failed Digital Payment Application (DPA) item action.
 * @member {Array.<module:model/ErrorDetail>} errordetail
 */
Error.prototype['errordetail'] = undefined;





/**
 * Allowed values for the <code>reason</code> property.
 * @enum {String}
 * @readonly
 */
Error['ReasonEnum'] = {

    /**
     * value: "INVALID_ARGUMENT"
     * @const
     */
    "INVALID_ARGUMENT": "INVALID_ARGUMENT",

    /**
     * value: "INVALID_VALUE"
     * @const
     */
    "INVALID_VALUE": "INVALID_VALUE",

    /**
     * value: "NOT_FOUND"
     * @const
     */
    "NOT_FOUND": "NOT_FOUND",

    /**
     * value: "DECLINED"
     * @const
     */
    "DECLINED": "DECLINED",

    /**
     * value: "INVALID_STATE"
     * @const
     */
    "INVALID_STATE": "INVALID_STATE",

    /**
     * value: "AUTHENTICATION_FAILED"
     * @const
     */
    "AUTHENTICATION_FAILED": "AUTHENTICATION_FAILED",

    /**
     * value: "INTERNAL_SERVER_ERROR"
     * @const
     */
    "INTERNAL_SERVER_ERROR": "INTERNAL_SERVER_ERROR"
};



export default Error;

