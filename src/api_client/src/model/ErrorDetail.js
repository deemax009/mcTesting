/**
 * Mastercard Checkout Solutions Merchant Registration API
 * Registration APIs for Mastercard Checkout Solutions to submit new DPA data or check status of an existing uploaded batch
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ErrorDetail model module.
 * @module model/ErrorDetail
 * @version 1.0.0
 */
class ErrorDetail {
    /**
     * Constructs a new <code>ErrorDetail</code>.
     * Error associated with a failed Digital Payment Application (DPA) item action.
     * @alias module:model/ErrorDetail
     * @param reason {module:model/ErrorDetail.ReasonEnum} Reason for receiving an error for the Digital Payment Application (DPA) item.
     */
    constructor(reason) { 
        
        ErrorDetail.initialize(this, reason);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, reason) { 
        obj['reason'] = reason;
    }

    /**
     * Constructs a <code>ErrorDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ErrorDetail} obj Optional instance to populate.
     * @return {module:model/ErrorDetail} The populated <code>ErrorDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ErrorDetail();

            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
            if (data.hasOwnProperty('sourceType')) {
                obj['sourceType'] = ApiClient.convertToType(data['sourceType'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ErrorDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ErrorDetail</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ErrorDetail.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }
        // ensure the json data is a string
        if (data['sourceType'] && !(typeof data['sourceType'] === 'string' || data['sourceType'] instanceof String)) {
            throw new Error("Expected the field `sourceType` to be a primitive type in the JSON string but got " + data['sourceType']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }

        return true;
    }


}

ErrorDetail.RequiredProperties = ["reason"];

/**
 * Reason for receiving an error for the Digital Payment Application (DPA) item.
 * @member {module:model/ErrorDetail.ReasonEnum} reason
 */
ErrorDetail.prototype['reason'] = undefined;

/**
 * Indicates the source type of the Digital Payment Application (DPA) item error.
 * @member {String} sourceType
 */
ErrorDetail.prototype['sourceType'] = undefined;

/**
 * Additional details on the Digital Payment Application (DPA) item error.
 * @member {String} message
 */
ErrorDetail.prototype['message'] = undefined;

/**
 * Indicates the field name for the cause of the Digital Payment Application (DPA) item error.
 * @member {String} source
 */
ErrorDetail.prototype['source'] = undefined;





/**
 * Allowed values for the <code>reason</code> property.
 * @enum {String}
 * @readonly
 */
ErrorDetail['ReasonEnum'] = {

    /**
     * value: "INVALID_ARGUMENT"
     * @const
     */
    "INVALID_ARGUMENT": "INVALID_ARGUMENT",

    /**
     * value: "INVALID_VALUE"
     * @const
     */
    "INVALID_VALUE": "INVALID_VALUE",

    /**
     * value: "NOT_FOUND"
     * @const
     */
    "NOT_FOUND": "NOT_FOUND",

    /**
     * value: "DECLINED"
     * @const
     */
    "DECLINED": "DECLINED",

    /**
     * value: "INVALID_STATE"
     * @const
     */
    "INVALID_STATE": "INVALID_STATE",

    /**
     * value: "AUTHENTICATION_FAILED"
     * @const
     */
    "AUTHENTICATION_FAILED": "AUTHENTICATION_FAILED",

    /**
     * value: "INTERNAL_SERVER_ERROR"
     * @const
     */
    "INTERNAL_SERVER_ERROR": "INTERNAL_SERVER_ERROR"
};



export default ErrorDetail;

