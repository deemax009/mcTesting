/**
 * Mastercard Checkout Solutions Merchant Registration API
 * Registration APIs for Mastercard Checkout Solutions to submit new DPA data or check status of an existing uploaded batch
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';

/**
 * The DpaData model module.
 * @module model/DpaData
 * @version 1.0.0
 */
class DpaData {
    /**
     * Constructs a new <code>DpaData</code>.
     * DpaData Object for Integrator to populate Digital Payment Application (DPA) information, including the Merchant name, address, and other relevant data. 
     * @alias module:model/DpaData
     */
    constructor() { 
        
        DpaData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DpaData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DpaData} obj Optional instance to populate.
     * @return {module:model/DpaData} The populated <code>DpaData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DpaData();

            if (data.hasOwnProperty('dpaPresentationName')) {
                obj['dpaPresentationName'] = ApiClient.convertToType(data['dpaPresentationName'], 'String');
            }
            if (data.hasOwnProperty('dpaAddress')) {
                obj['dpaAddress'] = Address.constructFromObject(data['dpaAddress']);
            }
            if (data.hasOwnProperty('dpaName')) {
                obj['dpaName'] = ApiClient.convertToType(data['dpaName'], 'String');
            }
            if (data.hasOwnProperty('dpaLogoUri')) {
                obj['dpaLogoUri'] = ApiClient.convertToType(data['dpaLogoUri'], 'String');
            }
            if (data.hasOwnProperty('dpaUri')) {
                obj['dpaUri'] = ApiClient.convertToType(data['dpaUri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DpaData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DpaData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dpaPresentationName'] && !(typeof data['dpaPresentationName'] === 'string' || data['dpaPresentationName'] instanceof String)) {
            throw new Error("Expected the field `dpaPresentationName` to be a primitive type in the JSON string but got " + data['dpaPresentationName']);
        }
        // validate the optional field `dpaAddress`
        if (data['dpaAddress']) { // data not null
          Address.validateJSON(data['dpaAddress']);
        }
        // ensure the json data is a string
        if (data['dpaName'] && !(typeof data['dpaName'] === 'string' || data['dpaName'] instanceof String)) {
            throw new Error("Expected the field `dpaName` to be a primitive type in the JSON string but got " + data['dpaName']);
        }
        // ensure the json data is a string
        if (data['dpaLogoUri'] && !(typeof data['dpaLogoUri'] === 'string' || data['dpaLogoUri'] instanceof String)) {
            throw new Error("Expected the field `dpaLogoUri` to be a primitive type in the JSON string but got " + data['dpaLogoUri']);
        }
        // ensure the json data is a string
        if (data['dpaUri'] && !(typeof data['dpaUri'] === 'string' || data['dpaUri'] instanceof String)) {
            throw new Error("Expected the field `dpaUri` to be a primitive type in the JSON string but got " + data['dpaUri']);
        }

        return true;
    }


}



/**
 * The name of the Merchant that the Cardholder will see when checking out with the Digital Payment Application (DPA).  Conditional: Required for Guest Checkout Tokenization (GCT) and SQR programs. 
 * @member {String} dpaPresentationName
 */
DpaData.prototype['dpaPresentationName'] = undefined;

/**
 * @member {module:model/Address} dpaAddress
 */
DpaData.prototype['dpaAddress'] = undefined;

/**
 * Legal name of Merchant (which may differ from dpaPresentationName).
 * @member {String} dpaName
 */
DpaData.prototype['dpaName'] = undefined;

/**
 * URI for the logo displayed to Cardholders during C2P checkout.
 * @member {String} dpaLogoUri
 */
DpaData.prototype['dpaLogoUri'] = undefined;

/**
 * Digital Payment Application (DPA) identifier. This field may contain the DPA website URI, a mobile application identifier, or another unique identifier (UUID, URL, APK package name, etc.).
 * @member {String} dpaUri
 */
DpaData.prototype['dpaUri'] = undefined;






export default DpaData;

