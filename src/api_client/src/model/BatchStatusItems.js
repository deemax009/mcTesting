/**
 * Mastercard Checkout Solutions Merchant Registration API
 * Registration APIs for Mastercard Checkout Solutions to submit new DPA data or check status of an existing uploaded batch
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DpaResults from './DpaResults';
import Error from './Error';

/**
 * The BatchStatusItems model module.
 * @module model/BatchStatusItems
 * @version 1.0.0
 */
class BatchStatusItems {
    /**
     * Constructs a new <code>BatchStatusItems</code>.
     * @alias module:model/BatchStatusItems
     */
    constructor() { 
        
        BatchStatusItems.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BatchStatusItems</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BatchStatusItems} obj Optional instance to populate.
     * @return {module:model/BatchStatusItems} The populated <code>BatchStatusItems</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BatchStatusItems();

            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('serviceId')) {
                obj['serviceId'] = ApiClient.convertToType(data['serviceId'], 'String');
            }
            if (data.hasOwnProperty('trid')) {
                obj['trid'] = ApiClient.convertToType(data['trid'], 'String');
            }
            if (data.hasOwnProperty('programName')) {
                obj['programName'] = ApiClient.convertToType(data['programName'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = Error.constructFromObject(data['error']);
            }
            if (data.hasOwnProperty('dpaResults')) {
                obj['dpaResults'] = ApiClient.convertToType(data['dpaResults'], [DpaResults]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BatchStatusItems</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BatchStatusItems</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['action'] && !(typeof data['action'] === 'string' || data['action'] instanceof String)) {
            throw new Error("Expected the field `action` to be a primitive type in the JSON string but got " + data['action']);
        }
        // ensure the json data is a string
        if (data['serviceId'] && !(typeof data['serviceId'] === 'string' || data['serviceId'] instanceof String)) {
            throw new Error("Expected the field `serviceId` to be a primitive type in the JSON string but got " + data['serviceId']);
        }
        // ensure the json data is a string
        if (data['trid'] && !(typeof data['trid'] === 'string' || data['trid'] instanceof String)) {
            throw new Error("Expected the field `trid` to be a primitive type in the JSON string but got " + data['trid']);
        }
        // ensure the json data is a string
        if (data['programName'] && !(typeof data['programName'] === 'string' || data['programName'] instanceof String)) {
            throw new Error("Expected the field `programName` to be a primitive type in the JSON string but got " + data['programName']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // validate the optional field `error`
        if (data['error']) { // data not null
          Error.validateJSON(data['error']);
        }
        if (data['dpaResults']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dpaResults'])) {
                throw new Error("Expected the field `dpaResults` to be an array in the JSON data but got " + data['dpaResults']);
            }
            // validate the optional field `dpaResults` (array)
            for (const item of data['dpaResults']) {
                DpaResults.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The action to be performed on the Digital Payment Application (DPA). The selected action will be applied to all DPAs provided in the items list.  __ADD__ - Add DPA  __UPDATE__ - Update DPA  __DELETE__ - Delete DPA  Note: A limited number of DPA fields can be changed using the 'UPDATE' action. These are dpaPresentationName, dpaLogoUri, debitTokenRequested,  merchantCategoryCode, and threeDSDefaultData. Please refer to the example for a minimal use case. 
 * @member {module:model/BatchStatusItems.ActionEnum} action
 */
BatchStatusItems.prototype['action'] = undefined;

/**
 * A unique identifier assigned by Mastercard for which tokens are created uniquely for the entity onboarded.
 * @member {String} serviceId
 */
BatchStatusItems.prototype['serviceId'] = undefined;

/**
 * Token Requestors receive a unique identifier, TRID, which represents the consumer-facing entity name to the Issuer during the tokenization process. This identifier has a one-to-one relationship with the serviceId. <br> <br> Note: Reach out to your Mastercard representative to begin receiving trid in API responses. 
 * @member {String} trid
 */
BatchStatusItems.prototype['trid'] = undefined;

/**
 * The Cardholder facing name of the Merchant.  Conditional: Must be supplied when adding Merchants to a Payment Facilitator (PF) program.\" 
 * @member {String} programName
 */
BatchStatusItems.prototype['programName'] = undefined;

/**
 * Indicates the status of an individual Digital Payment Application (DPA) item in a batch.
 * @member {module:model/BatchStatusItems.StatusEnum} status
 */
BatchStatusItems.prototype['status'] = undefined;

/**
 * @member {module:model/Error} error
 */
BatchStatusItems.prototype['error'] = undefined;

/**
 * @member {Array.<module:model/DpaResults>} dpaResults
 */
BatchStatusItems.prototype['dpaResults'] = undefined;





/**
 * Allowed values for the <code>action</code> property.
 * @enum {String}
 * @readonly
 */
BatchStatusItems['ActionEnum'] = {

    /**
     * value: "ADD"
     * @const
     */
    "ADD": "ADD",

    /**
     * value: "UPDATE"
     * @const
     */
    "UPDATE": "UPDATE",

    /**
     * value: "DELETE"
     * @const
     */
    "DELETE": "DELETE"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
BatchStatusItems['StatusEnum'] = {

    /**
     * value: "SUCCESSFUL"
     * @const
     */
    "SUCCESSFUL": "SUCCESSFUL",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED"
};



export default BatchStatusItems;

