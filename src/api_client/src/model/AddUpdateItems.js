/**
 * Mastercard Checkout Solutions Merchant Registration API
 * Registration APIs for Mastercard Checkout Solutions to submit new DPA data or check status of an existing uploaded batch
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Dpas from './Dpas';

/**
 * The AddUpdateItems model module.
 * @module model/AddUpdateItems
 * @version 1.0.0
 */
class AddUpdateItems {
    /**
     * Constructs a new <code>AddUpdateItems</code>.
     * @alias module:model/AddUpdateItems
     * @param action {module:model/AddUpdateItems.ActionEnum} The action to be performed on the Digital Payment Application (DPA). The selected action will be applied to all DPAs provided in the items list.  ADD - Add DPA  UPDATE - Update DPA  DELETE - Delete DPA  Note: * A limited number of DPA fields can be changed using the __UPDATE__ action. These are `dpaPresentationName`, `programName`, `dpaLogoUri`, `debitTokenRequested`, `merchantCategoryCode`, and `threeDSDefaultData`. Please refer to the example for a minimal use case. * All DPA data from the original request (including non-updatable fields) will also need to be provided unchanged in the __PUT__ request for the operation to process successfully. 
     * @param programType {module:model/AddUpdateItems.ProgramTypeEnum} The Mastercard program that the Integrator would like to add their client(s) to. The Integrator must be enrolled in the program prior to enrolling their client(s). Integrators may view their active programs in the Mastercard Connect (MC Connect) portal.  `SECURE_COF_MERCHANT` -  Integrating Merchant managing network tokenization. Tokens generated are unique for each merchant.  `SECURE_COF_MERCHANT_OBO` - Integrating Payment Service Provider (PSP) managing network tokenization for their Merchant(s). Tokens generated are unique for each merchant.  `SECURE_COF_COMMERCE_PLATFORM` - Integrating Commerce Platform managing network tokenization. Tokens are generated unique for each Commerce Platform (tokens will be shared among their marketplace).  `SECURE_COF_COMMERCE_PLATFORM_OBO` - Integrating PSPs managing network tokenization for their Commerce Platform(s). Tokens are generated unique for each Commerce Platform (tokens will be shared among their marketplace).  `SECURE_COF_MERCHANT_OBO_SHARED` - Integrating PSPs managing network tokenization for their sub-Merchants. Tokens generated are unique for each Merchant Group.  `SRC` - Integrating Merchants and PSPs participating in or offering the Click to Pay (C2P) program.  `GUEST_CHECKOUT_TOKENIZATION` - A checkout solution that uses an alternative identifier to Account PANs, generated by the issuing network for guest checkout tokenization.  Note: Other programTypes (e.g., AUTOFILL, SQR_DEVICE etc.) may be available to select regions. Please contact your Mastercard representative for more details. 
     */
    constructor(action, programType) { 
        
        AddUpdateItems.initialize(this, action, programType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, action, programType) { 
        obj['action'] = action;
        obj['programType'] = programType;
    }

    /**
     * Constructs a <code>AddUpdateItems</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AddUpdateItems} obj Optional instance to populate.
     * @return {module:model/AddUpdateItems} The populated <code>AddUpdateItems</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AddUpdateItems();

            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('customerId')) {
                obj['customerId'] = ApiClient.convertToType(data['customerId'], 'String');
            }
            if (data.hasOwnProperty('programType')) {
                obj['programType'] = ApiClient.convertToType(data['programType'], 'String');
            }
            if (data.hasOwnProperty('trid')) {
                obj['trid'] = ApiClient.convertToType(data['trid'], 'String');
            }
            if (data.hasOwnProperty('serviceId')) {
                obj['serviceId'] = ApiClient.convertToType(data['serviceId'], 'String');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('programName')) {
                obj['programName'] = ApiClient.convertToType(data['programName'], 'String');
            }
            if (data.hasOwnProperty('dpas')) {
                obj['dpas'] = ApiClient.convertToType(data['dpas'], [Dpas]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AddUpdateItems</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AddUpdateItems</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AddUpdateItems.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['action'] && !(typeof data['action'] === 'string' || data['action'] instanceof String)) {
            throw new Error("Expected the field `action` to be a primitive type in the JSON string but got " + data['action']);
        }
        // ensure the json data is a string
        if (data['customerId'] && !(typeof data['customerId'] === 'string' || data['customerId'] instanceof String)) {
            throw new Error("Expected the field `customerId` to be a primitive type in the JSON string but got " + data['customerId']);
        }
        // ensure the json data is a string
        if (data['programType'] && !(typeof data['programType'] === 'string' || data['programType'] instanceof String)) {
            throw new Error("Expected the field `programType` to be a primitive type in the JSON string but got " + data['programType']);
        }
        // ensure the json data is a string
        if (data['trid'] && !(typeof data['trid'] === 'string' || data['trid'] instanceof String)) {
            throw new Error("Expected the field `trid` to be a primitive type in the JSON string but got " + data['trid']);
        }
        // ensure the json data is a string
        if (data['serviceId'] && !(typeof data['serviceId'] === 'string' || data['serviceId'] instanceof String)) {
            throw new Error("Expected the field `serviceId` to be a primitive type in the JSON string but got " + data['serviceId']);
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['programName'] && !(typeof data['programName'] === 'string' || data['programName'] instanceof String)) {
            throw new Error("Expected the field `programName` to be a primitive type in the JSON string but got " + data['programName']);
        }
        if (data['dpas']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dpas'])) {
                throw new Error("Expected the field `dpas` to be an array in the JSON data but got " + data['dpas']);
            }
            // validate the optional field `dpas` (array)
            for (const item of data['dpas']) {
                Dpas.validateJSON(item);
            };
        }

        return true;
    }


}

AddUpdateItems.RequiredProperties = ["action", "programType"];

/**
 * The action to be performed on the Digital Payment Application (DPA). The selected action will be applied to all DPAs provided in the items list.  ADD - Add DPA  UPDATE - Update DPA  DELETE - Delete DPA  Note: * A limited number of DPA fields can be changed using the __UPDATE__ action. These are `dpaPresentationName`, `programName`, `dpaLogoUri`, `debitTokenRequested`, `merchantCategoryCode`, and `threeDSDefaultData`. Please refer to the example for a minimal use case. * All DPA data from the original request (including non-updatable fields) will also need to be provided unchanged in the __PUT__ request for the operation to process successfully. 
 * @member {module:model/AddUpdateItems.ActionEnum} action
 */
AddUpdateItems.prototype['action'] = undefined;

/**
 * Conditional: The Customer Identifier (CID) must be passed when the Integrator is acting On-Behalf-Of (OBO) a client, registering through the Mastercard Connect (MC Connect) portal, or participating in the Secure Card on File (SCOF) program.  This field should be populated with the CID of the Integrator's client (e.g., a Payment Service Provider (PSP) would pass the CID of the client they are integrating, i.e. DASP model). 
 * @member {String} customerId
 */
AddUpdateItems.prototype['customerId'] = undefined;

/**
 * The Mastercard program that the Integrator would like to add their client(s) to. The Integrator must be enrolled in the program prior to enrolling their client(s). Integrators may view their active programs in the Mastercard Connect (MC Connect) portal.  `SECURE_COF_MERCHANT` -  Integrating Merchant managing network tokenization. Tokens generated are unique for each merchant.  `SECURE_COF_MERCHANT_OBO` - Integrating Payment Service Provider (PSP) managing network tokenization for their Merchant(s). Tokens generated are unique for each merchant.  `SECURE_COF_COMMERCE_PLATFORM` - Integrating Commerce Platform managing network tokenization. Tokens are generated unique for each Commerce Platform (tokens will be shared among their marketplace).  `SECURE_COF_COMMERCE_PLATFORM_OBO` - Integrating PSPs managing network tokenization for their Commerce Platform(s). Tokens are generated unique for each Commerce Platform (tokens will be shared among their marketplace).  `SECURE_COF_MERCHANT_OBO_SHARED` - Integrating PSPs managing network tokenization for their sub-Merchants. Tokens generated are unique for each Merchant Group.  `SRC` - Integrating Merchants and PSPs participating in or offering the Click to Pay (C2P) program.  `GUEST_CHECKOUT_TOKENIZATION` - A checkout solution that uses an alternative identifier to Account PANs, generated by the issuing network for guest checkout tokenization.  Note: Other programTypes (e.g., AUTOFILL, SQR_DEVICE etc.) may be available to select regions. Please contact your Mastercard representative for more details. 
 * @member {module:model/AddUpdateItems.ProgramTypeEnum} programType
 */
AddUpdateItems.prototype['programType'] = undefined;

/**
 * The Token Requestor Identifier (TRID) should be passed by MDES for Merchants (M4M) Integrators who would like to onboard their M4M TRIDs to be used on Secure Card on File (SCOF).
 * @member {String} trid
 */
AddUpdateItems.prototype['trid'] = undefined;

/**
 * A unique identifier assigned by Mastercard for which tokens are created uniquely for the entity onboarded.
 * @member {String} serviceId
 */
AddUpdateItems.prototype['serviceId'] = undefined;

/**
 * Assign a category to the sub-merchant group identified in the request. For example, sub-merchants can be grouped by common attributes such as merchant category code (MCC), volume of transactions, or geography. Required for the SECURE_COF_MERCHANT_OBO_SHARED program type. Examples: \"discount stores\" and \"bakeries\"
 * @member {String} category
 */
AddUpdateItems.prototype['category'] = undefined;

/**
 * The Cardholder facing name of the Merchant.  Conditional: Must be supplied when adding Merchants to all Secure Card On File (SECURE_COF) programs. 
 * @member {String} programName
 */
AddUpdateItems.prototype['programName'] = undefined;

/**
 * Dpas  Object for Integrator to provide a list of Digital Processing Application (DPA) objects. Each DPA object is used to create a corresponding DPA. A minimum of 1 DPA object (to a maximum of 80 DPA objects) must be provided in the request. 
 * @member {Array.<module:model/Dpas>} dpas
 */
AddUpdateItems.prototype['dpas'] = undefined;





/**
 * Allowed values for the <code>action</code> property.
 * @enum {String}
 * @readonly
 */
AddUpdateItems['ActionEnum'] = {

    /**
     * value: "ADD"
     * @const
     */
    "ADD": "ADD",

    /**
     * value: "UPDATE"
     * @const
     */
    "UPDATE": "UPDATE",

    /**
     * value: "DELETE"
     * @const
     */
    "DELETE": "DELETE"
};


/**
 * Allowed values for the <code>programType</code> property.
 * @enum {String}
 * @readonly
 */
AddUpdateItems['ProgramTypeEnum'] = {

    /**
     * value: "SRC"
     * @const
     */
    "SRC": "SRC",

    /**
     * value: "SECURE_COF_MERCHANT_OBO"
     * @const
     */
    "SECURE_COF_MERCHANT_OBO": "SECURE_COF_MERCHANT_OBO",

    /**
     * value: "SECURE_COF_MERCHANT"
     * @const
     */
    "SECURE_COF_MERCHANT": "SECURE_COF_MERCHANT",

    /**
     * value: "SECURE_COF_MERCHANT_OBO_SHARED"
     * @const
     */
    "SECURE_COF_MERCHANT_OBO_SHARED": "SECURE_COF_MERCHANT_OBO_SHARED",

    /**
     * value: "SECURE_COF_COMMERCE_PLATFORM"
     * @const
     */
    "SECURE_COF_COMMERCE_PLATFORM": "SECURE_COF_COMMERCE_PLATFORM",

    /**
     * value: "SECURE_COF_COMMERCE_PLATFORM_OBO"
     * @const
     */
    "SECURE_COF_COMMERCE_PLATFORM_OBO": "SECURE_COF_COMMERCE_PLATFORM_OBO",

    /**
     * value: "SQR_DEVICE"
     * @const
     */
    "SQR_DEVICE": "SQR_DEVICE",

    /**
     * value: "AUTOFILL"
     * @const
     */
    "AUTOFILL": "AUTOFILL",

    /**
     * value: "GUEST_CHECKOUT_TOKENIZATION"
     * @const
     */
    "GUEST_CHECKOUT_TOKENIZATION": "GUEST_CHECKOUT_TOKENIZATION"
};



export default AddUpdateItems;

