/**
 * Mastercard Checkout Solutions Merchant Registration API
 * Registration APIs for Mastercard Checkout Solutions to submit new DPA data or check status of an existing uploaded batch
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AddUpdateItems from './AddUpdateItems';

/**
 * The DpaAddUpdateRequest model module.
 * @module model/DpaAddUpdateRequest
 * @version 1.0.0
 */
class DpaAddUpdateRequest {
    /**
     * Constructs a new <code>DpaAddUpdateRequest</code>.
     * The DpaAddUpdateRequest is used to add, update, or delete DPAs from the Mastercard system. Additionally, the DpaAddUpdateRequest can be used to generate serviceIds in Commerce Platform use cases.  A Digital Payment Application (DPA) is a website, web or mobile application operated by a Merchant, marketplace, or other service provider where a consumer can purchase goods or services.  A ServiceId is a unique identifier assigned by Mastercard for which tokens are created uniquely for the entity onboarded. A serviceId can have multiple associated DPAs.  The DpaAddUpdateRequest request must contain the following values:   * items  * action  * programType   The contents of the DPA items will vary based on the operation requested. 
     * @alias module:model/DpaAddUpdateRequest
     * @param items {Array.<module:model/AddUpdateItems>} Items  Object for Integrator to provide a list of Digital Payment Applications (DPA) to be enrolled in a given program. A minimum of 1 item must be provided in a request. 
     */
    constructor(items) { 
        
        DpaAddUpdateRequest.initialize(this, items);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, items) { 
        obj['items'] = items;
    }

    /**
     * Constructs a <code>DpaAddUpdateRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DpaAddUpdateRequest} obj Optional instance to populate.
     * @return {module:model/DpaAddUpdateRequest} The populated <code>DpaAddUpdateRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DpaAddUpdateRequest();

            if (data.hasOwnProperty('requestId')) {
                obj['requestId'] = ApiClient.convertToType(data['requestId'], 'String');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [AddUpdateItems]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DpaAddUpdateRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DpaAddUpdateRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DpaAddUpdateRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['requestId'] && !(typeof data['requestId'] === 'string' || data['requestId'] instanceof String)) {
            throw new Error("Expected the field `requestId` to be a primitive type in the JSON string but got " + data['requestId']);
        }
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                AddUpdateItems.validateJSON(item);
            };
        }

        return true;
    }


}

DpaAddUpdateRequest.RequiredProperties = ["items"];

/**
 * This field allows the Integrator to assign an internal reference to a batch request so that it can be used for internal tracking purposes.
 * @member {String} requestId
 */
DpaAddUpdateRequest.prototype['requestId'] = undefined;

/**
 * Items  Object for Integrator to provide a list of Digital Payment Applications (DPA) to be enrolled in a given program. A minimum of 1 item must be provided in a request. 
 * @member {Array.<module:model/AddUpdateItems>} items
 */
DpaAddUpdateRequest.prototype['items'] = undefined;






export default DpaAddUpdateRequest;

