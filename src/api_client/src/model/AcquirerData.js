/**
 * Mastercard Checkout Solutions Merchant Registration API
 * Registration APIs for Mastercard Checkout Solutions to submit new DPA data or check status of an existing uploaded batch
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AcquirerData model module.
 * @module model/AcquirerData
 * @version 1.0.0
 */
class AcquirerData {
    /**
     * Constructs a new <code>AcquirerData</code>.
     *  Object for details about the acquiring institution (for example, merchant bank) or its agent. This includes acquirerIca, acquirerMerchantId and acquirerBin. This object may be used to improve transaction acceptance rates. 
     * @alias module:model/AcquirerData
     * @param acquirerIca {String} An Acquirer Interbank Card Association (ICA) value is an identifier assigned to the Acquirer by Mastercard.
     * @param acquirerMerchantId {String} A Merchant Identifier (MID) is a unique code assigned to the Merchant by the Acquirer once the Merchant has successfully opened an account. A MID identifies the Merchant to the Acquirer.
     */
    constructor(acquirerIca, acquirerMerchantId) { 
        
        AcquirerData.initialize(this, acquirerIca, acquirerMerchantId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, acquirerIca, acquirerMerchantId) { 
        obj['acquirerIca'] = acquirerIca;
        obj['acquirerMerchantId'] = acquirerMerchantId;
    }

    /**
     * Constructs a <code>AcquirerData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AcquirerData} obj Optional instance to populate.
     * @return {module:model/AcquirerData} The populated <code>AcquirerData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AcquirerData();

            if (data.hasOwnProperty('acquirerIca')) {
                obj['acquirerIca'] = ApiClient.convertToType(data['acquirerIca'], 'String');
            }
            if (data.hasOwnProperty('acquirerBin')) {
                obj['acquirerBin'] = ApiClient.convertToType(data['acquirerBin'], 'String');
            }
            if (data.hasOwnProperty('acquirerMerchantId')) {
                obj['acquirerMerchantId'] = ApiClient.convertToType(data['acquirerMerchantId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AcquirerData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AcquirerData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AcquirerData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['acquirerIca'] && !(typeof data['acquirerIca'] === 'string' || data['acquirerIca'] instanceof String)) {
            throw new Error("Expected the field `acquirerIca` to be a primitive type in the JSON string but got " + data['acquirerIca']);
        }
        // ensure the json data is a string
        if (data['acquirerBin'] && !(typeof data['acquirerBin'] === 'string' || data['acquirerBin'] instanceof String)) {
            throw new Error("Expected the field `acquirerBin` to be a primitive type in the JSON string but got " + data['acquirerBin']);
        }
        // ensure the json data is a string
        if (data['acquirerMerchantId'] && !(typeof data['acquirerMerchantId'] === 'string' || data['acquirerMerchantId'] instanceof String)) {
            throw new Error("Expected the field `acquirerMerchantId` to be a primitive type in the JSON string but got " + data['acquirerMerchantId']);
        }

        return true;
    }


}

AcquirerData.RequiredProperties = ["acquirerIca", "acquirerMerchantId"];

/**
 * An Acquirer Interbank Card Association (ICA) value is an identifier assigned to the Acquirer by Mastercard.
 * @member {String} acquirerIca
 */
AcquirerData.prototype['acquirerIca'] = undefined;

/**
 * Each Acquirer Interbank Card Association (ICA) identifier may be assigned one or more BINs by Mastercard.  Note: It is important to use the correct Acquirer ICA associated with the Acquirer BIN. 
 * @member {String} acquirerBin
 */
AcquirerData.prototype['acquirerBin'] = undefined;

/**
 * A Merchant Identifier (MID) is a unique code assigned to the Merchant by the Acquirer once the Merchant has successfully opened an account. A MID identifies the Merchant to the Acquirer.
 * @member {String} acquirerMerchantId
 */
AcquirerData.prototype['acquirerMerchantId'] = undefined;






export default AcquirerData;

