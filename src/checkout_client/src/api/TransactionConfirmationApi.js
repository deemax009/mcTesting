/**
 * Checkout, Save Card On File, Delete Saved Card On File And Confirmations API
 *  Click to Pay checkout used by Merchants to receive payload data from the Click to Pay System and send the results of transaction authorisation back to the Click to Pay System. Endpoints are available to retrieve payload data and send the outcome of a payment or checkout. 
 *
 * The version of the OpenAPI document: 1.3.2
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Errors from '../model/Errors';
import PostbackConfirmationRequest from '../model/PostbackConfirmationRequest';

/**
* TransactionConfirmation service.
* @module api/TransactionConfirmationApi
* @version 1.3.2
*/
export default class TransactionConfirmationApi {

    /**
    * Constructs a new TransactionConfirmationApi. 
    * @alias module:api/TransactionConfirmationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the postConfirmation operation.
     * @callback module:api/TransactionConfirmationApi~postConfirmationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send results of payment authorization to Unified Checkout Solutions.
     * Use the confirmations endpoint to notify the SRCI the outcome of a checkout or payment.  The confirmation data is sent in the request body and normally the response will be 204 (No Content) .  If an error response is returned, the response body will include further information about the reason for the error. 
     * @param {String} xOpenapiClientid Open API key to make the server to server call to Mastercard SRCI. This ID is provided to the client during the onboarding process to make OAuth1.0 based signed requests. The value MUST match the SRC Client ID present in the request body.
     * @param {module:model/PostbackConfirmationRequest} postbackConfirmationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [merchantTransactionId] Merchant Checkout Transaction Identifier which is returned in the checkoutResponse to either checkoutWithCard or checkoutWithNewCard JavaScript methods and links the client-side JavaScript calls and server-side API calls for a specific transaction. Optional for Subsequent Payment or Subsequent Split Shipment.
     * @param {String} [xSrcCxFlowId] The X-Src-Cx-Flow-Id helps in routing and session affinity. Usage of X-Src-Cx-Flow-Id in requests ensures requests by the same client are directed to the same server. When you make your initial API call, use the X-Src-Cx-Flow-Id, returned in one of the client-side calls checkoutWithNewCard() or checkoutWitCard(). If you do not send X-Src-Cx-Flow-Id in your request or if the field is empty, the Click to Pay system generates one and responds with the X-Src-Cx-Flow-Id in the header. The X-Src-Cx-Flow-Id returned in the response must be used in subsequent calls to ensure that these calls are directed to the same server that returned the initial response. Failure to do so will result in call failures.
     * @param {module:api/TransactionConfirmationApi~postConfirmationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postConfirmation(xOpenapiClientid, postbackConfirmationRequest, opts, callback) {
      opts = opts || {};
      let postBody = postbackConfirmationRequest;
      // verify the required parameter 'xOpenapiClientid' is set
      if (xOpenapiClientid === undefined || xOpenapiClientid === null) {
        throw new Error("Missing the required parameter 'xOpenapiClientid' when calling postConfirmation");
      }
      // verify the required parameter 'postbackConfirmationRequest' is set
      if (postbackConfirmationRequest === undefined || postbackConfirmationRequest === null) {
        throw new Error("Missing the required parameter 'postbackConfirmationRequest' when calling postConfirmation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Openapi-Clientid': xOpenapiClientid,
        'merchant-transaction-id': opts['merchantTransactionId'],
        'X-Src-Cx-Flow-Id': opts['xSrcCxFlowId']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/checkout/confirmations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
