/**
 * Checkout, Save Card On File, Delete Saved Card On File And Confirmations API
 *  Click to Pay checkout used by Merchants to receive payload data from the Click to Pay System and send the results of transaction authorisation back to the Click to Pay System. Endpoints are available to retrieve payload data and send the outcome of a payment or checkout. 
 *
 * The version of the OpenAPI document: 1.3.2
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CheckoutRequest from '../model/CheckoutRequest';
import CheckoutResponse from '../model/CheckoutResponse';
import Errors from '../model/Errors';

/**
* Checkout service.
* @module api/CheckoutApi
* @version 1.3.2
*/
export default class CheckoutApi {

    /**
    * Constructs a new CheckoutApi. 
    * @alias module:api/CheckoutApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the checkout operation.
     * @callback module:api/CheckoutApi~checkoutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckoutResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Used either for Server to Server Checkout (allow the SRCI server to perform a checkout), or to obtain the encrypted transaction payload via the response.
     * This operation provides for two situations:  1. Server to Server checkout, where the SRCI server initiates a checkout directly. This is not currently supported. 2. Allows SRCI server to fetch the transaction credentials of a checkout transaction initiated via DCF. This is the typical use case. 
     * @param {String} xOpenapiClientid Open API key to make the server to server call to Mastercard SRCI. This ID is provided to the client during the onboarding process to make OAuth1.0 based signed requests. The value MUST match the SRC Client ID present in the request body.
     * @param {module:model/CheckoutRequest} checkoutTransactionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xSrcCxFlowId] The X-Src-Cx-Flow-Id helps in routing and session affinity. Usage of X-Src-Cx-Flow-Id in requests ensures requests by the same client are directed to the same server. When you make your initial API call, use the X-Src-Cx-Flow-Id, returned in one of the client-side calls checkoutWithNewCard() or checkoutWitCard(). If you do not send X-Src-Cx-Flow-Id in your request or if the field is empty, the Click to Pay system generates one and responds with the X-Src-Cx-Flow-Id in the header. The X-Src-Cx-Flow-Id returned in the response must be used in subsequent calls to ensure that these calls are directed to the same server that returned the initial response. Failure to do so will result in call failures.
     * @param {module:api/CheckoutApi~checkoutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckoutResponse}
     */
    checkout(xOpenapiClientid, checkoutTransactionRequest, opts, callback) {
      opts = opts || {};
      let postBody = checkoutTransactionRequest;
      // verify the required parameter 'xOpenapiClientid' is set
      if (xOpenapiClientid === undefined || xOpenapiClientid === null) {
        throw new Error("Missing the required parameter 'xOpenapiClientid' when calling checkout");
      }
      // verify the required parameter 'checkoutTransactionRequest' is set
      if (checkoutTransactionRequest === undefined || checkoutTransactionRequest === null) {
        throw new Error("Missing the required parameter 'checkoutTransactionRequest' when calling checkout");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Openapi-Clientid': xOpenapiClientid,
        'X-Src-Cx-Flow-Id': opts['xSrcCxFlowId']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CheckoutResponse;
      return this.apiClient.callApi(
        '/checkout', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
