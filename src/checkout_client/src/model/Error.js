/**
 * Checkout, Save Card On File, Delete Saved Card On File And Confirmations API
 *  Click to Pay checkout used by Merchants to receive payload data from the Click to Pay System and send the results of transaction authorisation back to the Click to Pay System. Endpoints are available to retrieve payload data and send the outcome of a payment or checkout. 
 *
 * The version of the OpenAPI document: 1.3.2
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Details from './Details';

/**
 * The Error model module.
 * @module model/Error
 * @version 1.3.2
 */
class Error {
    /**
     * Constructs a new <code>Error</code>.
     * @alias module:model/Error
     */
    constructor() { 
        
        Error.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Error</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Error} obj Optional instance to populate.
     * @return {module:model/Error} The populated <code>Error</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Error();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('reasonCode')) {
                obj['reasonCode'] = ApiClient.convertToType(data['reasonCode'], 'String');
            }
            if (data.hasOwnProperty('recoverable')) {
                obj['recoverable'] = ApiClient.convertToType(data['recoverable'], 'Boolean');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('details')) {
                obj['details'] = Details.constructFromObject(data['details']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Error</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Error</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['reasonCode'] && !(typeof data['reasonCode'] === 'string' || data['reasonCode'] instanceof String)) {
            throw new Error("Expected the field `reasonCode` to be a primitive type in the JSON string but got " + data['reasonCode']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }
        // validate the optional field `details`
        if (data['details']) { // data not null
          Details.validateJSON(data['details']);
        }

        return true;
    }


}



/**
 * Description of the ReasonCode field with additional details.
 * @member {String} description
 */
Error.prototype['description'] = undefined;

/**
 * Error reason. One of the following:  Reason | Description --- | --- INVALID_ARGUMENT | A provided argument was invalid. NOT_FOUND | The requested data was not found. PERMISSION_DENIED | The request was denied access to the system. INTERNAL | An internal server error occurred. UNAUTHENTICATED | The request is unauthenticated. UNAVAILABLE | The requested resource is unavailable. A unique constant identifying the error case encountered during transaction processing. 
 * @member {String} reasonCode
 */
Error.prototype['reasonCode'] = undefined;

/**
 * Indicates whether this error will always be returned for this request, or retrying could change the outcome.
 * @member {Boolean} recoverable
 */
Error.prototype['recoverable'] = undefined;

/**
 * The parameter that generated this error.
 * @member {String} source
 */
Error.prototype['source'] = undefined;

/**
 * @member {module:model/Details} details
 */
Error.prototype['details'] = undefined;






export default Error;

