/**
 * Checkout, Save Card On File, Delete Saved Card On File And Confirmations API
 *  Click to Pay checkout used by Merchants to receive payload data from the Click to Pay System and send the results of transaction authorisation back to the Click to Pay System. Endpoints are available to retrieve payload data and send the outcome of a payment or checkout. 
 *
 * The version of the OpenAPI document: 1.3.2
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VerificationType from './VerificationType';

/**
 * The VerificationData model module.
 * @module model/VerificationData
 * @version 1.3.2
 */
class VerificationData {
    /**
     * Constructs a new <code>VerificationData</code>.
     * @alias module:model/VerificationData
     * @param verificationType {module:model/VerificationType} 
     * @param verificationEntity {String} Entity performing the verification.
     * @param verificationMethod {String} Method of verification based on type of authentication. <br/> \"01\" - 3D Secure (3DS) <br/> \"04\" – A shared secret between the Card Issuer and the Cardholder such as One Time Passcode (OTP), activation code <br/> \"07\" – FIDO2 authentication <br/> \"24\" - Mastercard authentication with device binding and passive authentication <br/> 
     * @param verificationResults {String} Result of the verification.
     * @param verificationTimestamp {String} Date and time when the verification was conducted. UTC time in Unix epoch format
     */
    constructor(verificationType, verificationEntity, verificationMethod, verificationResults, verificationTimestamp) { 
        
        VerificationData.initialize(this, verificationType, verificationEntity, verificationMethod, verificationResults, verificationTimestamp);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, verificationType, verificationEntity, verificationMethod, verificationResults, verificationTimestamp) { 
        obj['verificationType'] = verificationType;
        obj['verificationEntity'] = verificationEntity;
        obj['verificationMethod'] = verificationMethod;
        obj['verificationResults'] = verificationResults;
        obj['verificationTimestamp'] = verificationTimestamp;
    }

    /**
     * Constructs a <code>VerificationData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VerificationData} obj Optional instance to populate.
     * @return {module:model/VerificationData} The populated <code>VerificationData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VerificationData();

            if (data.hasOwnProperty('verificationType')) {
                obj['verificationType'] = VerificationType.constructFromObject(data['verificationType']);
            }
            if (data.hasOwnProperty('verificationEntity')) {
                obj['verificationEntity'] = ApiClient.convertToType(data['verificationEntity'], 'String');
            }
            if (data.hasOwnProperty('verificationMethod')) {
                obj['verificationMethod'] = ApiClient.convertToType(data['verificationMethod'], 'String');
            }
            if (data.hasOwnProperty('verificationResults')) {
                obj['verificationResults'] = ApiClient.convertToType(data['verificationResults'], 'String');
            }
            if (data.hasOwnProperty('verificationTimestamp')) {
                obj['verificationTimestamp'] = ApiClient.convertToType(data['verificationTimestamp'], 'String');
            }
            if (data.hasOwnProperty('additionalData')) {
                obj['additionalData'] = ApiClient.convertToType(data['additionalData'], 'String');
            }
            if (data.hasOwnProperty('verificationEvents')) {
                obj['verificationEvents'] = ApiClient.convertToType(data['verificationEvents'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VerificationData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VerificationData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VerificationData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['verificationEntity'] && !(typeof data['verificationEntity'] === 'string' || data['verificationEntity'] instanceof String)) {
            throw new Error("Expected the field `verificationEntity` to be a primitive type in the JSON string but got " + data['verificationEntity']);
        }
        // ensure the json data is a string
        if (data['verificationMethod'] && !(typeof data['verificationMethod'] === 'string' || data['verificationMethod'] instanceof String)) {
            throw new Error("Expected the field `verificationMethod` to be a primitive type in the JSON string but got " + data['verificationMethod']);
        }
        // ensure the json data is a string
        if (data['verificationResults'] && !(typeof data['verificationResults'] === 'string' || data['verificationResults'] instanceof String)) {
            throw new Error("Expected the field `verificationResults` to be a primitive type in the JSON string but got " + data['verificationResults']);
        }
        // ensure the json data is a string
        if (data['verificationTimestamp'] && !(typeof data['verificationTimestamp'] === 'string' || data['verificationTimestamp'] instanceof String)) {
            throw new Error("Expected the field `verificationTimestamp` to be a primitive type in the JSON string but got " + data['verificationTimestamp']);
        }
        // ensure the json data is a string
        if (data['additionalData'] && !(typeof data['additionalData'] === 'string' || data['additionalData'] instanceof String)) {
            throw new Error("Expected the field `additionalData` to be a primitive type in the JSON string but got " + data['additionalData']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['verificationEvents'])) {
            throw new Error("Expected the field `verificationEvents` to be an array in the JSON data but got " + data['verificationEvents']);
        }

        return true;
    }


}

VerificationData.RequiredProperties = ["verificationType", "verificationEntity", "verificationMethod", "verificationResults", "verificationTimestamp"];

/**
 * @member {module:model/VerificationType} verificationType
 */
VerificationData.prototype['verificationType'] = undefined;

/**
 * Entity performing the verification.
 * @member {String} verificationEntity
 */
VerificationData.prototype['verificationEntity'] = undefined;

/**
 * Method of verification based on type of authentication. <br/> \"01\" - 3D Secure (3DS) <br/> \"04\" – A shared secret between the Card Issuer and the Cardholder such as One Time Passcode (OTP), activation code <br/> \"07\" – FIDO2 authentication <br/> \"24\" - Mastercard authentication with device binding and passive authentication <br/> 
 * @member {String} verificationMethod
 */
VerificationData.prototype['verificationMethod'] = undefined;

/**
 * Result of the verification.
 * @member {String} verificationResults
 */
VerificationData.prototype['verificationResults'] = undefined;

/**
 * Date and time when the verification was conducted. UTC time in Unix epoch format
 * @member {String} verificationTimestamp
 */
VerificationData.prototype['verificationTimestamp'] = undefined;

/**
 * Data related to the verification performed.
 * @member {String} additionalData
 */
VerificationData.prototype['additionalData'] = undefined;

/**
 * <p>Event that prompted the Cardholder authentication (e.g., Payment Transaction = \"01\").</p> <p>For verificationType CARDHOLDER, valid values are:</p> <ul>   <li>\"01\" - Payment Transaction</li>   <li>\"02\" - Add Card/Card Enrollment</li>
 * @member {Array.<String>} verificationEvents
 */
VerificationData.prototype['verificationEvents'] = undefined;






export default VerificationData;

