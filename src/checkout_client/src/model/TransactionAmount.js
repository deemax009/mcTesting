/**
 * Checkout, Save Card On File, Delete Saved Card On File And Confirmations API
 *  Click to Pay checkout used by Merchants to receive payload data from the Click to Pay System and send the results of transaction authorisation back to the Click to Pay System. Endpoints are available to retrieve payload data and send the outcome of a payment or checkout. 
 *
 * The version of the OpenAPI document: 1.3.2
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TransactionAmount model module.
 * @module model/TransactionAmount
 * @version 1.3.2
 */
class TransactionAmount {
    /**
     * Constructs a new <code>TransactionAmount</code>.
     * Transaction amount to be authorized. This value must be a positive amount. This is used for DSRP v3 transaction.  __Conditional__: An object for transaction amount details that must be provided for Mastercard Merchant Presented QR:SRC program, or if you need to receive a v3 cryptogram. A v3 cryptogram is an enhanced cryptogram used for the Token Authentication Framework (TAF), which strengthens the security of a transaction by linking it to a specific amount and merchant. 
     * @alias module:model/TransactionAmount
     * @param transactionAmount {Number} Numeric value of transaction amount and must be positive. Fractions, if present in the transaction amount value, will be affixed with zero/s to match the minor unit of transaction currency in question. Maximum value allowed will be 13 digits (including decimal point and affixed fractions).
     * @param transactionCurrencyCode {String} ISO 4217 three-digit currency code for the transaction.
     */
    constructor(transactionAmount, transactionCurrencyCode) { 
        
        TransactionAmount.initialize(this, transactionAmount, transactionCurrencyCode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, transactionAmount, transactionCurrencyCode) { 
        obj['transactionAmount'] = transactionAmount;
        obj['transactionCurrencyCode'] = transactionCurrencyCode;
    }

    /**
     * Constructs a <code>TransactionAmount</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransactionAmount} obj Optional instance to populate.
     * @return {module:model/TransactionAmount} The populated <code>TransactionAmount</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransactionAmount();

            if (data.hasOwnProperty('transactionAmount')) {
                obj['transactionAmount'] = ApiClient.convertToType(data['transactionAmount'], 'Number');
            }
            if (data.hasOwnProperty('transactionCurrencyCode')) {
                obj['transactionCurrencyCode'] = ApiClient.convertToType(data['transactionCurrencyCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransactionAmount</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransactionAmount</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TransactionAmount.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['transactionCurrencyCode'] && !(typeof data['transactionCurrencyCode'] === 'string' || data['transactionCurrencyCode'] instanceof String)) {
            throw new Error("Expected the field `transactionCurrencyCode` to be a primitive type in the JSON string but got " + data['transactionCurrencyCode']);
        }

        return true;
    }


}

TransactionAmount.RequiredProperties = ["transactionAmount", "transactionCurrencyCode"];

/**
 * Numeric value of transaction amount and must be positive. Fractions, if present in the transaction amount value, will be affixed with zero/s to match the minor unit of transaction currency in question. Maximum value allowed will be 13 digits (including decimal point and affixed fractions).
 * @member {Number} transactionAmount
 */
TransactionAmount.prototype['transactionAmount'] = undefined;

/**
 * ISO 4217 three-digit currency code for the transaction.
 * @member {String} transactionCurrencyCode
 */
TransactionAmount.prototype['transactionCurrencyCode'] = undefined;






export default TransactionAmount;

