/**
 * Checkout, Save Card On File, Delete Saved Card On File And Confirmations API
 *  Click to Pay checkout used by Merchants to receive payload data from the Click to Pay System and send the results of transaction authorisation back to the Click to Pay System. Endpoints are available to retrieve payload data and send the outcome of a payment or checkout. 
 *
 * The version of the OpenAPI document: 1.3.2
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MaskedAddress model module.
 * @module model/MaskedAddress
 * @version 1.3.2
 */
class MaskedAddress {
    /**
     * Constructs a new <code>MaskedAddress</code>.
     * @alias module:model/MaskedAddress
     */
    constructor() { 
        
        MaskedAddress.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MaskedAddress</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MaskedAddress} obj Optional instance to populate.
     * @return {module:model/MaskedAddress} The populated <code>MaskedAddress</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MaskedAddress();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('line1')) {
                obj['line1'] = ApiClient.convertToType(data['line1'], 'String');
            }
            if (data.hasOwnProperty('line2')) {
                obj['line2'] = ApiClient.convertToType(data['line2'], 'String');
            }
            if (data.hasOwnProperty('line3')) {
                obj['line3'] = ApiClient.convertToType(data['line3'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('countryCode')) {
                obj['countryCode'] = ApiClient.convertToType(data['countryCode'], 'String');
            }
            if (data.hasOwnProperty('zip')) {
                obj['zip'] = ApiClient.convertToType(data['zip'], 'String');
            }
            if (data.hasOwnProperty('lastUsedTime')) {
                obj['lastUsedTime'] = ApiClient.convertToType(data['lastUsedTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MaskedAddress</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MaskedAddress</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['line1'] && !(typeof data['line1'] === 'string' || data['line1'] instanceof String)) {
            throw new Error("Expected the field `line1` to be a primitive type in the JSON string but got " + data['line1']);
        }
        // ensure the json data is a string
        if (data['line2'] && !(typeof data['line2'] === 'string' || data['line2'] instanceof String)) {
            throw new Error("Expected the field `line2` to be a primitive type in the JSON string but got " + data['line2']);
        }
        // ensure the json data is a string
        if (data['line3'] && !(typeof data['line3'] === 'string' || data['line3'] instanceof String)) {
            throw new Error("Expected the field `line3` to be a primitive type in the JSON string but got " + data['line3']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['countryCode'] && !(typeof data['countryCode'] === 'string' || data['countryCode'] instanceof String)) {
            throw new Error("Expected the field `countryCode` to be a primitive type in the JSON string but got " + data['countryCode']);
        }
        // ensure the json data is a string
        if (data['zip'] && !(typeof data['zip'] === 'string' || data['zip'] instanceof String)) {
            throw new Error("Expected the field `zip` to be a primitive type in the JSON string but got " + data['zip']);
        }
        // ensure the json data is a string
        if (data['lastUsedTime'] && !(typeof data['lastUsedTime'] === 'string' || data['lastUsedTime'] instanceof String)) {
            throw new Error("Expected the field `lastUsedTime` to be a primitive type in the JSON string but got " + data['lastUsedTime']);
        }

        return true;
    }


}



/**
 * Name of the individual receiving the delivered goods or service. Only applicable for the shipping address.  _Conditionality_: If known to the Click to Pay System then must be supplied for that address. 
 * @member {String} name
 */
MaskedAddress.prototype['name'] = undefined;

/**
 * Address line 1.
 * @member {String} line1
 */
MaskedAddress.prototype['line1'] = undefined;

/**
 * Address line 2.
 * @member {String} line2
 */
MaskedAddress.prototype['line2'] = undefined;

/**
 * Address line 3.
 * @member {String} line3
 */
MaskedAddress.prototype['line3'] = undefined;

/**
 * Address of the city
 * @member {String} city
 */
MaskedAddress.prototype['city'] = undefined;

/**
 * Address of the state
 * @member {String} state
 */
MaskedAddress.prototype['state'] = undefined;

/**
 * Address country code. ISO 3166-1 alpha 2 country code.
 * @member {String} countryCode
 */
MaskedAddress.prototype['countryCode'] = undefined;

/**
 * Address zip/ postal code.
 * @member {String} zip
 */
MaskedAddress.prototype['zip'] = undefined;

/**
 * Date and time the address was last used
 * @member {String} lastUsedTime
 */
MaskedAddress.prototype['lastUsedTime'] = undefined;






export default MaskedAddress;

