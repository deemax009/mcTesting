/**
 * Checkout, Save Card On File, Delete Saved Card On File And Confirmations API
 *  Click to Pay checkout used by Merchants to receive payload data from the Click to Pay System and send the results of transaction authorisation back to the Click to Pay System. Endpoints are available to retrieve payload data and send the outcome of a payment or checkout. 
 *
 * The version of the OpenAPI document: 1.3.2
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DigitalCardData model module.
 * @module model/DigitalCardData
 * @version 1.3.2
 */
class DigitalCardData {
    /**
     * Constructs a new <code>DigitalCardData</code>.
     * Contains digital card information that is used in the user interface to provide reference to the actual PAN or Payment Token without actually disclosing either. Digital Card Data is grouped based on the following    * PAN Authorisation Digital Card Information: data used in Request and Response Messages   * UI/UX Presentation Data: data used user interfaces to provide the user with a recognisable descriptor   * Digital Card Art: image that accompanies Digital Card information for user interface purposes 
     * @alias module:model/DigitalCardData
     * @param descriptorName {String} Presentation text defined by the SRC Programme that describes the PAN presented as a Digital Card. This descriptor is the same across all DCFs.
     * @param artUri {String} URI that locates the Card Art image to be used for presentation purposes. Should be provided by an Issuer.
     */
    constructor(descriptorName, artUri) { 
        
        DigitalCardData.initialize(this, descriptorName, artUri);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, descriptorName, artUri) { 
        obj['descriptorName'] = descriptorName;
        obj['artUri'] = artUri;
    }

    /**
     * Constructs a <code>DigitalCardData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DigitalCardData} obj Optional instance to populate.
     * @return {module:model/DigitalCardData} The populated <code>DigitalCardData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DigitalCardData();

            if (data.hasOwnProperty('presentationName')) {
                obj['presentationName'] = ApiClient.convertToType(data['presentationName'], 'String');
            }
            if (data.hasOwnProperty('descriptorName')) {
                obj['descriptorName'] = ApiClient.convertToType(data['descriptorName'], 'String');
            }
            if (data.hasOwnProperty('artUri')) {
                obj['artUri'] = ApiClient.convertToType(data['artUri'], 'String');
            }
            if (data.hasOwnProperty('coBrandName')) {
                obj['coBrandName'] = ApiClient.convertToType(data['coBrandName'], 'String');
            }
            if (data.hasOwnProperty('isCoBranded')) {
                obj['isCoBranded'] = ApiClient.convertToType(data['isCoBranded'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DigitalCardData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DigitalCardData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DigitalCardData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['presentationName'] && !(typeof data['presentationName'] === 'string' || data['presentationName'] instanceof String)) {
            throw new Error("Expected the field `presentationName` to be a primitive type in the JSON string but got " + data['presentationName']);
        }
        // ensure the json data is a string
        if (data['descriptorName'] && !(typeof data['descriptorName'] === 'string' || data['descriptorName'] instanceof String)) {
            throw new Error("Expected the field `descriptorName` to be a primitive type in the JSON string but got " + data['descriptorName']);
        }
        // ensure the json data is a string
        if (data['artUri'] && !(typeof data['artUri'] === 'string' || data['artUri'] instanceof String)) {
            throw new Error("Expected the field `artUri` to be a primitive type in the JSON string but got " + data['artUri']);
        }
        // ensure the json data is a string
        if (data['coBrandName'] && !(typeof data['coBrandName'] === 'string' || data['coBrandName'] instanceof String)) {
            throw new Error("Expected the field `coBrandName` to be a primitive type in the JSON string but got " + data['coBrandName']);
        }

        return true;
    }


}

DigitalCardData.RequiredProperties = ["descriptorName", "artUri"];

/**
 * Presentation text created by the Consumer to enable recognition of the PAN entered into the DCF. This value is unique to the DCF and defined by the Consumer. (e.g. Nickname).
 * @member {String} presentationName
 */
DigitalCardData.prototype['presentationName'] = undefined;

/**
 * Presentation text defined by the SRC Programme that describes the PAN presented as a Digital Card. This descriptor is the same across all DCFs.
 * @member {String} descriptorName
 */
DigitalCardData.prototype['descriptorName'] = undefined;

/**
 * URI that locates the Card Art image to be used for presentation purposes. Should be provided by an Issuer.
 * @member {String} artUri
 */
DigitalCardData.prototype['artUri'] = undefined;

/**
 * Textual name of the co- brand partner. Available for MA only.
 * @member {String} coBrandName
 */
DigitalCardData.prototype['coBrandName'] = undefined;

/**
 * Indicates whether the product is co-branded. Available for MA only.
 * @member {Boolean} isCoBranded
 */
DigitalCardData.prototype['isCoBranded'] = undefined;






export default DigitalCardData;

