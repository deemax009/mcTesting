/**
 * Checkout, Save Card On File, Delete Saved Card On File And Confirmations API
 *  Click to Pay checkout used by Merchants to receive payload data from the Click to Pay System and send the results of transaction authorisation back to the Click to Pay System. Endpoints are available to retrieve payload data and send the outcome of a payment or checkout. 
 *
 * The version of the OpenAPI document: 1.3.2
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ThreeDsOutputData from './ThreeDsOutputData';
import VerificationData from './VerificationData';

/**
 * The AssuranceData model module.
 * @module model/AssuranceData
 * @version 1.3.2
 */
class AssuranceData {
    /**
     * Constructs a new <code>AssuranceData</code>.
     * Information about any risk assessment functions performed by the Mastercard Click to Pay System.
     * @alias module:model/AssuranceData
     */
    constructor() { 
        
        AssuranceData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AssuranceData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AssuranceData} obj Optional instance to populate.
     * @return {module:model/AssuranceData} The populated <code>AssuranceData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AssuranceData();

            if (data.hasOwnProperty('verificationData')) {
                obj['verificationData'] = ApiClient.convertToType(data['verificationData'], [VerificationData]);
            }
            if (data.hasOwnProperty('threeDsOutputData')) {
                obj['threeDsOutputData'] = ThreeDsOutputData.constructFromObject(data['threeDsOutputData']);
            }
            if (data.hasOwnProperty('eci')) {
                obj['eci'] = ApiClient.convertToType(data['eci'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AssuranceData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AssuranceData</code>.
     */
    static validateJSON(data) {
        if (data['verificationData']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['verificationData'])) {
                throw new Error("Expected the field `verificationData` to be an array in the JSON data but got " + data['verificationData']);
            }
            // validate the optional field `verificationData` (array)
            for (const item of data['verificationData']) {
                VerificationData.validateJSON(item);
            };
        }
        // validate the optional field `threeDsOutputData`
        if (data['threeDsOutputData']) { // data not null
          ThreeDsOutputData.validateJSON(data['threeDsOutputData']);
        }
        // ensure the json data is a string
        if (data['eci'] && !(typeof data['eci'] === 'string' || data['eci'] instanceof String)) {
            throw new Error("Expected the field `eci` to be a primitive type in the JSON string but got " + data['eci']);
        }

        return true;
    }


}



/**
 * The VerificationData structure can contain data relating to various entities within the specification.
 * @member {Array.<module:model/VerificationData>} verificationData
 */
AssuranceData.prototype['verificationData'] = undefined;

/**
 * @member {module:model/ThreeDsOutputData} threeDsOutputData
 */
AssuranceData.prototype['threeDsOutputData'] = undefined;

/**
 * Electronic Commerce Indicator (eci) is a payment system specific value that indicates the result of an attempt to authenticate the Cardholder. <br/> 01 - Authentication Attempted <br/> 02 - Authenticated <br/> 06 - Merchant Risk <br/> 
 * @member {String} eci
 */
AssuranceData.prototype['eci'] = undefined;






export default AssuranceData;

