/**
 * Checkout, Save Card On File, Delete Saved Card On File And Confirmations API
 *  Click to Pay checkout used by Merchants to receive payload data from the Click to Pay System and send the results of transaction authorisation back to the Click to Pay System. Endpoints are available to retrieve payload data and send the outcome of a payment or checkout. 
 *
 * The version of the OpenAPI document: 1.3.2
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConfirmationData from './ConfirmationData';

/**
 * The PostbackConfirmationRequest model module.
 * @module model/PostbackConfirmationRequest
 * @version 1.3.2
 */
class PostbackConfirmationRequest {
    /**
     * Constructs a new <code>PostbackConfirmationRequest</code>.
     * @alias module:model/PostbackConfirmationRequest
     * @param correlationId {String} A unique identifier that correlates a series of two or more requests to a single session of activity. Unified Checkout Solutions (UCS) will return a new correlationId in each response by default, but Integrators may choose to populate previously used correlationIds in subsequent requests to correlate their activity under a single ID. This can be done by providing a Mastercard generated correlationId in the request, or by generating your own ID in the same format. correlationId is used for tracking and troubleshooting purposes within Mastercard's ecosystem.
     * @param confirmationData {module:model/ConfirmationData} 
     */
    constructor(correlationId, confirmationData) { 
        
        PostbackConfirmationRequest.initialize(this, correlationId, confirmationData);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, correlationId, confirmationData) { 
        obj['correlationId'] = correlationId;
        obj['confirmationData'] = confirmationData;
    }

    /**
     * Constructs a <code>PostbackConfirmationRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PostbackConfirmationRequest} obj Optional instance to populate.
     * @return {module:model/PostbackConfirmationRequest} The populated <code>PostbackConfirmationRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PostbackConfirmationRequest();

            if (data.hasOwnProperty('correlationId')) {
                obj['correlationId'] = ApiClient.convertToType(data['correlationId'], 'String');
            }
            if (data.hasOwnProperty('merchantTransactionId')) {
                obj['merchantTransactionId'] = ApiClient.convertToType(data['merchantTransactionId'], 'String');
            }
            if (data.hasOwnProperty('confirmationData')) {
                obj['confirmationData'] = ConfirmationData.constructFromObject(data['confirmationData']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PostbackConfirmationRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PostbackConfirmationRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PostbackConfirmationRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['correlationId'] && !(typeof data['correlationId'] === 'string' || data['correlationId'] instanceof String)) {
            throw new Error("Expected the field `correlationId` to be a primitive type in the JSON string but got " + data['correlationId']);
        }
        // ensure the json data is a string
        if (data['merchantTransactionId'] && !(typeof data['merchantTransactionId'] === 'string' || data['merchantTransactionId'] instanceof String)) {
            throw new Error("Expected the field `merchantTransactionId` to be a primitive type in the JSON string but got " + data['merchantTransactionId']);
        }
        // validate the optional field `confirmationData`
        if (data['confirmationData']) { // data not null
          ConfirmationData.validateJSON(data['confirmationData']);
        }

        return true;
    }


}

PostbackConfirmationRequest.RequiredProperties = ["correlationId", "confirmationData"];

/**
 * A unique identifier that correlates a series of two or more requests to a single session of activity. Unified Checkout Solutions (UCS) will return a new correlationId in each response by default, but Integrators may choose to populate previously used correlationIds in subsequent requests to correlate their activity under a single ID. This can be done by providing a Mastercard generated correlationId in the request, or by generating your own ID in the same format. correlationId is used for tracking and troubleshooting purposes within Mastercard's ecosystem.
 * @member {String} correlationId
 */
PostbackConfirmationRequest.prototype['correlationId'] = undefined;

/**
 * An optional UUID generated by the Integrator that may be passed for internal tracking purposes.
 * @member {String} merchantTransactionId
 */
PostbackConfirmationRequest.prototype['merchantTransactionId'] = undefined;

/**
 * @member {module:model/ConfirmationData} confirmationData
 */
PostbackConfirmationRequest.prototype['confirmationData'] = undefined;






export default PostbackConfirmationRequest;

