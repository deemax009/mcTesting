/**
 * Checkout, Save Card On File, Delete Saved Card On File And Confirmations API
 *  Click to Pay checkout used by Merchants to receive payload data from the Click to Pay System and send the results of transaction authorisation back to the Click to Pay System. Endpoints are available to retrieve payload data and send the outcome of a payment or checkout. 
 *
 * The version of the OpenAPI document: 1.3.2
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PlainCard from './PlainCard';

/**
 * The CheckoutReferenceData model module.
 * @module model/CheckoutReferenceData
 * @version 1.3.2
 */
class CheckoutReferenceData {
    /**
     * Constructs a new <code>CheckoutReferenceData</code>.
     * @alias module:model/CheckoutReferenceData
     */
    constructor() { 
        
        CheckoutReferenceData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CheckoutReferenceData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CheckoutReferenceData} obj Optional instance to populate.
     * @return {module:model/CheckoutReferenceData} The populated <code>CheckoutReferenceData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CheckoutReferenceData();

            if (data.hasOwnProperty('merchantCardId')) {
                obj['merchantCardId'] = ApiClient.convertToType(data['merchantCardId'], 'String');
            }
            if (data.hasOwnProperty('merchantTransactionId')) {
                obj['merchantTransactionId'] = ApiClient.convertToType(data['merchantTransactionId'], 'String');
            }
            if (data.hasOwnProperty('encryptedCard')) {
                obj['encryptedCard'] = PlainCard.constructFromObject(data['encryptedCard']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CheckoutReferenceData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CheckoutReferenceData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['merchantCardId'] && !(typeof data['merchantCardId'] === 'string' || data['merchantCardId'] instanceof String)) {
            throw new Error("Expected the field `merchantCardId` to be a primitive type in the JSON string but got " + data['merchantCardId']);
        }
        // ensure the json data is a string
        if (data['merchantTransactionId'] && !(typeof data['merchantTransactionId'] === 'string' || data['merchantTransactionId'] instanceof String)) {
            throw new Error("Expected the field `merchantTransactionId` to be a primitive type in the JSON string but got " + data['merchantTransactionId']);
        }
        // validate the optional field `encryptedCard`
        if (data['encryptedCard']) { // data not null
          PlainCard.validateJSON(data['encryptedCard']);
        }

        return true;
    }


}



/**
 * Optionally carries the Card Identifier returned by Save Card on File endpoint. When provided here, Mastercard's SRCI system will use the associated Card to perform a checkout and return the transaction credentials for the same:  * For Subsequent Payment, this will be the value returned by SaveCOF operation. * For Subsequent Split Shipment, this will be the value returned by a previous POST: checkout/transaction/credentials) operation. 
 * @member {String} merchantCardId
 */
CheckoutReferenceData.prototype['merchantCardId'] = undefined;

/**
 * Optionally carries the Merchant Checkout Transaction Identifier which is returned in the checkoutResponse to either checkoutWithCard or checkoutWithNewCard JavaScript methods and links the client-side JavaScript calls and server-side API calls for a specific transaction. Optional for Subsequent Payment or Subsequent Split Shipment. 
 * @member {String} merchantTransactionId
 */
CheckoutReferenceData.prototype['merchantTransactionId'] = undefined;

/**
 * @member {module:model/PlainCard} encryptedCard
 */
CheckoutReferenceData.prototype['encryptedCard'] = undefined;






export default CheckoutReferenceData;

