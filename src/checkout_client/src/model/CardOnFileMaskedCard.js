/**
 * Checkout, Save Card On File, Delete Saved Card On File And Confirmations API
 *  Click to Pay checkout used by Merchants to receive payload data from the Click to Pay System and send the results of transaction authorisation back to the Click to Pay System. Endpoints are available to retrieve payload data and send the outcome of a payment or checkout. 
 *
 * The version of the OpenAPI document: 1.3.2
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DigitalCardData from './DigitalCardData';
import DigitalCardFeature from './DigitalCardFeature';

/**
 * The CardOnFileMaskedCard model module.
 * @module model/CardOnFileMaskedCard
 * @version 1.3.2
 */
class CardOnFileMaskedCard {
    /**
     * Constructs a new <code>CardOnFileMaskedCard</code>.
     * Masked card saved on file.
     * @alias module:model/CardOnFileMaskedCard
     * @param panBin {String} First significant digits of the PAN included in an unmasked form.
     * @param panLastFour {String} Attribute of the Payment Card that represents the Last four digits of the PAN included in an unmasked form.
     * @param digitalCardData {module:model/DigitalCardData} 
     */
    constructor(panBin, panLastFour, digitalCardData) { 
        
        CardOnFileMaskedCard.initialize(this, panBin, panLastFour, digitalCardData);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, panBin, panLastFour, digitalCardData) { 
        obj['panBin'] = panBin;
        obj['panLastFour'] = panLastFour;
        obj['digitalCardData'] = digitalCardData;
    }

    /**
     * Constructs a <code>CardOnFileMaskedCard</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CardOnFileMaskedCard} obj Optional instance to populate.
     * @return {module:model/CardOnFileMaskedCard} The populated <code>CardOnFileMaskedCard</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CardOnFileMaskedCard();

            if (data.hasOwnProperty('srcDigitalCardId')) {
                obj['srcDigitalCardId'] = ApiClient.convertToType(data['srcDigitalCardId'], 'String');
            }
            if (data.hasOwnProperty('panBin')) {
                obj['panBin'] = ApiClient.convertToType(data['panBin'], 'String');
            }
            if (data.hasOwnProperty('panLastFour')) {
                obj['panLastFour'] = ApiClient.convertToType(data['panLastFour'], 'String');
            }
            if (data.hasOwnProperty('digitalCardData')) {
                obj['digitalCardData'] = DigitalCardData.constructFromObject(data['digitalCardData']);
            }
            if (data.hasOwnProperty('panExpirationMonth')) {
                obj['panExpirationMonth'] = ApiClient.convertToType(data['panExpirationMonth'], 'String');
            }
            if (data.hasOwnProperty('panExpirationYear')) {
                obj['panExpirationYear'] = ApiClient.convertToType(data['panExpirationYear'], 'String');
            }
            if (data.hasOwnProperty('paymentCardDescriptor')) {
                obj['paymentCardDescriptor'] = ApiClient.convertToType(data['paymentCardDescriptor'], 'String');
            }
            if (data.hasOwnProperty('paymentCardType')) {
                obj['paymentCardType'] = ApiClient.convertToType(data['paymentCardType'], 'String');
            }
            if (data.hasOwnProperty('digitalCardFeatures')) {
                obj['digitalCardFeatures'] = ApiClient.convertToType(data['digitalCardFeatures'], [DigitalCardFeature]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CardOnFileMaskedCard</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CardOnFileMaskedCard</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CardOnFileMaskedCard.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['srcDigitalCardId'] && !(typeof data['srcDigitalCardId'] === 'string' || data['srcDigitalCardId'] instanceof String)) {
            throw new Error("Expected the field `srcDigitalCardId` to be a primitive type in the JSON string but got " + data['srcDigitalCardId']);
        }
        // ensure the json data is a string
        if (data['panBin'] && !(typeof data['panBin'] === 'string' || data['panBin'] instanceof String)) {
            throw new Error("Expected the field `panBin` to be a primitive type in the JSON string but got " + data['panBin']);
        }
        // ensure the json data is a string
        if (data['panLastFour'] && !(typeof data['panLastFour'] === 'string' || data['panLastFour'] instanceof String)) {
            throw new Error("Expected the field `panLastFour` to be a primitive type in the JSON string but got " + data['panLastFour']);
        }
        // validate the optional field `digitalCardData`
        if (data['digitalCardData']) { // data not null
          DigitalCardData.validateJSON(data['digitalCardData']);
        }
        // ensure the json data is a string
        if (data['panExpirationMonth'] && !(typeof data['panExpirationMonth'] === 'string' || data['panExpirationMonth'] instanceof String)) {
            throw new Error("Expected the field `panExpirationMonth` to be a primitive type in the JSON string but got " + data['panExpirationMonth']);
        }
        // ensure the json data is a string
        if (data['panExpirationYear'] && !(typeof data['panExpirationYear'] === 'string' || data['panExpirationYear'] instanceof String)) {
            throw new Error("Expected the field `panExpirationYear` to be a primitive type in the JSON string but got " + data['panExpirationYear']);
        }
        // ensure the json data is a string
        if (data['paymentCardDescriptor'] && !(typeof data['paymentCardDescriptor'] === 'string' || data['paymentCardDescriptor'] instanceof String)) {
            throw new Error("Expected the field `paymentCardDescriptor` to be a primitive type in the JSON string but got " + data['paymentCardDescriptor']);
        }
        // ensure the json data is a string
        if (data['paymentCardType'] && !(typeof data['paymentCardType'] === 'string' || data['paymentCardType'] instanceof String)) {
            throw new Error("Expected the field `paymentCardType` to be a primitive type in the JSON string but got " + data['paymentCardType']);
        }
        if (data['digitalCardFeatures']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['digitalCardFeatures'])) {
                throw new Error("Expected the field `digitalCardFeatures` to be an array in the JSON data but got " + data['digitalCardFeatures']);
            }
            // validate the optional field `digitalCardFeatures` (array)
            for (const item of data['digitalCardFeatures']) {
                DigitalCardFeature.validateJSON(item);
            };
        }

        return true;
    }


}

CardOnFileMaskedCard.RequiredProperties = ["panBin", "panLastFour", "digitalCardData"];

/**
 * Unique Identifier of the Card. Reference representing the PAN or Payment Token that enables a non-SRCPI entity to identify the underlying PAN. A single PAN can have one or more SRC Digital Card Reference Identifiers. Digital Card information can be accompanied with SRC Digital Card Reference Identifier. It is associated with the SRC Profile to which the Digital Card belongs and is unique within an SRC System. 
 * @member {String} srcDigitalCardId
 */
CardOnFileMaskedCard.prototype['srcDigitalCardId'] = undefined;

/**
 * First significant digits of the PAN included in an unmasked form.
 * @member {String} panBin
 */
CardOnFileMaskedCard.prototype['panBin'] = undefined;

/**
 * Attribute of the Payment Card that represents the Last four digits of the PAN included in an unmasked form.
 * @member {String} panLastFour
 */
CardOnFileMaskedCard.prototype['panLastFour'] = undefined;

/**
 * @member {module:model/DigitalCardData} digitalCardData
 */
CardOnFileMaskedCard.prototype['digitalCardData'] = undefined;

/**
 * Expiration month of the Payment Card expressed as a two-digit calendar month used for presentation purposes.
 * @member {String} panExpirationMonth
 */
CardOnFileMaskedCard.prototype['panExpirationMonth'] = undefined;

/**
 * Expiration year of the Payment Card expressed as four-digit calendar year, used for presentation purposes.
 * @member {String} panExpirationYear
 */
CardOnFileMaskedCard.prototype['panExpirationYear'] = undefined;

/**
 * Conveys the card brand, and will be a free-form string, to be defined within an SRC Programme.
 * @member {String} paymentCardDescriptor
 */
CardOnFileMaskedCard.prototype['paymentCardDescriptor'] = undefined;

/**
 * Conveys the card type. For example:CREDIT, DEBIT, PREPAID, COMBO, FLEX. Note:COMBO and FLEX for applicable regions only.
 * @member {String} paymentCardType
 */
CardOnFileMaskedCard.prototype['paymentCardType'] = undefined;

/**
 * Card benefits associated with a Digital Card to be presented to the Consumer at the time of checkout.
 * @member {Array.<module:model/DigitalCardFeature>} digitalCardFeatures
 */
CardOnFileMaskedCard.prototype['digitalCardFeatures'] = undefined;






export default CardOnFileMaskedCard;

