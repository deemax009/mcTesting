/**
 * Checkout, Save Card On File, Delete Saved Card On File And Confirmations API
 *  Click to Pay checkout used by Merchants to receive payload data from the Click to Pay System and send the results of transaction authorisation back to the Click to Pay System. Endpoints are available to retrieve payload data and send the outcome of a payment or checkout. 
 *
 * The version of the OpenAPI document: 1.3.2
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccountReferenceData from './AccountReferenceData';
import AccountReferenceType from './AccountReferenceType';

/**
 * The AccountReference model module.
 * @module model/AccountReference
 * @version 1.3.2
 */
class AccountReference {
    /**
     * Constructs a new <code>AccountReference</code>.
     * @alias module:model/AccountReference
     * @param type {module:model/AccountReferenceType} 
     * @param value {module:model/AccountReferenceData} 
     */
    constructor(type, value) { 
        
        AccountReference.initialize(this, type, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, value) { 
        obj['type'] = type;
        obj['value'] = value;
    }

    /**
     * Constructs a <code>AccountReference</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccountReference} obj Optional instance to populate.
     * @return {module:model/AccountReference} The populated <code>AccountReference</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccountReference();

            if (data.hasOwnProperty('type')) {
                obj['type'] = AccountReferenceType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = AccountReferenceData.constructFromObject(data['value']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AccountReference</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccountReference</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AccountReference.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `value`
        if (data['value']) { // data not null
          AccountReferenceData.validateJSON(data['value']);
        }

        return true;
    }


}

AccountReference.RequiredProperties = ["type", "value"];

/**
 * @member {module:model/AccountReferenceType} type
 */
AccountReference.prototype['type'] = undefined;

/**
 * @member {module:model/AccountReferenceData} value
 */
AccountReference.prototype['value'] = undefined;






export default AccountReference;

