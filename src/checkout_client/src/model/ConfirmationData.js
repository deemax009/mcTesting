/**
 * Checkout, Save Card On File, Delete Saved Card On File And Confirmations API
 *  Click to Pay checkout used by Merchants to receive payload data from the Click to Pay System and send the results of transaction authorisation back to the Click to Pay System. Endpoints are available to retrieve payload data and send the outcome of a payment or checkout. 
 *
 * The version of the OpenAPI document: 1.3.2
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TransactionAmount from './TransactionAmount';

/**
 * The ConfirmationData model module.
 * @module model/ConfirmationData
 * @version 1.3.2
 */
class ConfirmationData {
    /**
     * Constructs a new <code>ConfirmationData</code>.
     * Information about checkout and order confirmation status.
     * @alias module:model/ConfirmationData
     */
    constructor() { 
        
        ConfirmationData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConfirmationData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConfirmationData} obj Optional instance to populate.
     * @return {module:model/ConfirmationData} The populated <code>ConfirmationData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConfirmationData();

            if (data.hasOwnProperty('checkoutEventType')) {
                obj['checkoutEventType'] = ApiClient.convertToType(data['checkoutEventType'], 'String');
            }
            if (data.hasOwnProperty('checkoutEventStatus')) {
                obj['checkoutEventStatus'] = ApiClient.convertToType(data['checkoutEventStatus'], 'String');
            }
            if (data.hasOwnProperty('confirmationStatus')) {
                obj['confirmationStatus'] = ApiClient.convertToType(data['confirmationStatus'], 'String');
            }
            if (data.hasOwnProperty('confirmationReason')) {
                obj['confirmationReason'] = ApiClient.convertToType(data['confirmationReason'], 'String');
            }
            if (data.hasOwnProperty('confirmationTimestamp')) {
                obj['confirmationTimestamp'] = ApiClient.convertToType(data['confirmationTimestamp'], 'String');
            }
            if (data.hasOwnProperty('networkAuthorizationCode')) {
                obj['networkAuthorizationCode'] = ApiClient.convertToType(data['networkAuthorizationCode'], 'String');
            }
            if (data.hasOwnProperty('networkTransactionIdentifier')) {
                obj['networkTransactionIdentifier'] = ApiClient.convertToType(data['networkTransactionIdentifier'], 'String');
            }
            if (data.hasOwnProperty('paymentNetworkReference')) {
                obj['paymentNetworkReference'] = ApiClient.convertToType(data['paymentNetworkReference'], 'String');
            }
            if (data.hasOwnProperty('transactionAmount')) {
                obj['transactionAmount'] = TransactionAmount.constructFromObject(data['transactionAmount']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConfirmationData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConfirmationData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['checkoutEventType'] && !(typeof data['checkoutEventType'] === 'string' || data['checkoutEventType'] instanceof String)) {
            throw new Error("Expected the field `checkoutEventType` to be a primitive type in the JSON string but got " + data['checkoutEventType']);
        }
        // ensure the json data is a string
        if (data['checkoutEventStatus'] && !(typeof data['checkoutEventStatus'] === 'string' || data['checkoutEventStatus'] instanceof String)) {
            throw new Error("Expected the field `checkoutEventStatus` to be a primitive type in the JSON string but got " + data['checkoutEventStatus']);
        }
        // ensure the json data is a string
        if (data['confirmationStatus'] && !(typeof data['confirmationStatus'] === 'string' || data['confirmationStatus'] instanceof String)) {
            throw new Error("Expected the field `confirmationStatus` to be a primitive type in the JSON string but got " + data['confirmationStatus']);
        }
        // ensure the json data is a string
        if (data['confirmationReason'] && !(typeof data['confirmationReason'] === 'string' || data['confirmationReason'] instanceof String)) {
            throw new Error("Expected the field `confirmationReason` to be a primitive type in the JSON string but got " + data['confirmationReason']);
        }
        // ensure the json data is a string
        if (data['confirmationTimestamp'] && !(typeof data['confirmationTimestamp'] === 'string' || data['confirmationTimestamp'] instanceof String)) {
            throw new Error("Expected the field `confirmationTimestamp` to be a primitive type in the JSON string but got " + data['confirmationTimestamp']);
        }
        // ensure the json data is a string
        if (data['networkAuthorizationCode'] && !(typeof data['networkAuthorizationCode'] === 'string' || data['networkAuthorizationCode'] instanceof String)) {
            throw new Error("Expected the field `networkAuthorizationCode` to be a primitive type in the JSON string but got " + data['networkAuthorizationCode']);
        }
        // ensure the json data is a string
        if (data['networkTransactionIdentifier'] && !(typeof data['networkTransactionIdentifier'] === 'string' || data['networkTransactionIdentifier'] instanceof String)) {
            throw new Error("Expected the field `networkTransactionIdentifier` to be a primitive type in the JSON string but got " + data['networkTransactionIdentifier']);
        }
        // ensure the json data is a string
        if (data['paymentNetworkReference'] && !(typeof data['paymentNetworkReference'] === 'string' || data['paymentNetworkReference'] instanceof String)) {
            throw new Error("Expected the field `paymentNetworkReference` to be a primitive type in the JSON string but got " + data['paymentNetworkReference']);
        }
        // validate the optional field `transactionAmount`
        if (data['transactionAmount']) { // data not null
          TransactionAmount.validateJSON(data['transactionAmount']);
        }

        return true;
    }


}



/**
 * Event type associated with the checkout. Valid values are: 01 - Authorise 02 - Capture 03 - Refund 04 - Cancel 05 - Fraud 06 - Chargeback 07 - Other 
 * @member {String} checkoutEventType
 */
ConfirmationData.prototype['checkoutEventType'] = undefined;

/**
 * Status of the event associated with the checkout. Valid values are:    * 01 - Created   * 02 - Confirmed   * 03 - Cancelled   * 04 - Fraud Cancelled   * 05 - Others   * 06-50 - Reserved for EMVCo future use   * 51-99 - Click to Pay System specific statuses 
 * @member {String} checkoutEventStatus
 */
ConfirmationData.prototype['checkoutEventStatus'] = undefined;

/**
 * Status of the event as provided by the SRC Initiator in the Confirmation message. Valid values are:    * 01 - Success   * 02 - Failure   * 03 - Other 
 * @member {String} confirmationStatus
 */
ConfirmationData.prototype['confirmationStatus'] = undefined;

/**
 * Description of the reason for the event associated with the order.
 * @member {String} confirmationReason
 */
ConfirmationData.prototype['confirmationReason'] = undefined;

/**
 * Date and time (UTC) corresponding to the completion of confirmation event initiated by the SRC Initiator. UTC ISO 8601 format.
 * @member {String} confirmationTimestamp
 */
ConfirmationData.prototype['confirmationTimestamp'] = undefined;

/**
 * Authorization code associated with an approved transaction.
 * @member {String} networkAuthorizationCode
 */
ConfirmationData.prototype['networkAuthorizationCode'] = undefined;

/**
 * The unique authorization related tracing value assigned by a Payment Network and provided in an authorization response. Required only when checkoutEventType=01. If checkoutEventType=01 and the value of networkTransactionIdentifier is unknown, please pass UNAVLB.    
 * @member {String} networkTransactionIdentifier
 */
ConfirmationData.prototype['networkTransactionIdentifier'] = undefined;

/**
 * Transaction identifier as provided by a Payment Network after authorisation has been complete.
 * @member {String} paymentNetworkReference
 */
ConfirmationData.prototype['paymentNetworkReference'] = undefined;

/**
 * @member {module:model/TransactionAmount} transactionAmount
 */
ConfirmationData.prototype['transactionAmount'] = undefined;






export default ConfirmationData;

