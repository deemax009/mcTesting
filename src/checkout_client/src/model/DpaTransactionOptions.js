/**
 * Checkout, Save Card On File, Delete Saved Card On File And Confirmations API
 *  Click to Pay checkout used by Merchants to receive payload data from the Click to Pay System and send the results of transaction authorisation back to the Click to Pay System. Endpoints are available to retrieve payload data and send the outcome of a payment or checkout. 
 *
 * The version of the OpenAPI document: 1.3.2
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PaymentOptions from './PaymentOptions';
import TransactionAmount from './TransactionAmount';

/**
 * The DpaTransactionOptions model module.
 * @module model/DpaTransactionOptions
 * @version 1.3.2
 */
class DpaTransactionOptions {
    /**
     * Constructs a new <code>DpaTransactionOptions</code>.
     * When provided, Mastercard&#39;s SRCI will use the &#x60;dpaTransactionOptions&#x60; to perform a checkout and return the transaction credentials for the same:  * For Subsequent Payment, &#x60;dpaTransactionOptions.transaction.Amount&#x60; will be combined with the &#x60;dpaTransactionOptions&#x60; object passed in the Init Transaction operation. Note that all other settings within this &#x60;dpaTransactionOptions&#x60; (including the &#x60;orderType&#x60; as \&quot;SPLIT_SHIPMENT\&quot;) will be ignored. * For Split Shipment, set &#x60;dpaTransactionOptions.orderType&#x60; &#x3D; \&quot;SPLIT_SHIPMENT\&quot;. Note that all other settings within this dpaTransactionOptions will be ignored. The dpaTransactionOptions object passed in the Init Transaction operation for the first split shipment will override this object. 
     * @alias module:model/DpaTransactionOptions
     */
    constructor() { 
        
        DpaTransactionOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DpaTransactionOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DpaTransactionOptions} obj Optional instance to populate.
     * @return {module:model/DpaTransactionOptions} The populated <code>DpaTransactionOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DpaTransactionOptions();

            if (data.hasOwnProperty('transactionAmount')) {
                obj['transactionAmount'] = TransactionAmount.constructFromObject(data['transactionAmount']);
            }
            if (data.hasOwnProperty('paymentOptions')) {
                obj['paymentOptions'] = ApiClient.convertToType(data['paymentOptions'], [PaymentOptions]);
            }
            if (data.hasOwnProperty('orderType')) {
                obj['orderType'] = ApiClient.convertToType(data['orderType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DpaTransactionOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DpaTransactionOptions</code>.
     */
    static validateJSON(data) {
        // validate the optional field `transactionAmount`
        if (data['transactionAmount']) { // data not null
          TransactionAmount.validateJSON(data['transactionAmount']);
        }
        if (data['paymentOptions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['paymentOptions'])) {
                throw new Error("Expected the field `paymentOptions` to be an array in the JSON data but got " + data['paymentOptions']);
            }
            // validate the optional field `paymentOptions` (array)
            for (const item of data['paymentOptions']) {
                PaymentOptions.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['orderType'] && !(typeof data['orderType'] === 'string' || data['orderType'] instanceof String)) {
            throw new Error("Expected the field `orderType` to be a primitive type in the JSON string but got " + data['orderType']);
        }

        return true;
    }


}



/**
 * @member {module:model/TransactionAmount} transactionAmount
 */
DpaTransactionOptions.prototype['transactionAmount'] = undefined;

/**
 * Specifies the dynamic data requirement for the payload creation.
 * @member {Array.<module:model/PaymentOptions>} paymentOptions
 */
DpaTransactionOptions.prototype['paymentOptions'] = undefined;

/**
 * Type of the order.
 * @member {String} orderType
 */
DpaTransactionOptions.prototype['orderType'] = undefined;






export default DpaTransactionOptions;

