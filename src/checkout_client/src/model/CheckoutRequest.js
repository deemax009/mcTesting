/**
 * Checkout, Save Card On File, Delete Saved Card On File And Confirmations API
 *  Click to Pay checkout used by Merchants to receive payload data from the Click to Pay System and send the results of transaction authorisation back to the Click to Pay System. Endpoints are available to retrieve payload data and send the outcome of a payment or checkout. 
 *
 * The version of the OpenAPI document: 1.3.2
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CheckoutReference from './CheckoutReference';
import CheckoutType from './CheckoutType';
import DpaTransactionOptions from './DpaTransactionOptions';

/**
 * The CheckoutRequest model module.
 * @module model/CheckoutRequest
 * @version 1.3.2
 */
class CheckoutRequest {
    /**
     * Constructs a new <code>CheckoutRequest</code>.
     * @alias module:model/CheckoutRequest
     * @param srcDpaId {String} Client ID. This is the DPA ID of the merchant.
     * @param checkoutType {module:model/CheckoutType} 
     * @param checkoutReference {module:model/CheckoutReference} 
     */
    constructor(srcDpaId, checkoutType, checkoutReference) { 
        
        CheckoutRequest.initialize(this, srcDpaId, checkoutType, checkoutReference);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, srcDpaId, checkoutType, checkoutReference) { 
        obj['srcDpaId'] = srcDpaId;
        obj['checkoutType'] = checkoutType;
        obj['checkoutReference'] = checkoutReference;
    }

    /**
     * Constructs a <code>CheckoutRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CheckoutRequest} obj Optional instance to populate.
     * @return {module:model/CheckoutRequest} The populated <code>CheckoutRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CheckoutRequest();

            if (data.hasOwnProperty('srcDpaId')) {
                obj['srcDpaId'] = ApiClient.convertToType(data['srcDpaId'], 'String');
            }
            if (data.hasOwnProperty('merchantAccountId')) {
                obj['merchantAccountId'] = ApiClient.convertToType(data['merchantAccountId'], 'String');
            }
            if (data.hasOwnProperty('correlationId')) {
                obj['correlationId'] = ApiClient.convertToType(data['correlationId'], 'String');
            }
            if (data.hasOwnProperty('checkoutType')) {
                obj['checkoutType'] = CheckoutType.constructFromObject(data['checkoutType']);
            }
            if (data.hasOwnProperty('checkoutReference')) {
                obj['checkoutReference'] = CheckoutReference.constructFromObject(data['checkoutReference']);
            }
            if (data.hasOwnProperty('dpaTransactionOptions')) {
                obj['dpaTransactionOptions'] = DpaTransactionOptions.constructFromObject(data['dpaTransactionOptions']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CheckoutRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CheckoutRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CheckoutRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['srcDpaId'] && !(typeof data['srcDpaId'] === 'string' || data['srcDpaId'] instanceof String)) {
            throw new Error("Expected the field `srcDpaId` to be a primitive type in the JSON string but got " + data['srcDpaId']);
        }
        // ensure the json data is a string
        if (data['merchantAccountId'] && !(typeof data['merchantAccountId'] === 'string' || data['merchantAccountId'] instanceof String)) {
            throw new Error("Expected the field `merchantAccountId` to be a primitive type in the JSON string but got " + data['merchantAccountId']);
        }
        // ensure the json data is a string
        if (data['correlationId'] && !(typeof data['correlationId'] === 'string' || data['correlationId'] instanceof String)) {
            throw new Error("Expected the field `correlationId` to be a primitive type in the JSON string but got " + data['correlationId']);
        }
        // validate the optional field `checkoutReference`
        if (data['checkoutReference']) { // data not null
          CheckoutReference.validateJSON(data['checkoutReference']);
        }
        // validate the optional field `dpaTransactionOptions`
        if (data['dpaTransactionOptions']) { // data not null
          DpaTransactionOptions.validateJSON(data['dpaTransactionOptions']);
        }

        return true;
    }


}

CheckoutRequest.RequiredProperties = ["srcDpaId", "checkoutType", "checkoutReference"];

/**
 * Client ID. This is the DPA ID of the merchant.
 * @member {String} srcDpaId
 */
CheckoutRequest.prototype['srcDpaId'] = undefined;

/**
 * Merchant issued Account ID for a consumer. It serves as an integration check. It must be provided, if Merchant is using a Saved card and had specified the same during the SaveCOF operation.
 * @member {String} merchantAccountId
 */
CheckoutRequest.prototype['merchantAccountId'] = undefined;

/**
 * Correlation ID for this transaction. If available within the present checkout session (e.g. received in an earlier API response during the present session), then it must be provided, otherwise a new checkout session will be initiated.
 * @member {String} correlationId
 */
CheckoutRequest.prototype['correlationId'] = undefined;

/**
 * @member {module:model/CheckoutType} checkoutType
 */
CheckoutRequest.prototype['checkoutType'] = undefined;

/**
 * @member {module:model/CheckoutReference} checkoutReference
 */
CheckoutRequest.prototype['checkoutReference'] = undefined;

/**
 * @member {module:model/DpaTransactionOptions} dpaTransactionOptions
 */
CheckoutRequest.prototype['dpaTransactionOptions'] = undefined;






export default CheckoutRequest;

