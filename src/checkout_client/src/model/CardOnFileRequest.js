/**
 * Checkout, Save Card On File, Delete Saved Card On File And Confirmations API
 *  Click to Pay checkout used by Merchants to receive payload data from the Click to Pay System and send the results of transaction authorisation back to the Click to Pay System. Endpoints are available to retrieve payload data and send the outcome of a payment or checkout. 
 *
 * The version of the OpenAPI document: 1.3.2
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccountReference from './AccountReference';

/**
 * The CardOnFileRequest model module.
 * @module model/CardOnFileRequest
 * @version 1.3.2
 */
class CardOnFileRequest {
    /**
     * Constructs a new <code>CardOnFileRequest</code>.
     * @alias module:model/CardOnFileRequest
     * @param srcDpaId {String} Client ID. This will be the DPA ID of the v2 merchant.
     */
    constructor(srcDpaId) { 
        
        CardOnFileRequest.initialize(this, srcDpaId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, srcDpaId) { 
        obj['srcDpaId'] = srcDpaId;
    }

    /**
     * Constructs a <code>CardOnFileRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CardOnFileRequest} obj Optional instance to populate.
     * @return {module:model/CardOnFileRequest} The populated <code>CardOnFileRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CardOnFileRequest();

            if (data.hasOwnProperty('merchantTransactionId')) {
                obj['merchantTransactionId'] = ApiClient.convertToType(data['merchantTransactionId'], 'String');
            }
            if (data.hasOwnProperty('srcDpaId')) {
                obj['srcDpaId'] = ApiClient.convertToType(data['srcDpaId'], 'String');
            }
            if (data.hasOwnProperty('correlationId')) {
                obj['correlationId'] = ApiClient.convertToType(data['correlationId'], 'String');
            }
            if (data.hasOwnProperty('merchantAccountId')) {
                obj['merchantAccountId'] = ApiClient.convertToType(data['merchantAccountId'], 'String');
            }
            if (data.hasOwnProperty('accountReference')) {
                obj['accountReference'] = AccountReference.constructFromObject(data['accountReference']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CardOnFileRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CardOnFileRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CardOnFileRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['merchantTransactionId'] && !(typeof data['merchantTransactionId'] === 'string' || data['merchantTransactionId'] instanceof String)) {
            throw new Error("Expected the field `merchantTransactionId` to be a primitive type in the JSON string but got " + data['merchantTransactionId']);
        }
        // ensure the json data is a string
        if (data['srcDpaId'] && !(typeof data['srcDpaId'] === 'string' || data['srcDpaId'] instanceof String)) {
            throw new Error("Expected the field `srcDpaId` to be a primitive type in the JSON string but got " + data['srcDpaId']);
        }
        // ensure the json data is a string
        if (data['correlationId'] && !(typeof data['correlationId'] === 'string' || data['correlationId'] instanceof String)) {
            throw new Error("Expected the field `correlationId` to be a primitive type in the JSON string but got " + data['correlationId']);
        }
        // ensure the json data is a string
        if (data['merchantAccountId'] && !(typeof data['merchantAccountId'] === 'string' || data['merchantAccountId'] instanceof String)) {
            throw new Error("Expected the field `merchantAccountId` to be a primitive type in the JSON string but got " + data['merchantAccountId']);
        }
        // validate the optional field `accountReference`
        if (data['accountReference']) { // data not null
          AccountReference.validateJSON(data['accountReference']);
        }

        return true;
    }


}

CardOnFileRequest.RequiredProperties = ["srcDpaId"];

/**
 * Merchant Checkout Transaction Identifier which is returned in the checkoutResponse to either checkoutWithCard or checkoutWithNewCard JavaScript methods and links the client-side JavaScript calls and server-side API calls for a specific transaction. Optional for Subsequent Payment or Subsequent Split Shipment.
 * @member {String} merchantTransactionId
 */
CardOnFileRequest.prototype['merchantTransactionId'] = undefined;

/**
 * Client ID. This will be the DPA ID of the v2 merchant.
 * @member {String} srcDpaId
 */
CardOnFileRequest.prototype['srcDpaId'] = undefined;

/**
 * Correlation Id. Must be passed when merchantTransactionId is passed.
 * @member {String} correlationId
 */
CardOnFileRequest.prototype['correlationId'] = undefined;

/**
 * Merchant issued Account ID for a consumer. If provided, it serves as an integration check.
 * @member {String} merchantAccountId
 */
CardOnFileRequest.prototype['merchantAccountId'] = undefined;

/**
 * @member {module:model/AccountReference} accountReference
 */
CardOnFileRequest.prototype['accountReference'] = undefined;






export default CardOnFileRequest;

