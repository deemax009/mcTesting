/**
 * Mastercard Processing Core API
 * OpenAPI Specification for MP (Mastercard Processing) **Core**.  This documentation describes what functionalities are exposed by the MP's CMS (Card Management System) and are available to be used by the Issuer. The Issuer is the primary actor who executes the operations. Whenever the Issuer wishes to onboard its customers to the card program, they may use API to:  * create and manage **client**  * create and manage **contracts**, there are two types of contracts in the MP's CMS:    * **account contract**    * **card contract**  Later, during the card lifecycle, the Issuer can also manage other objects related to the client and the contract (account or card):  * manage **card plastic**  * create, manage and retrieve **additional addresses** (for the client and the contract)  * manage and retrieve **classifiers** (for the client and the contract)  * manage and retrieve **custom data** (for the client and the contract)  * manage and retrieve **parameters** (for the contract)  * set or retrieve **service limit tariff** (for the contract)  * post or retrieve **transactions** (for the contract)  * manage and retrieve **usage limits** (for the contract)  *** API uses RESTful protocol via HTTP to execute POST, PUT, GET and PATCH operations sent to given endpoints, e.g. `/clients`.  API uses JSON Web Encryption compact serialization for payload encryption for all API operations. *** External documentation:   * [ISO 4217 - Currency Codes](https://www.iso.org/iso-4217-currency-codes.html)   * [ISO 3166 - Country Codes](https://www.iso.org/iso-3166-country-codes.html)   * [Internet Engineering Task Force (IETF) BCP 47 standard](https://tools.ietf.org/html/bcp47#appendix-A)   * [JSON Web Encryption](https://developer.mastercard.com/platform/documentation/security-and-authentication/securing-sensitive-data-using-payload-encryption/#jwe-encryption)   * [Internet Engineering Task Force (IETF) RFC7232](https://datatracker.ietf.org/doc/html/rfc7232)   * [JSON Merge Patch](https://datatracker.ietf.org/doc/html/rfc7386) *** 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TransactionBaseInfo model module.
 * @module model/TransactionBaseInfo
 * @version 1.0.0
 */
class TransactionBaseInfo {
    /**
     * Constructs a new <code>TransactionBaseInfo</code>.
     * @alias module:model/TransactionBaseInfo
     */
    constructor() { 
        
        TransactionBaseInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TransactionBaseInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransactionBaseInfo} obj Optional instance to populate.
     * @return {module:model/TransactionBaseInfo} The populated <code>TransactionBaseInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransactionBaseInfo();

            if (data.hasOwnProperty('cardExpiryDate')) {
                obj['cardExpiryDate'] = ApiClient.convertToType(data['cardExpiryDate'], 'String');
            }
            if (data.hasOwnProperty('cardSequenceNumber')) {
                obj['cardSequenceNumber'] = ApiClient.convertToType(data['cardSequenceNumber'], 'String');
            }
            if (data.hasOwnProperty('postingDate')) {
                obj['postingDate'] = ApiClient.convertToType(data['postingDate'], 'Date');
            }
            if (data.hasOwnProperty('postingStatus')) {
                obj['postingStatus'] = ApiClient.convertToType(data['postingStatus'], 'String');
            }
            if (data.hasOwnProperty('responseCode')) {
                obj['responseCode'] = ApiClient.convertToType(data['responseCode'], 'Number');
            }
            if (data.hasOwnProperty('responseCodeDescription')) {
                obj['responseCodeDescription'] = ApiClient.convertToType(data['responseCodeDescription'], 'String');
            }
            if (data.hasOwnProperty('settlementDate')) {
                obj['settlementDate'] = ApiClient.convertToType(data['settlementDate'], 'Date');
            }
            if (data.hasOwnProperty('sourceContractId')) {
                obj['sourceContractId'] = ApiClient.convertToType(data['sourceContractId'], 'Number');
            }
            if (data.hasOwnProperty('sourceContractNumber')) {
                obj['sourceContractNumber'] = ApiClient.convertToType(data['sourceContractNumber'], 'String');
            }
            if (data.hasOwnProperty('targetContractId')) {
                obj['targetContractId'] = ApiClient.convertToType(data['targetContractId'], 'Number');
            }
            if (data.hasOwnProperty('targetContractNumber')) {
                obj['targetContractNumber'] = ApiClient.convertToType(data['targetContractNumber'], 'String');
            }
            if (data.hasOwnProperty('transactionDate')) {
                obj['transactionDate'] = ApiClient.convertToType(data['transactionDate'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransactionBaseInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransactionBaseInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cardExpiryDate'] && !(typeof data['cardExpiryDate'] === 'string' || data['cardExpiryDate'] instanceof String)) {
            throw new Error("Expected the field `cardExpiryDate` to be a primitive type in the JSON string but got " + data['cardExpiryDate']);
        }
        // ensure the json data is a string
        if (data['cardSequenceNumber'] && !(typeof data['cardSequenceNumber'] === 'string' || data['cardSequenceNumber'] instanceof String)) {
            throw new Error("Expected the field `cardSequenceNumber` to be a primitive type in the JSON string but got " + data['cardSequenceNumber']);
        }
        // ensure the json data is a string
        if (data['postingStatus'] && !(typeof data['postingStatus'] === 'string' || data['postingStatus'] instanceof String)) {
            throw new Error("Expected the field `postingStatus` to be a primitive type in the JSON string but got " + data['postingStatus']);
        }
        // ensure the json data is a string
        if (data['responseCodeDescription'] && !(typeof data['responseCodeDescription'] === 'string' || data['responseCodeDescription'] instanceof String)) {
            throw new Error("Expected the field `responseCodeDescription` to be a primitive type in the JSON string but got " + data['responseCodeDescription']);
        }
        // ensure the json data is a string
        if (data['sourceContractNumber'] && !(typeof data['sourceContractNumber'] === 'string' || data['sourceContractNumber'] instanceof String)) {
            throw new Error("Expected the field `sourceContractNumber` to be a primitive type in the JSON string but got " + data['sourceContractNumber']);
        }
        // ensure the json data is a string
        if (data['targetContractNumber'] && !(typeof data['targetContractNumber'] === 'string' || data['targetContractNumber'] instanceof String)) {
            throw new Error("Expected the field `targetContractNumber` to be a primitive type in the JSON string but got " + data['targetContractNumber']);
        }

        return true;
    }


}



/**
 * Card expiry date (YYMM format). 
 * @member {String} cardExpiryDate
 */
TransactionBaseInfo.prototype['cardExpiryDate'] = undefined;

/**
 * The sequence number of a `Plastic`, created under the given card contract. Every new `Plastic` created has the next number in a sequence following previous card plastics. 
 * @member {String} cardSequenceNumber
 */
TransactionBaseInfo.prototype['cardSequenceNumber'] = undefined;

/**
 * For authorization documents - authorization request processing date, for financial documents - macrotransaction processing date (YYYY-MM-DD format). 
 * @member {Date} postingDate
 */
TransactionBaseInfo.prototype['postingDate'] = undefined;

/**
 * Document processing status.  | **Possible values**  | **Description**                                                                                                                                                                                                                                                                                                                                  | |--------------------- |------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | Closed               | Reversal (document) has been successfully posted.                                                                                                                                                                                                                                                                                                | | Decline              | Document was rejected when it was processed.                                                                                                                                                                                                                                                                                                     | | Decline Service      | Document has been posted with the dispute contract.                                                                                                                                                                                                                                                                                              | | From Stand-In        | Obsolete status.                                                                                                                                                                                                                                                                                                                                 | | InActive             | Document status after its reversal document was successfully posted, or authorization document status after its financial document was successfully posted.                                                                                                                                                                                      | | Posted               | Document has been successfully posted.                                                                                                                                                                                                                                                                                                           | | PostPone             | Status used for documents in specific chains on acquiring side.                                                                                                                                                                                                                                                                                  | | Processed            | Intermediary status of a document during processing. This status is often given for example, to a financial document in the \"When available\" category during the processing stage if the required amount is not available on contract accounts.                                                                                                  | | Rejected             | Document was rejected when it was loaded (for authorization documents).                                                                                                                                                                                                                                                                          | | Suspended            | Authorization document is waiting to be posted.                                                                                                                                                                                                                                                                                                  | | System               | Status assigned to Product Inspector technical docs.                                                                                                                                                                                                                                                                                             | | Under Workflow       | The document is being processed in the Workflow Management module. This status is assigned to documents when it is necessary to stop standard processing of documents for additional checks (manual review). For example, when manually entering a batch of documents, or if the corresponding documents were not found during reconciliation.”  | | Waiting              | Document is waiting.                                                                                                                                                                                                                                                                                                                             | 
 * @member {String} postingStatus
 */
TransactionBaseInfo.prototype['postingStatus'] = undefined;

/**
 * Response code, which, together with posting status field value, shows the transaction posting results.   ------------------------------------------------------------- | `responseCode`        | `responseCodeDescription`           | |-----------------------|-------------------------------------| | 0   | Successfully completed | 1   | Refer to card issuer | 2   | Refer to card issuer's special condition | 3   |  Invalid merchant / source | 4   |  PICK UP | 5   |  Do not Honour | 6   |  Error | 7   |  Pick-up card, special condition | 8   |  Honour with identification | 9   |  Request in progress | 10  |  Approved for partial amount | 11  |  Approved (VIP)12  Invalid transaction | 13  |  Invalid amount | 14  |  No such card | 15  |  No such issuer | 16  |  Approved, update track 3 | 17  |  Customer cancellation | 18  |  Customer dispute | 19  |  Re-enter transaction | 20  |  Invalid response | 21  |  No action taken | 22  |  Suspected malfunction | 23  |  Unacceptable transaction fee | 24  |  File update not supported by receiver | 25  |  No such record | 26  |  Duplicate record update, old record replaced | 27  |  File update field edit error | 28  |  File locked out while update | 29  |  File update error, contact acquirer | 30  |  Format error | 31  |  Issuer signed-off | 32  |  Completed partially | 33  |  Pick-up, expired card | 34  |  Suspect Fraud | 35  |  Pick-up, card acceptor contact acquirer | 36  |  Pick up, card restricted | 37  |  Pick up, call acquirer security | 38  |  Pick up, Allowable PIN tries exceeded | 39  |  No credit account | 40  |  Requested function not supported | 41  |  Pick up, lost card | 42  |  No universal account | 43  |  Pick up, stolen card | 44  |  No investment account | 45  |  Reserved for ISO use | 46  |  Contract closed | 47  |  Reserved for ISO use | 48  |  Reserved for ISO use | 49  |  Reserved for ISO use | 50  |  Do not renew | 51  |  Not sufficient funds | 52  |  No cheque account | 53  |  No savings account54  Expired card / target | 55  |  Incorrect PIN | 56  |  No card record | 57  |  Transaction not permitted to cardholder | 58  |  Transaction not permitted to terminal | 59  |  Suspected fraud | 60  |  Card acceptor contact acquirer | 61  |  Exceeds withdrawal amount limit | 62  |  Restricted card | 63  |  Security violation | 64  |  Wrong original amount | 65  |  Exceeds withdrawal frequency limit | 66  |  Call acquirers security department | 67  |  Card to be picked up at ATM | 68  |  Response received too late | 69  |  Reserved | 70  |  Invalid transaction; contact card issuer | 71  |  Decline PIN not changed | 72  |  Reserved | 73  |  Reserved | 74  |  Reserved | 75  |  Allowable number of PIN tries exceeded | 76  |  Wrong PIN, number of PIN tries exceeded | 77  |  Wrong Reference No. | 78  |  Record Not Found | 79  |  Already reversed | 80  |  Network error | 81  |  Foreign network error / PIN cryptographic error | 82  |  Time-out at issuer system / Bad CVV (VISA) | 83  |  Transaction failed | 84  |  Pre-authorization timed out | 85  |  No reason to decline | 86  |  Unable to validate PIN | 87  |  Purchase Approval Only | 88  |  Cryptographic failure | 89  |  Authentication failure | 90  |  Cutoff is in progress | 91  |  Issuer or switch is inoperative | 92  |  Unable to route at acquirer module | 93  |  Cannot be completed, violation of law | 94  |  Duplicate Transmission | 95  |  Reconcile error / Auth Not found | 96  |  System Malfunction | 97  |  Reserved | 98  |  Reserved | 99  |  Reserved | 101  |  Chain not found | 102  |  Incorrect Chain | 103  |  Multiple Adjustment | 111  |  Card BIN not on file | 112  |  Card type not in service for this device | 113  |  Invalid operation for this card | 115  |  Requested function not supported | 117  |  Suspicious Transaction | 119  |  Card BIN not in service for this device | 120  |  Card not in service for this device | 121  |  Repeat | 122  |  Previous doc not found | 123  |  Invalid reversal amount | 124  |  Capture period expired | 125  |  Invalid capture amount | 126  |  Invalid PIN block format | 128  |  No communication keys available for use | 129  |  Operation key buffer error | 130  |  Invalid Terminal ID | 131  |  Wrong Transaction Attributes | 132  |  Unmatched Transaction Condition | 133  |  The transaction has already been reversed | 140  |  Field 39 in response is absent | 141  |  Unexpected Field 39 received | 142  |  Destination Channel has deceased | 143  |  Check request declined by Billing Channel | 144  |  Payment request declined by Billing Channel | 145  |  Credit authorization declined | 146  |  Card not In service for international transfers | 147  |  Transaction declined by Terminal | 148  |  Tokenization is unavailable for card | 149  |  Invalid Resolution Method ID | 160  |  Device Hardware/Software Error | 161  |  Wrong device status | 162  |  Unknown status message | 163  |  HSM Response error | 164  |  Command rejected by device | 165  |  Authorization System malfunction | 166  |  Command aborted | 167  |  ISO Log Insert Error | 168  |  Field Mapper internal Error | 169  |  Limit not setup | 170  |  Message Authentication Key not defined | 171  |  Message Authentication Field Missing | 172  |  MAC verification Error | 173  |  MAC Generation error | 174  |  Security Hardware/Software error | 175  |  Security Module Channel Timeout | 176  |  Link is inactive. Device is not connected | 177  |  Device is not in transaction | 178  |  Device is already in transaction | 179  |  Device response timed out | 180  |  Amount is too small. Dispense not possible | 181  |  Amount is too big. Dispense not possible | 182  |  Amount has cent's | 183  |  Dispense not possible | 185  |  Invalid authorization amount | 188  |  The Cardholder has not taken MONEY | 189  |  Non working time for this device | 190  |  Device not configured or not valid | 191  |  Device contract not valid | 192  |  Device not on file | 193  |  Requested operation not on file for this device | 194  |  Operation is disabled for this device | 195  |  Currency is not available for device | 196  |  Internal System Malfunction | 198  |  Track 2 Format Error | 199  |  PIN Block Conversion Error | 200  |  The Cardholder has not taken his Card | 201  |  Device is connected to another controller | 203  |  Source contract expired | 214  |  Merchant card is not on file | 240  |  Instalments not supported | 241  |  Over than maximum supported amount for instalments | 242  |  Less than minimum supported amount for instalments | 243  |  Over maximum supported instalments | 244  |  Below minimum supported instalments | 245  |  Over maximum gratuity months | 246  |  Below minimum gratuity months | 247  |  Recurring not available | 248  |  Invalid Recurring parameters | 249  |  Unsupported Recurring operation | 254  |  Merchant card expired | 257  |  Merchant card contract has not been approved | 258  |  Device contract is not on file | 261  |  Device amount limits exceeded | 262  |  Rejected Some Documents in this Batch | 263  |  Wrong Invoice Party | 265  |  Device frequency limits exceeded | 270  |  CAT transaction is not compatible with MCC 6011 | 271  |  Transaction attributes for chip card are present but Service Code not belongs to Integrated Circuit Card | 361  |  Merchant card amount limits exceeded | 365  |  Merchant card frequency limits exceeded | 405  |  Strong Customer Authentication Required | 457  |  CashBack disabled | 461  |  Exceeds CashBack amount limit ------------------------------------------------------------------- 
 * @member {Number} responseCode
 */
TransactionBaseInfo.prototype['responseCode'] = undefined;

/**
 * Description of the transaction response code. 
 * @member {String} responseCodeDescription
 */
TransactionBaseInfo.prototype['responseCodeDescription'] = undefined;

/**
 * Date when the transaction amount was converted from the settlement currency of the source bank into the settlement currency of the target bank (YYYY-MM-DD format). 
 * @member {Date} settlementDate
 */
TransactionBaseInfo.prototype['settlementDate'] = undefined;

/**
 * Source contract identifier. Contract record ID from MP's CMS database. 
 * @member {Number} sourceContractId
 */
TransactionBaseInfo.prototype['sourceContractId'] = undefined;

/**
 * Contract number of the source side (source contract).  * For account contract - value unmasked. * For card contract - value can be   * unmasked - full PAN visible   * masked - full PAN masked according to defined mask (mask pattern is agreed with Issuer and configured in the MP API)  In case of transaction done by card at POS field contains the terminal id. 
 * @member {String} sourceContractNumber
 */
TransactionBaseInfo.prototype['sourceContractNumber'] = undefined;

/**
 * Target contract identifier. Contract record ID from MP's CMS database. 
 * @member {Number} targetContractId
 */
TransactionBaseInfo.prototype['targetContractId'] = undefined;

/**
 * Contract number of the target side (target contract).  * For account contract - value unmasked. * For card contract - value can be   * unmasked - full PAN visible   * masked - full PAN masked according to defined mask (mask pattern is agreed with Issuer and configured in the MP API) 
 * @member {String} targetContractNumber
 */
TransactionBaseInfo.prototype['targetContractNumber'] = undefined;

/**
 * Transaction date and time. (format: YYYY-MM-DDThh:mm:ssZ) 
 * @member {Date} transactionDate
 */
TransactionBaseInfo.prototype['transactionDate'] = undefined;






export default TransactionBaseInfo;

