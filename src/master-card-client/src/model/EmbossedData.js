/**
 * Mastercard Processing Core API
 * OpenAPI Specification for MP (Mastercard Processing) **Core**.  This documentation describes what functionalities are exposed by the MP's CMS (Card Management System) and are available to be used by the Issuer. The Issuer is the primary actor who executes the operations. Whenever the Issuer wishes to onboard its customers to the card program, they may use API to:  * create and manage **client**  * create and manage **contracts**, there are two types of contracts in the MP's CMS:    * **account contract**    * **card contract**  Later, during the card lifecycle, the Issuer can also manage other objects related to the client and the contract (account or card):  * manage **card plastic**  * create, manage and retrieve **additional addresses** (for the client and the contract)  * manage and retrieve **classifiers** (for the client and the contract)  * manage and retrieve **custom data** (for the client and the contract)  * manage and retrieve **parameters** (for the contract)  * set or retrieve **service limit tariff** (for the contract)  * post or retrieve **transactions** (for the contract)  * manage and retrieve **usage limits** (for the contract)  *** API uses RESTful protocol via HTTP to execute POST, PUT, GET and PATCH operations sent to given endpoints, e.g. `/clients`.  API uses JSON Web Encryption compact serialization for payload encryption for all API operations. *** External documentation:   * [ISO 4217 - Currency Codes](https://www.iso.org/iso-4217-currency-codes.html)   * [ISO 3166 - Country Codes](https://www.iso.org/iso-3166-country-codes.html)   * [Internet Engineering Task Force (IETF) BCP 47 standard](https://tools.ietf.org/html/bcp47#appendix-A)   * [JSON Web Encryption](https://developer.mastercard.com/platform/documentation/security-and-authentication/securing-sensitive-data-using-payload-encryption/#jwe-encryption)   * [Internet Engineering Task Force (IETF) RFC7232](https://datatracker.ietf.org/doc/html/rfc7232)   * [JSON Merge Patch](https://datatracker.ietf.org/doc/html/rfc7386) *** 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EmbossedData model module.
 * @module model/EmbossedData
 * @version 1.0.0
 */
class EmbossedData {
    /**
     * Constructs a new <code>EmbossedData</code>.
     * Data embossing is used by the Issuer to specify what text shall be embossed on the physical card. Data embossing in the MP&#39;s CMS can be specified at the **client level** and at the **card contract level**. Once a card contract is created, the MP&#39;s CMS executes the card personalization process which produces data required for physical card production. The following rules apply:   * If both places (client&#39;s embossed data and card&#39;s embossed data) are filled, then the personalization process takes the values from the card contract.   * If the client&#39;s embossed data are not filled and a card contract creation request is being processed without data embossing passed, then the MP&#39;s CMS will not allow to create a card contract – a creation request will be rejected with proper information.   * The MP&#39;s CMS creates two printed lines based on four embossing fields:     * 1st printed line: &#x60;title&#x60; + space + &#x60;firstName&#x60; + space + &#x60;lastName&#x60;,     * 2nd printed line: &#x60;companyName&#x60;   * The &#x60;lastName&#x60; field must always be filled for card production. In the special case when a client wishes to store only the company name, it must be placed in the &#x60;lastName&#x60; field instead of the &#x60;companyName&#x60; field.   * The MP&#39;s CMS validates the length of printed lines and allows only a limited number of characters:     * 1st printed line:          Length for the &#x60;title&#x60;, &#x60;firstName&#x60; and &#x60;lastName&#x60; combined is set by default to 26 (the system also counts the spaces between the fields, so for example &#x60;firstName&#x60;&#x3D;’Adam’, &#x60;lastName&#x60;&#x3D;’Smith’ will have a total length of 10, not 9).     * 2nd printed line:          The length for the &#x60;companyName&#x60; field is set by default to 26.    * The MP&#39;s CMS allows to pass in data embossing only a limited set of characters (by default, only capital letters are allowed), as they have to be printed on the physical card using a standard font (default values are already configured). The MP&#39;s CMS validates the characters sent by the Issuer against the permitted ones. In case a passed character is not permitted, proper information will be returned and the request will be rejected.    *Disclaimer: Please contact the MP representative should other embossed characters be required. The available set of characters will need to be agreed by the MP and the Issuer prior to the onboarding process as it needs to be configured on the MP&#39;s side.* 
     * @alias module:model/EmbossedData
     */
    constructor() { 
        
        EmbossedData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EmbossedData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EmbossedData} obj Optional instance to populate.
     * @return {module:model/EmbossedData} The populated <code>EmbossedData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EmbossedData();

            if (data.hasOwnProperty('companyName')) {
                obj['companyName'] = ApiClient.convertToType(data['companyName'], 'String');
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EmbossedData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EmbossedData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['companyName'] && !(typeof data['companyName'] === 'string' || data['companyName'] instanceof String)) {
            throw new Error("Expected the field `companyName` to be a primitive type in the JSON string but got " + data['companyName']);
        }
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * Company name to be embossed. 
 * @member {String} companyName
 */
EmbossedData.prototype['companyName'] = undefined;

/**
 * First name to be embossed. 
 * @member {String} firstName
 */
EmbossedData.prototype['firstName'] = undefined;

/**
 * Last name to be embossed. 
 * @member {String} lastName
 */
EmbossedData.prototype['lastName'] = undefined;

/**
 * Client's title to be embossed.  | **Possible values (default)**  | |------------------------------- | | MR                             | | MRS                            | | MISS                           |  *Disclaimer: Please contact the MP representative should other values be required. Available values will need to be agreed by the MP and the Issuer prior to the onboarding process as they need to be configured on the MP's side.* 
 * @member {String} title
 */
EmbossedData.prototype['title'] = undefined;






export default EmbossedData;

