/**
 * Mastercard Processing Core API
 * OpenAPI Specification for MP (Mastercard Processing) **Core**.  This documentation describes what functionalities are exposed by the MP's CMS (Card Management System) and are available to be used by the Issuer. The Issuer is the primary actor who executes the operations. Whenever the Issuer wishes to onboard its customers to the card program, they may use API to:  * create and manage **client**  * create and manage **contracts**, there are two types of contracts in the MP's CMS:    * **account contract**    * **card contract**  Later, during the card lifecycle, the Issuer can also manage other objects related to the client and the contract (account or card):  * manage **card plastic**  * create, manage and retrieve **additional addresses** (for the client and the contract)  * manage and retrieve **classifiers** (for the client and the contract)  * manage and retrieve **custom data** (for the client and the contract)  * manage and retrieve **parameters** (for the contract)  * set or retrieve **service limit tariff** (for the contract)  * post or retrieve **transactions** (for the contract)  * manage and retrieve **usage limits** (for the contract)  *** API uses RESTful protocol via HTTP to execute POST, PUT, GET and PATCH operations sent to given endpoints, e.g. `/clients`.  API uses JSON Web Encryption compact serialization for payload encryption for all API operations. *** External documentation:   * [ISO 4217 - Currency Codes](https://www.iso.org/iso-4217-currency-codes.html)   * [ISO 3166 - Country Codes](https://www.iso.org/iso-3166-country-codes.html)   * [Internet Engineering Task Force (IETF) BCP 47 standard](https://tools.ietf.org/html/bcp47#appendix-A)   * [JSON Web Encryption](https://developer.mastercard.com/platform/documentation/security-and-authentication/securing-sensitive-data-using-payload-encryption/#jwe-encryption)   * [Internet Engineering Task Force (IETF) RFC7232](https://datatracker.ietf.org/doc/html/rfc7232)   * [JSON Merge Patch](https://datatracker.ietf.org/doc/html/rfc7386) *** 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TransactionCustomData from './TransactionCustomData';

/**
 * The Transaction model module.
 * @module model/Transaction
 * @version 1.0.0
 */
class Transaction {
    /**
     * Constructs a new <code>Transaction</code>.
     * @alias module:model/Transaction
     */
    constructor() { 
        
        Transaction.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Transaction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Transaction} obj Optional instance to populate.
     * @return {module:model/Transaction} The populated <code>Transaction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Transaction();

            if (data.hasOwnProperty('accountCurrency')) {
                obj['accountCurrency'] = ApiClient.convertToType(data['accountCurrency'], 'String');
            }
            if (data.hasOwnProperty('accountCurrencyNumericCode')) {
                obj['accountCurrencyNumericCode'] = ApiClient.convertToType(data['accountCurrencyNumericCode'], 'String');
            }
            if (data.hasOwnProperty('arn')) {
                obj['arn'] = ApiClient.convertToType(data['arn'], 'String');
            }
            if (data.hasOwnProperty('authorizationCode')) {
                obj['authorizationCode'] = ApiClient.convertToType(data['authorizationCode'], 'String');
            }
            if (data.hasOwnProperty('authorized')) {
                obj['authorized'] = ApiClient.convertToType(data['authorized'], 'Boolean');
            }
            if (data.hasOwnProperty('authorizationId')) {
                obj['authorizationId'] = ApiClient.convertToType(data['authorizationId'], 'Number');
            }
            if (data.hasOwnProperty('baseAmount')) {
                obj['baseAmount'] = ApiClient.convertToType(data['baseAmount'], 'Number');
            }
            if (data.hasOwnProperty('customTransactionData')) {
                obj['customTransactionData'] = ApiClient.convertToType(data['customTransactionData'], [TransactionCustomData]);
            }
            if (data.hasOwnProperty('customTransactionCondition')) {
                obj['customTransactionCondition'] = ApiClient.convertToType(data['customTransactionCondition'], 'String');
            }
            if (data.hasOwnProperty('customTransactionTypeCode')) {
                obj['customTransactionTypeCode'] = ApiClient.convertToType(data['customTransactionTypeCode'], 'String');
            }
            if (data.hasOwnProperty('feeAmount')) {
                obj['feeAmount'] = ApiClient.convertToType(data['feeAmount'], 'Number');
            }
            if (data.hasOwnProperty('feeDescription')) {
                obj['feeDescription'] = ApiClient.convertToType(data['feeDescription'], 'String');
            }
            if (data.hasOwnProperty('financialDocumentId')) {
                obj['financialDocumentId'] = ApiClient.convertToType(data['financialDocumentId'], 'Number');
            }
            if (data.hasOwnProperty('fxRate')) {
                obj['fxRate'] = ApiClient.convertToType(data['fxRate'], 'String');
            }
            if (data.hasOwnProperty('installmentChainId')) {
                obj['installmentChainId'] = ApiClient.convertToType(data['installmentChainId'], 'Number');
            }
            if (data.hasOwnProperty('installmentPlanStatus')) {
                obj['installmentPlanStatus'] = ApiClient.convertToType(data['installmentPlanStatus'], 'String');
            }
            if (data.hasOwnProperty('mcc')) {
                obj['mcc'] = ApiClient.convertToType(data['mcc'], 'String');
            }
            if (data.hasOwnProperty('mccDescription')) {
                obj['mccDescription'] = ApiClient.convertToType(data['mccDescription'], 'String');
            }
            if (data.hasOwnProperty('merchantCountry')) {
                obj['merchantCountry'] = ApiClient.convertToType(data['merchantCountry'], 'String');
            }
            if (data.hasOwnProperty('merchantLocation')) {
                obj['merchantLocation'] = ApiClient.convertToType(data['merchantLocation'], 'String');
            }
            if (data.hasOwnProperty('merchantName')) {
                obj['merchantName'] = ApiClient.convertToType(data['merchantName'], 'String');
            }
            if (data.hasOwnProperty('postingDate')) {
                obj['postingDate'] = ApiClient.convertToType(data['postingDate'], 'Date');
            }
            if (data.hasOwnProperty('responseCode')) {
                obj['responseCode'] = ApiClient.convertToType(data['responseCode'], 'Number');
            }
            if (data.hasOwnProperty('responseCodeDescription')) {
                obj['responseCodeDescription'] = ApiClient.convertToType(data['responseCodeDescription'], 'String');
            }
            if (data.hasOwnProperty('rrn')) {
                obj['rrn'] = ApiClient.convertToType(data['rrn'], 'String');
            }
            if (data.hasOwnProperty('serviceClassCode')) {
                obj['serviceClassCode'] = ApiClient.convertToType(data['serviceClassCode'], 'String');
            }
            if (data.hasOwnProperty('settlementAmount')) {
                obj['settlementAmount'] = ApiClient.convertToType(data['settlementAmount'], 'Number');
            }
            if (data.hasOwnProperty('settlementCurrency')) {
                obj['settlementCurrency'] = ApiClient.convertToType(data['settlementCurrency'], 'String');
            }
            if (data.hasOwnProperty('settlementCurrencyNumericCode')) {
                obj['settlementCurrencyNumericCode'] = ApiClient.convertToType(data['settlementCurrencyNumericCode'], 'String');
            }
            if (data.hasOwnProperty('sourceContractCbsNumber')) {
                obj['sourceContractCbsNumber'] = ApiClient.convertToType(data['sourceContractCbsNumber'], 'String');
            }
            if (data.hasOwnProperty('sourceContractId')) {
                obj['sourceContractId'] = ApiClient.convertToType(data['sourceContractId'], 'Number');
            }
            if (data.hasOwnProperty('sourceContractNumber')) {
                obj['sourceContractNumber'] = ApiClient.convertToType(data['sourceContractNumber'], 'String');
            }
            if (data.hasOwnProperty('srn')) {
                obj['srn'] = ApiClient.convertToType(data['srn'], 'String');
            }
            if (data.hasOwnProperty('targetContractCbsNumber')) {
                obj['targetContractCbsNumber'] = ApiClient.convertToType(data['targetContractCbsNumber'], 'String');
            }
            if (data.hasOwnProperty('targetContractId')) {
                obj['targetContractId'] = ApiClient.convertToType(data['targetContractId'], 'Number');
            }
            if (data.hasOwnProperty('targetContractNumber')) {
                obj['targetContractNumber'] = ApiClient.convertToType(data['targetContractNumber'], 'String');
            }
            if (data.hasOwnProperty('tokenNumberSafe')) {
                obj['tokenNumberSafe'] = ApiClient.convertToType(data['tokenNumberSafe'], 'String');
            }
            if (data.hasOwnProperty('transactionAmount')) {
                obj['transactionAmount'] = ApiClient.convertToType(data['transactionAmount'], 'Number');
            }
            if (data.hasOwnProperty('transactionCurrency')) {
                obj['transactionCurrency'] = ApiClient.convertToType(data['transactionCurrency'], 'String');
            }
            if (data.hasOwnProperty('transactionCurrencyNumericCode')) {
                obj['transactionCurrencyNumericCode'] = ApiClient.convertToType(data['transactionCurrencyNumericCode'], 'String');
            }
            if (data.hasOwnProperty('transactionDate')) {
                obj['transactionDate'] = ApiClient.convertToType(data['transactionDate'], 'Date');
            }
            if (data.hasOwnProperty('transactionDescription')) {
                obj['transactionDescription'] = ApiClient.convertToType(data['transactionDescription'], 'String');
            }
            if (data.hasOwnProperty('transactionId')) {
                obj['transactionId'] = ApiClient.convertToType(data['transactionId'], 'Number');
            }
            if (data.hasOwnProperty('transactionStatus')) {
                obj['transactionStatus'] = ApiClient.convertToType(data['transactionStatus'], 'String');
            }
            if (data.hasOwnProperty('transactionType')) {
                obj['transactionType'] = ApiClient.convertToType(data['transactionType'], 'String');
            }
            if (data.hasOwnProperty('transactionTypeCode')) {
                obj['transactionTypeCode'] = ApiClient.convertToType(data['transactionTypeCode'], 'String');
            }
            if (data.hasOwnProperty('walletId')) {
                obj['walletId'] = ApiClient.convertToType(data['walletId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Transaction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Transaction</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountCurrency'] && !(typeof data['accountCurrency'] === 'string' || data['accountCurrency'] instanceof String)) {
            throw new Error("Expected the field `accountCurrency` to be a primitive type in the JSON string but got " + data['accountCurrency']);
        }
        // ensure the json data is a string
        if (data['accountCurrencyNumericCode'] && !(typeof data['accountCurrencyNumericCode'] === 'string' || data['accountCurrencyNumericCode'] instanceof String)) {
            throw new Error("Expected the field `accountCurrencyNumericCode` to be a primitive type in the JSON string but got " + data['accountCurrencyNumericCode']);
        }
        // ensure the json data is a string
        if (data['arn'] && !(typeof data['arn'] === 'string' || data['arn'] instanceof String)) {
            throw new Error("Expected the field `arn` to be a primitive type in the JSON string but got " + data['arn']);
        }
        // ensure the json data is a string
        if (data['authorizationCode'] && !(typeof data['authorizationCode'] === 'string' || data['authorizationCode'] instanceof String)) {
            throw new Error("Expected the field `authorizationCode` to be a primitive type in the JSON string but got " + data['authorizationCode']);
        }
        if (data['customTransactionData']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['customTransactionData'])) {
                throw new Error("Expected the field `customTransactionData` to be an array in the JSON data but got " + data['customTransactionData']);
            }
            // validate the optional field `customTransactionData` (array)
            for (const item of data['customTransactionData']) {
                TransactionCustomData.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['customTransactionCondition'] && !(typeof data['customTransactionCondition'] === 'string' || data['customTransactionCondition'] instanceof String)) {
            throw new Error("Expected the field `customTransactionCondition` to be a primitive type in the JSON string but got " + data['customTransactionCondition']);
        }
        // ensure the json data is a string
        if (data['customTransactionTypeCode'] && !(typeof data['customTransactionTypeCode'] === 'string' || data['customTransactionTypeCode'] instanceof String)) {
            throw new Error("Expected the field `customTransactionTypeCode` to be a primitive type in the JSON string but got " + data['customTransactionTypeCode']);
        }
        // ensure the json data is a string
        if (data['feeDescription'] && !(typeof data['feeDescription'] === 'string' || data['feeDescription'] instanceof String)) {
            throw new Error("Expected the field `feeDescription` to be a primitive type in the JSON string but got " + data['feeDescription']);
        }
        // ensure the json data is a string
        if (data['fxRate'] && !(typeof data['fxRate'] === 'string' || data['fxRate'] instanceof String)) {
            throw new Error("Expected the field `fxRate` to be a primitive type in the JSON string but got " + data['fxRate']);
        }
        // ensure the json data is a string
        if (data['installmentPlanStatus'] && !(typeof data['installmentPlanStatus'] === 'string' || data['installmentPlanStatus'] instanceof String)) {
            throw new Error("Expected the field `installmentPlanStatus` to be a primitive type in the JSON string but got " + data['installmentPlanStatus']);
        }
        // ensure the json data is a string
        if (data['mcc'] && !(typeof data['mcc'] === 'string' || data['mcc'] instanceof String)) {
            throw new Error("Expected the field `mcc` to be a primitive type in the JSON string but got " + data['mcc']);
        }
        // ensure the json data is a string
        if (data['mccDescription'] && !(typeof data['mccDescription'] === 'string' || data['mccDescription'] instanceof String)) {
            throw new Error("Expected the field `mccDescription` to be a primitive type in the JSON string but got " + data['mccDescription']);
        }
        // ensure the json data is a string
        if (data['merchantCountry'] && !(typeof data['merchantCountry'] === 'string' || data['merchantCountry'] instanceof String)) {
            throw new Error("Expected the field `merchantCountry` to be a primitive type in the JSON string but got " + data['merchantCountry']);
        }
        // ensure the json data is a string
        if (data['merchantLocation'] && !(typeof data['merchantLocation'] === 'string' || data['merchantLocation'] instanceof String)) {
            throw new Error("Expected the field `merchantLocation` to be a primitive type in the JSON string but got " + data['merchantLocation']);
        }
        // ensure the json data is a string
        if (data['merchantName'] && !(typeof data['merchantName'] === 'string' || data['merchantName'] instanceof String)) {
            throw new Error("Expected the field `merchantName` to be a primitive type in the JSON string but got " + data['merchantName']);
        }
        // ensure the json data is a string
        if (data['responseCodeDescription'] && !(typeof data['responseCodeDescription'] === 'string' || data['responseCodeDescription'] instanceof String)) {
            throw new Error("Expected the field `responseCodeDescription` to be a primitive type in the JSON string but got " + data['responseCodeDescription']);
        }
        // ensure the json data is a string
        if (data['rrn'] && !(typeof data['rrn'] === 'string' || data['rrn'] instanceof String)) {
            throw new Error("Expected the field `rrn` to be a primitive type in the JSON string but got " + data['rrn']);
        }
        // ensure the json data is a string
        if (data['serviceClassCode'] && !(typeof data['serviceClassCode'] === 'string' || data['serviceClassCode'] instanceof String)) {
            throw new Error("Expected the field `serviceClassCode` to be a primitive type in the JSON string but got " + data['serviceClassCode']);
        }
        // ensure the json data is a string
        if (data['settlementCurrency'] && !(typeof data['settlementCurrency'] === 'string' || data['settlementCurrency'] instanceof String)) {
            throw new Error("Expected the field `settlementCurrency` to be a primitive type in the JSON string but got " + data['settlementCurrency']);
        }
        // ensure the json data is a string
        if (data['settlementCurrencyNumericCode'] && !(typeof data['settlementCurrencyNumericCode'] === 'string' || data['settlementCurrencyNumericCode'] instanceof String)) {
            throw new Error("Expected the field `settlementCurrencyNumericCode` to be a primitive type in the JSON string but got " + data['settlementCurrencyNumericCode']);
        }
        // ensure the json data is a string
        if (data['sourceContractCbsNumber'] && !(typeof data['sourceContractCbsNumber'] === 'string' || data['sourceContractCbsNumber'] instanceof String)) {
            throw new Error("Expected the field `sourceContractCbsNumber` to be a primitive type in the JSON string but got " + data['sourceContractCbsNumber']);
        }
        // ensure the json data is a string
        if (data['sourceContractNumber'] && !(typeof data['sourceContractNumber'] === 'string' || data['sourceContractNumber'] instanceof String)) {
            throw new Error("Expected the field `sourceContractNumber` to be a primitive type in the JSON string but got " + data['sourceContractNumber']);
        }
        // ensure the json data is a string
        if (data['srn'] && !(typeof data['srn'] === 'string' || data['srn'] instanceof String)) {
            throw new Error("Expected the field `srn` to be a primitive type in the JSON string but got " + data['srn']);
        }
        // ensure the json data is a string
        if (data['targetContractCbsNumber'] && !(typeof data['targetContractCbsNumber'] === 'string' || data['targetContractCbsNumber'] instanceof String)) {
            throw new Error("Expected the field `targetContractCbsNumber` to be a primitive type in the JSON string but got " + data['targetContractCbsNumber']);
        }
        // ensure the json data is a string
        if (data['targetContractNumber'] && !(typeof data['targetContractNumber'] === 'string' || data['targetContractNumber'] instanceof String)) {
            throw new Error("Expected the field `targetContractNumber` to be a primitive type in the JSON string but got " + data['targetContractNumber']);
        }
        // ensure the json data is a string
        if (data['tokenNumberSafe'] && !(typeof data['tokenNumberSafe'] === 'string' || data['tokenNumberSafe'] instanceof String)) {
            throw new Error("Expected the field `tokenNumberSafe` to be a primitive type in the JSON string but got " + data['tokenNumberSafe']);
        }
        // ensure the json data is a string
        if (data['transactionCurrency'] && !(typeof data['transactionCurrency'] === 'string' || data['transactionCurrency'] instanceof String)) {
            throw new Error("Expected the field `transactionCurrency` to be a primitive type in the JSON string but got " + data['transactionCurrency']);
        }
        // ensure the json data is a string
        if (data['transactionCurrencyNumericCode'] && !(typeof data['transactionCurrencyNumericCode'] === 'string' || data['transactionCurrencyNumericCode'] instanceof String)) {
            throw new Error("Expected the field `transactionCurrencyNumericCode` to be a primitive type in the JSON string but got " + data['transactionCurrencyNumericCode']);
        }
        // ensure the json data is a string
        if (data['transactionDescription'] && !(typeof data['transactionDescription'] === 'string' || data['transactionDescription'] instanceof String)) {
            throw new Error("Expected the field `transactionDescription` to be a primitive type in the JSON string but got " + data['transactionDescription']);
        }
        // ensure the json data is a string
        if (data['transactionStatus'] && !(typeof data['transactionStatus'] === 'string' || data['transactionStatus'] instanceof String)) {
            throw new Error("Expected the field `transactionStatus` to be a primitive type in the JSON string but got " + data['transactionStatus']);
        }
        // ensure the json data is a string
        if (data['transactionType'] && !(typeof data['transactionType'] === 'string' || data['transactionType'] instanceof String)) {
            throw new Error("Expected the field `transactionType` to be a primitive type in the JSON string but got " + data['transactionType']);
        }
        // ensure the json data is a string
        if (data['transactionTypeCode'] && !(typeof data['transactionTypeCode'] === 'string' || data['transactionTypeCode'] instanceof String)) {
            throw new Error("Expected the field `transactionTypeCode` to be a primitive type in the JSON string but got " + data['transactionTypeCode']);
        }
        // ensure the json data is a string
        if (data['walletId'] && !(typeof data['walletId'] === 'string' || data['walletId'] instanceof String)) {
            throw new Error("Expected the field `walletId` to be a primitive type in the JSON string but got " + data['walletId']);
        }

        return true;
    }


}



/**
 * Currency of account which was debited/credited for base amount and fee amount. (format according to ISO 4217, alphanumeric code). 
 * @member {String} accountCurrency
 */
Transaction.prototype['accountCurrency'] = undefined;

/**
 * Currency of account which was debited/credited for base amount and fee amount. (format according to ISO 4217, numeric code). 
 * @member {String} accountCurrencyNumericCode
 */
Transaction.prototype['accountCurrencyNumericCode'] = undefined;

/**
 * Acquirer Reference Number. 
 * @member {String} arn
 */
Transaction.prototype['arn'] = undefined;

/**
 * Authorization code. 
 * @member {String} authorizationCode
 */
Transaction.prototype['authorizationCode'] = undefined;

/**
 * Determines whether the transaction was authorized. 
 * @member {Boolean} authorized
 */
Transaction.prototype['authorized'] = undefined;

/**
 * Unique identifier of the authorization document record in the MP's CMS database. 
 * @member {Number} authorizationId
 */
Transaction.prototype['authorizationId'] = undefined;

/**
 * Amount which contract is debited/credited for, not including fee amount.  The field can contain values up to 4 decimal places. A dot is used as a decimal separator. 
 * @member {Number} baseAmount
 */
Transaction.prototype['baseAmount'] = undefined;

/**
 * List of `TransactionCustomData`. 
 * @member {Array.<module:model/TransactionCustomData>} customTransactionData
 */
Transaction.prototype['customTransactionData'] = undefined;

/**
 * Custom Transaction Condition Code. 
 * @member {String} customTransactionCondition
 */
Transaction.prototype['customTransactionCondition'] = undefined;

/**
 * Custom transaction type code. 
 * @member {String} customTransactionTypeCode
 */
Transaction.prototype['customTransactionTypeCode'] = undefined;

/**
 * Fee amount for which the contract is debited for, associated with the transaction.  The field can contain values up to 4 decimal places. A dot is used as a decimal separator. 
 * @member {Number} feeAmount
 */
Transaction.prototype['feeAmount'] = undefined;

/**
 * Description of fees included in the total `feeAmount`. Final format of the field depends on the product setup. Typical presentation format: [`feeCode` `feeAmount` `feeCurrency`], [`feeCode` `feeAmount` `feeCurrency`] 
 * @member {String} feeDescription
 */
Transaction.prototype['feeDescription'] = undefined;

/**
 * Unique identifier of the financial document record in the MP's CMS database. 
 * @member {Number} financialDocumentId
 */
Transaction.prototype['financialDocumentId'] = undefined;

/**
 * Description of FX Rates used in the transaction. It shows details related to currency conversion applied during the transaction posting. The format varies on several factors, first of all, whether this is a cross-rate or not.   * In case of '1 step conversion (direct)':     [<FX rate type>:] <FX rate> (<From currency> -> <To currency>)   * For '2-step conversion (via intermediate currency)':     [<FX rate type>:] <FX rate1> (<From currency1> -> <To currency1>); <FX rate2> (<From currency2> -> <To currency3>)   * In case of cross-rate ('2-steps conversion (with no intermediate currency)'):     [<FX rate type>:] <FX rate> (<From currency> -> <To currency>) (cross rate)  Examples:   * 0.8 (USD -> EUR)   * PS Rate: 0.801 (EUR -> GBP)   * PS Rate: 0.8009 (EUR -> GBP)   * PS Rate: 0.832468 (USD -> EUR); 1.5 (EUR -> GBP) 
 * @member {String} fxRate
 */
Transaction.prototype['fxRate'] = undefined;

/**
 * Installment chain identifier. 
 * @member {Number} installmentChainId
 */
Transaction.prototype['installmentChainId'] = undefined;

/**
 * Status of installment plan.  | **Possible values**   | |---------------------- | | Waiting               | | Inactive              | | Preview               | | Preview Closed        | | Open                  | | Partially Paid        | | Overdue               | | Paid                  | | Closed                | | Written Off           | | Revised               | | Waived                | | Not Ready             | | Moved                 | | Rejected              | | Simulated             | | External              | | Corrected             | | Outstanding           | | Complete Outstanding  | 
 * @member {String} installmentPlanStatus
 */
Transaction.prototype['installmentPlanStatus'] = undefined;

/**
 * Merchant category code according to Visa rules (Merchant Category Code, MCC) or Mastercard rules (Standard Industry Code, SIC).  MCC consists of four digits and it's listed in ISO 18245 for retail financial services. Merchant Category Code (MCC) is used to classify merchants in types (i.e. one MCC is for hotels, one for automated fuel dispensers) or more specifically by merchant name (i.e. car rentals or airlines). 
 * @member {String} mcc
 */
Transaction.prototype['mcc'] = undefined;

/**
 * Merchant category description according to Visa rules (Merchant Category Code, MCC) or MasterCard rules (Standard Industry Code, SIC). 
 * @member {String} mccDescription
 */
Transaction.prototype['mccDescription'] = undefined;

/**
 * Three-letter country code (format according to ISO-3166, alpha-3 specification). 
 * @member {String} merchantCountry
 */
Transaction.prototype['merchantCountry'] = undefined;

/**
 * Terminal city, in other case value is null. 
 * @member {String} merchantLocation
 */
Transaction.prototype['merchantLocation'] = undefined;

/**
 * Name of the retail outlet where the transaction was performed. 
 * @member {String} merchantName
 */
Transaction.prototype['merchantName'] = undefined;

/**
 * For authorization documents - authorization request processing date, for financial documents - macrotransaction processing date (YYYY-MM-DD format). 
 * @member {Date} postingDate
 */
Transaction.prototype['postingDate'] = undefined;

/**
 * Response code, which, together with posting status field value, shows the transaction posting results.   ------------------------------------------------------------- | `responseCode`        | `responseCodeDescription`           | |-----------------------|-------------------------------------| | 0   | Successfully completed | 1   | Refer to card issuer | 2   | Refer to card issuer's special condition | 3   |  Invalid merchant / source | 4   |  PICK UP | 5   |  Do not Honour | 6   |  Error | 7   |  Pick-up card, special condition | 8   |  Honour with identification | 9   |  Request in progress | 10  |  Approved for partial amount | 11  |  Approved (VIP)12  Invalid transaction | 13  |  Invalid amount | 14  |  No such card | 15  |  No such issuer | 16  |  Approved, update track 3 | 17  |  Customer cancellation | 18  |  Customer dispute | 19  |  Re-enter transaction | 20  |  Invalid response | 21  |  No action taken | 22  |  Suspected malfunction | 23  |  Unacceptable transaction fee | 24  |  File update not supported by receiver | 25  |  No such record | 26  |  Duplicate record update, old record replaced | 27  |  File update field edit error | 28  |  File locked out while update | 29  |  File update error, contact acquirer | 30  |  Format error | 31  |  Issuer signed-off | 32  |  Completed partially | 33  |  Pick-up, expired card | 34  |  Suspect Fraud | 35  |  Pick-up, card acceptor contact acquirer | 36  |  Pick up, card restricted | 37  |  Pick up, call acquirer security | 38  |  Pick up, Allowable PIN tries exceeded | 39  |  No credit account | 40  |  Requested function not supported | 41  |  Pick up, lost card | 42  |  No universal account | 43  |  Pick up, stolen card | 44  |  No investment account | 45  |  Reserved for ISO use | 46  |  Contract closed | 47  |  Reserved for ISO use | 48  |  Reserved for ISO use | 49  |  Reserved for ISO use | 50  |  Do not renew | 51  |  Not sufficient funds | 52  |  No cheque account | 53  |  No savings account54  Expired card / target | 55  |  Incorrect PIN | 56  |  No card record | 57  |  Transaction not permitted to cardholder | 58  |  Transaction not permitted to terminal | 59  |  Suspected fraud | 60  |  Card acceptor contact acquirer | 61  |  Exceeds withdrawal amount limit | 62  |  Restricted card | 63  |  Security violation | 64  |  Wrong original amount | 65  |  Exceeds withdrawal frequency limit | 66  |  Call acquirers security department | 67  |  Card to be picked up at ATM | 68  |  Response received too late | 69  |  Reserved | 70  |  Invalid transaction; contact card issuer | 71  |  Decline PIN not changed | 72  |  Reserved | 73  |  Reserved | 74  |  Reserved | 75  |  Allowable number of PIN tries exceeded | 76  |  Wrong PIN, number of PIN tries exceeded | 77  |  Wrong Reference No. | 78  |  Record Not Found | 79  |  Already reversed | 80  |  Network error | 81  |  Foreign network error / PIN cryptographic error | 82  |  Time-out at issuer system / Bad CVV (VISA) | 83  |  Transaction failed | 84  |  Pre-authorization timed out | 85  |  No reason to decline | 86  |  Unable to validate PIN | 87  |  Purchase Approval Only | 88  |  Cryptographic failure | 89  |  Authentication failure | 90  |  Cutoff is in progress | 91  |  Issuer or switch is inoperative | 92  |  Unable to route at acquirer module | 93  |  Cannot be completed, violation of law | 94  |  Duplicate Transmission | 95  |  Reconcile error / Auth Not found | 96  |  System Malfunction | 97  |  Reserved | 98  |  Reserved | 99  |  Reserved | 101  |  Chain not found | 102  |  Incorrect Chain | 103  |  Multiple Adjustment | 111  |  Card BIN not on file | 112  |  Card type not in service for this device | 113  |  Invalid operation for this card | 115  |  Requested function not supported | 117  |  Suspicious Transaction | 119  |  Card BIN not in service for this device | 120  |  Card not in service for this device | 121  |  Repeat | 122  |  Previous doc not found | 123  |  Invalid reversal amount | 124  |  Capture period expired | 125  |  Invalid capture amount | 126  |  Invalid PIN block format | 128  |  No communication keys available for use | 129  |  Operation key buffer error | 130  |  Invalid Terminal ID | 131  |  Wrong Transaction Attributes | 132  |  Unmatched Transaction Condition | 133  |  The transaction has already been reversed | 140  |  Field 39 in response is absent | 141  |  Unexpected Field 39 received | 142  |  Destination Channel has deceased | 143  |  Check request declined by Billing Channel | 144  |  Payment request declined by Billing Channel | 145  |  Credit authorization declined | 146  |  Card not In service for international transfers | 147  |  Transaction declined by Terminal | 148  |  Tokenization is unavailable for card | 149  |  Invalid Resolution Method ID | 160  |  Device Hardware/Software Error | 161  |  Wrong device status | 162  |  Unknown status message | 163  |  HSM Response error | 164  |  Command rejected by device | 165  |  Authorization System malfunction | 166  |  Command aborted | 167  |  ISO Log Insert Error | 168  |  Field Mapper internal Error | 169  |  Limit not setup | 170  |  Message Authentication Key not defined | 171  |  Message Authentication Field Missing | 172  |  MAC verification Error | 173  |  MAC Generation error | 174  |  Security Hardware/Software error | 175  |  Security Module Channel Timeout | 176  |  Link is inactive. Device is not connected | 177  |  Device is not in transaction | 178  |  Device is already in transaction | 179  |  Device response timed out | 180  |  Amount is too small. Dispense not possible | 181  |  Amount is too big. Dispense not possible | 182  |  Amount has cent's | 183  |  Dispense not possible | 185  |  Invalid authorization amount | 188  |  The Cardholder has not taken MONEY | 189  |  Non working time for this device | 190  |  Device not configured or not valid | 191  |  Device contract not valid | 192  |  Device not on file | 193  |  Requested operation not on file for this device | 194  |  Operation is disabled for this device | 195  |  Currency is not available for device | 196  |  Internal System Malfunction | 198  |  Track 2 Format Error | 199  |  PIN Block Conversion Error | 200  |  The Cardholder has not taken his Card | 201  |  Device is connected to another controller | 203  |  Source contract expired | 214  |  Merchant card is not on file | 240  |  Instalments not supported | 241  |  Over than maximum supported amount for instalments | 242  |  Less than minimum supported amount for instalments | 243  |  Over maximum supported instalments | 244  |  Below minimum supported instalments | 245  |  Over maximum gratuity months | 246  |  Below minimum gratuity months | 247  |  Recurring not available | 248  |  Invalid Recurring parameters | 249  |  Unsupported Recurring operation | 254  |  Merchant card expired | 257  |  Merchant card contract has not been approved | 258  |  Device contract is not on file | 261  |  Device amount limits exceeded | 262  |  Rejected Some Documents in this Batch | 263  |  Wrong Invoice Party | 265  |  Device frequency limits exceeded | 270  |  CAT transaction is not compatible with MCC 6011 | 271  |  Transaction attributes for chip card are present but Service Code not belongs to Integrated Circuit Card | 361  |  Merchant card amount limits exceeded | 365  |  Merchant card frequency limits exceeded | 405  |  Strong Customer Authentication Required | 457  |  CashBack disabled | 461  |  Exceeds CashBack amount limit ------------------------------------------------------------------- 
 * @member {Number} responseCode
 */
Transaction.prototype['responseCode'] = undefined;

/**
 * Description of the transaction response code. 
 * @member {String} responseCodeDescription
 */
Transaction.prototype['responseCodeDescription'] = undefined;

/**
 * 12-digit Retrieval Reference Number. 
 * @member {String} rrn
 */
Transaction.prototype['rrn'] = undefined;

/**
 * Transaction type classifier code, determines the way documents or macrotransactions are processed.  | **Possible values**  |       **Description**       | |:-------------------: |:--------------------------: | | T                    |  Transaction                | | M                    |  Fee                        | | I                    |  Interests                  | | U                    |  Upper Normalization        | | L                    |  Lower Normalization        | | D                    |  Due Normalization          | | A                    |  Account Transfer           | | C                    |  Credit Limit               | | R                    |  Rev/Exp                    | | B                    |  Balance Inquiry            | | S                    |  Online Statement           | | E                    |  End Cycle                  | | i                    |  Interest Fee               | | P                    |  Online Payment             | | p                    |  External Payment           | | d                    |  Due Special                | | u                    |  Upper Limit Special        | | r                    |  Reserve for Bad Debts      | | l                    |  Lower Limit Special        | | c                    |  Additional Credit Limit    | | X                    |  Additional Online Service  | | +                    |  Top Up                    | | V                    |  Verification               | 
 * @member {String} serviceClassCode
 */
Transaction.prototype['serviceClassCode'] = undefined;

/**
 * Settlement Amount: - for transactions from Payment Scheme contains amount which Payment Scheme sent to debit/credit card for; - for on-us transactions contains the amount which the CMS is debiting/crediting on the contract; - for internal transactions (like due normalizations or interest accruals) has the same value as the transaction amount.  The field can contain values up to 4 decimal places. A dot is used as a decimal separator. 
 * @member {Number} settlementAmount
 */
Transaction.prototype['settlementAmount'] = undefined;

/**
 * Settlement currency (format according to ISO 4217, alphanumeric code). 
 * @member {String} settlementCurrency
 */
Transaction.prototype['settlementCurrency'] = undefined;

/**
 * Settlement currency (format according to ISO 4217, numeric code). 
 * @member {String} settlementCurrencyNumericCode
 */
Transaction.prototype['settlementCurrencyNumericCode'] = undefined;

/**
 * Contract identifier (for an account contract or a card contract) generated on the Issuer's side and passed to the MP's CMS in the contract creation request. (`POST /accounts` or `POST /cards`). 
 * @member {String} sourceContractCbsNumber
 */
Transaction.prototype['sourceContractCbsNumber'] = undefined;

/**
 * Source contract identifier. Contract record ID from MP's CMS database. 
 * @member {Number} sourceContractId
 */
Transaction.prototype['sourceContractId'] = undefined;

/**
 * Contract number of the source side (source contract).  * For account contract - value unmasked. * For card contract - value can be   * unmasked - full PAN visible   * masked - full PAN masked according to defined mask (mask pattern is agreed with Issuer and configured in the MP API)  In case of transaction done by card at POS field contains the terminal id. 
 * @member {String} sourceContractNumber
 */
Transaction.prototype['sourceContractNumber'] = undefined;

/**
 * Source Registration Number. 
 * @member {String} srn
 */
Transaction.prototype['srn'] = undefined;

/**
 * Contract identifier (for an account contract or a card contract) generated on the Issuer's side and passed to the MP's CMS in the contract creation request. (`POST /accounts` or `POST /cards`). 
 * @member {String} targetContractCbsNumber
 */
Transaction.prototype['targetContractCbsNumber'] = undefined;

/**
 * Target contract identifier. Contract record ID from MP's CMS database. 
 * @member {Number} targetContractId
 */
Transaction.prototype['targetContractId'] = undefined;

/**
 * Contract number of the target side (target contract).  * For account contract - value unmasked. * For card contract - value can be   * unmasked - full PAN visible   * masked - full PAN masked according to defined mask (mask pattern is agreed with Issuer and configured in the MP API) 
 * @member {String} targetContractNumber
 */
Transaction.prototype['targetContractNumber'] = undefined;

/**
 * Masked token number. 
 * @member {String} tokenNumberSafe
 */
Transaction.prototype['tokenNumberSafe'] = undefined;

/**
 * Transaction amount.  The field can contain values up to 4 decimal places. A dot is used as a decimal separator. 
 * @member {Number} transactionAmount
 */
Transaction.prototype['transactionAmount'] = undefined;

/**
 * Transaction currency (format according to ISO 4217, alphanumeric code). 
 * @member {String} transactionCurrency
 */
Transaction.prototype['transactionCurrency'] = undefined;

/**
 * Transaction currency (format according to ISO 4217, numeric code). 
 * @member {String} transactionCurrencyNumericCode
 */
Transaction.prototype['transactionCurrencyNumericCode'] = undefined;

/**
 * Transaction date. Timestamp (format: YYYY-MM-DDThh:mm:ssZ). 
 * @member {Date} transactionDate
 */
Transaction.prototype['transactionDate'] = undefined;

/**
 * Description of the transaction from the CMS system. 
 * @member {String} transactionDescription
 */
Transaction.prototype['transactionDescription'] = undefined;

/**
 * Unique identifier of the document record in the CMS database. 
 * @member {Number} transactionId
 */
Transaction.prototype['transactionId'] = undefined;

/**
 * Transaction status. May contains the following values:  | **Possible values**     | **Description**                                                      | |------------------------ |--------------------------------------------------------------------- | | Funds blocked           | Funds were blocked as a result of the authorization                  | | Authorisation reversed  | Funds were unblocked as a result of a reverse authorization          | | Authorisation expired   | Funds were unblocked as financial documents have not been processed  | | Processed               | The document has been successfully posted                            | | Reversed                | Reversal document was successfully posted                            |  In case of an unsuccessful transaction, field will contain `responseCodeDescription`. 
 * @member {String} transactionStatus
 */
Transaction.prototype['transactionStatus'] = undefined;

/**
 * Transaction type. 
 * @member {String} transactionType
 */
Transaction.prototype['transactionType'] = undefined;

/**
 * Transaction type code. The value which can be used for filtering of transactions provided on the input filter.  Transactions originated from the Banknet | `transactionTypeCode`  | `transactionType`                      | |:---------------------: |--------------------------------------- | | 0512                   | Retail with CashBack                   | | 0513 1                 | CH Debit                               | | 0515                   | Retail                                 | | 0518                   | Unique                                 | | 0522                   | CashBack 2Prs                          | | 0523 1                 | CH Debit 2Prs                          | | 0525                   | Retail 2Prs                            | | 0528                   | Unique 2Prs                            | | 0614 2                 | CH Payment                             | | 0616                   | Refund                                 | | 0624 2                 | CH Payment 2Prs                        | | 0626                   | Credit 2Prs                            | | 0717                   | Cash Advance                           | | 0719                   | ATM Cash Withdrawal                    | | 0727                   | Cash 2Prs                              | | 0729                   | ATM Cash withdrawal - 2nd presentment  |  Transactions originated from the Issuer in the standard product | `transactionTypeCode`  | `transactionType`              | **Product applicability**  | |----------------------- |------------------------------- |--------------------------- | | APSF                   | Paper statement fee            | Credit                     | | BT1                    | Balance Transfer               | Credit                     | | FP                     | Fee posting                    | Credit                     | | I_TPC                  | PBB Transfer posting - credit  | Credit, Prepaid            | | I_TPD                  | PBB Transfer posting - debit   | Credit, Prepaid            | | PT_1                   | Payment To Client Contract     | Credit                     | | TP                     | Prepaid Top-Up                 | Prepaid                    | | TPC_1                  | Transaction posting - credit   | Credit, Prepaid            | | TPD                    | Transaction posting - debit    | Credit                     |  Fees originated from the CMS in the standard product | `transactionTypeCode`  | `transactionType`                      | **Product applicability**  | |----------------------- |--------------------------------------- |--------------------------- | | A1F                    | ATM Fee                                | Prepaid                    | | AFM_1                  | BCC CA Annual Fee Main Card            | Prepaid                    | | AUCF                   | Urgent card fee                        | Credit, Prepaid            | | C1F                    | Cash Fee                               | Prepaid                    | | CF1                    | Country Fee                            | Prepaid                    | | FXF                    | Foreign exchange (FX) fee              | Credit                     | | INFC                   | Insurance Fixed Card                   | Credit                     | | INFS                   | Insurance Fixed Single                 | Credit, Prepaid            | | INFSC                  | Insurance Fixed Single Card            | Credit                     | | INP                    | Insurance Percentage                   | Credit                     | | IPP                    | BCC Insurance fee: Payment Protection  | Credit, Prepaid            | | JFA                    | Joining fee                            | Prepaid                    | | LC                     | New Lost Card for PIN Set              | Prepaid                    | | LPF                    | BCC Late Payment Fee                   | Credit                     | | M;                     | New Card for PIN Set                   | Prepaid                    | | M0                     | Plastic Renew Expired                  | Prepaid                    | | M19                    | Plastic Renew Misc (no Prod)           | Credit                     | | M8                     | Plastic Renew Misc                     | Prepaid                    | | MA_1                   | Balance Inquiry Fee                    | Prepaid                    | | MF_1                   | BCC Card Fee Billing                   | Prepaid                    | | MFM                    | Misc Fee Manual                        | Prepaid                    | | MR                     | Replaced Card for PIN Set (no Prod)    | Credit                     | | OVLF                   | OVL Fee                                | Credit                     | | PFMCC                  | Retail Fee based on MC                 | Prepaid                    | | PZ                     | PIN Change Fee                         | Prepaid                    | | RWCBTF                 | Retail with CB Transaction Fee         | Credit                     | | TPF                    | Top-up fee                             | Prepaid                    | | VCP                    | New Card for PIN Set (no Prod)         | Credit                     |  Interests originated from the CMS in the standard credit product | `transactionTypeCode`  | `transactionType`                  | |----------------------- |----------------------------------- | | ILBT3                  | Overdue cash interest              | | ILBT5                  | Overdue balance transfer interest  | | ILC3                   | Balance transfer interest          | | ILC5                   | Overdue retail interest            | | ILR3                   | Retail interest                    | | ILR5                   | Cash interest                      | 
 * @member {String} transactionTypeCode
 */
Transaction.prototype['transactionTypeCode'] = undefined;

/**
 * Wallet identifier.   | **Sample values**   | **Description**                                                                                   |  |-------------------  |-------------------------------------------------------------------------------------------------- |  | 103                 | Apple Pay                                                                                         |  | 216                 | Android Pay                                                                                       |  | 217                 | Samsung Pay                                                                                       |  | 327                 | Remote Commerce Programs (e.g. MDES for Merchants, Mastercard Secure Card on File, Click to Pay)  |  | 337                 | Garmin Pay                                                                                        |   Other values possible. 
 * @member {String} walletId
 */
Transaction.prototype['walletId'] = undefined;






export default Transaction;

