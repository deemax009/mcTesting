/**
 * Mastercard Processing Core API
 * OpenAPI Specification for MP (Mastercard Processing) **Core**.  This documentation describes what functionalities are exposed by the MP's CMS (Card Management System) and are available to be used by the Issuer. The Issuer is the primary actor who executes the operations. Whenever the Issuer wishes to onboard its customers to the card program, they may use API to:  * create and manage **client**  * create and manage **contracts**, there are two types of contracts in the MP's CMS:    * **account contract**    * **card contract**  Later, during the card lifecycle, the Issuer can also manage other objects related to the client and the contract (account or card):  * manage **card plastic**  * create, manage and retrieve **additional addresses** (for the client and the contract)  * manage and retrieve **classifiers** (for the client and the contract)  * manage and retrieve **custom data** (for the client and the contract)  * manage and retrieve **parameters** (for the contract)  * set or retrieve **service limit tariff** (for the contract)  * post or retrieve **transactions** (for the contract)  * manage and retrieve **usage limits** (for the contract)  *** API uses RESTful protocol via HTTP to execute POST, PUT, GET and PATCH operations sent to given endpoints, e.g. `/clients`.  API uses JSON Web Encryption compact serialization for payload encryption for all API operations. *** External documentation:   * [ISO 4217 - Currency Codes](https://www.iso.org/iso-4217-currency-codes.html)   * [ISO 3166 - Country Codes](https://www.iso.org/iso-3166-country-codes.html)   * [Internet Engineering Task Force (IETF) BCP 47 standard](https://tools.ietf.org/html/bcp47#appendix-A)   * [JSON Web Encryption](https://developer.mastercard.com/platform/documentation/security-and-authentication/securing-sensitive-data-using-payload-encryption/#jwe-encryption)   * [Internet Engineering Task Force (IETF) RFC7232](https://datatracker.ietf.org/doc/html/rfc7232)   * [JSON Merge Patch](https://datatracker.ietf.org/doc/html/rfc7386) *** 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Plastic model module.
 * @module model/Plastic
 * @version 1.0.0
 */
class Plastic {
    /**
     * Constructs a new <code>Plastic</code>.
     * @alias module:model/Plastic
     * @param cardContractId {Number} Unique technical card contract identifier generated by the MP's CMS. The identifier is generated when card contract creation finishes successfully and is returned in a card contract creation response (`POST /cards`). 
     * @param cardContractNumber {String} The card contract number represents a Primary Account Number (PAN). A PAN usually consists of 16 digits:   * The first six digits are the Bank Identification Number (BIN): a unique number within the payment organization (Mastercard, VISA)   * The following nine digits are the contract identification number, which can be generated randomly   * The last digit is a Luhn check digit.  The card contract number can be returned:   * unmasked - with a full PAN visible   * masked - with a full PAN masked according to the defined mask (a mask pattern is agreed with the Issuer and configured in the MP API) 
     * @param plasticId {Number} Technical identifier of a card plastic record in the MP's CMS. 
     * @param sequenceNumber {String} The sequence number of a `Plastic`, created under the given card contract. Every new `Plastic` created has the next number in a sequence following previous card plastics. 
     * @param status {String} Card status determines whether transactions may be performed with the card.  | **Possible values**  | **Description**                                                                                                                    | |--------------------- |----------------------------------------------------------------------------------------------------------------------------------- | | Active               | The card is active and may be used to perform transactions                                                                         | | Inactive             | The card has been marked                                                                                                           | | Closed               | Status of an old card after a new card is issued; transactions with the old card may be performed until the new card is activated  | | Locked               | The card is locked; this corresponds to an issued but not activated card                                                           | | Rejected             | An error occurred at the data preparation and personalization step                                                                 | | From File            | The request to reissue the card (received via batch file) is being processed by the MP's CMS                                       | | Locked for Online    |                                                                                                                                    | | Deferred             |                                                                                                                                    | 
     */
    constructor(cardContractId, cardContractNumber, plasticId, sequenceNumber, status) { 
        
        Plastic.initialize(this, cardContractId, cardContractNumber, plasticId, sequenceNumber, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, cardContractId, cardContractNumber, plasticId, sequenceNumber, status) { 
        obj['cardContractId'] = cardContractId;
        obj['cardContractNumber'] = cardContractNumber;
        obj['plasticId'] = plasticId;
        obj['sequenceNumber'] = sequenceNumber;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>Plastic</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Plastic} obj Optional instance to populate.
     * @return {module:model/Plastic} The populated <code>Plastic</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Plastic();

            if (data.hasOwnProperty('cardContractId')) {
                obj['cardContractId'] = ApiClient.convertToType(data['cardContractId'], 'Number');
            }
            if (data.hasOwnProperty('cardContractNumber')) {
                obj['cardContractNumber'] = ApiClient.convertToType(data['cardContractNumber'], 'String');
            }
            if (data.hasOwnProperty('cardExpiryDate')) {
                obj['cardExpiryDate'] = ApiClient.convertToType(data['cardExpiryDate'], 'String');
            }
            if (data.hasOwnProperty('chipScheme')) {
                obj['chipScheme'] = ApiClient.convertToType(data['chipScheme'], 'String');
            }
            if (data.hasOwnProperty('companyName')) {
                obj['companyName'] = ApiClient.convertToType(data['companyName'], 'String');
            }
            if (data.hasOwnProperty('effectiveDate')) {
                obj['effectiveDate'] = ApiClient.convertToType(data['effectiveDate'], 'Date');
            }
            if (data.hasOwnProperty('embossedName')) {
                obj['embossedName'] = ApiClient.convertToType(data['embossedName'], 'String');
            }
            if (data.hasOwnProperty('orderSource')) {
                obj['orderSource'] = ApiClient.convertToType(data['orderSource'], 'String');
            }
            if (data.hasOwnProperty('orderTarget')) {
                obj['orderTarget'] = ApiClient.convertToType(data['orderTarget'], 'String');
            }
            if (data.hasOwnProperty('personalizationFileName')) {
                obj['personalizationFileName'] = ApiClient.convertToType(data['personalizationFileName'], 'String');
            }
            if (data.hasOwnProperty('plasticId')) {
                obj['plasticId'] = ApiClient.convertToType(data['plasticId'], 'Number');
            }
            if (data.hasOwnProperty('productionCode')) {
                obj['productionCode'] = ApiClient.convertToType(data['productionCode'], 'String');
            }
            if (data.hasOwnProperty('productionDate')) {
                obj['productionDate'] = ApiClient.convertToType(data['productionDate'], 'Date');
            }
            if (data.hasOwnProperty('productionEvent')) {
                obj['productionEvent'] = ApiClient.convertToType(data['productionEvent'], 'String');
            }
            if (data.hasOwnProperty('productionReason')) {
                obj['productionReason'] = ApiClient.convertToType(data['productionReason'], 'String');
            }
            if (data.hasOwnProperty('productionType')) {
                obj['productionType'] = ApiClient.convertToType(data['productionType'], 'String');
            }
            if (data.hasOwnProperty('sequenceNumber')) {
                obj['sequenceNumber'] = ApiClient.convertToType(data['sequenceNumber'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Plastic</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Plastic</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Plastic.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['cardContractNumber'] && !(typeof data['cardContractNumber'] === 'string' || data['cardContractNumber'] instanceof String)) {
            throw new Error("Expected the field `cardContractNumber` to be a primitive type in the JSON string but got " + data['cardContractNumber']);
        }
        // ensure the json data is a string
        if (data['cardExpiryDate'] && !(typeof data['cardExpiryDate'] === 'string' || data['cardExpiryDate'] instanceof String)) {
            throw new Error("Expected the field `cardExpiryDate` to be a primitive type in the JSON string but got " + data['cardExpiryDate']);
        }
        // ensure the json data is a string
        if (data['chipScheme'] && !(typeof data['chipScheme'] === 'string' || data['chipScheme'] instanceof String)) {
            throw new Error("Expected the field `chipScheme` to be a primitive type in the JSON string but got " + data['chipScheme']);
        }
        // ensure the json data is a string
        if (data['companyName'] && !(typeof data['companyName'] === 'string' || data['companyName'] instanceof String)) {
            throw new Error("Expected the field `companyName` to be a primitive type in the JSON string but got " + data['companyName']);
        }
        // ensure the json data is a string
        if (data['embossedName'] && !(typeof data['embossedName'] === 'string' || data['embossedName'] instanceof String)) {
            throw new Error("Expected the field `embossedName` to be a primitive type in the JSON string but got " + data['embossedName']);
        }
        // ensure the json data is a string
        if (data['orderSource'] && !(typeof data['orderSource'] === 'string' || data['orderSource'] instanceof String)) {
            throw new Error("Expected the field `orderSource` to be a primitive type in the JSON string but got " + data['orderSource']);
        }
        // ensure the json data is a string
        if (data['orderTarget'] && !(typeof data['orderTarget'] === 'string' || data['orderTarget'] instanceof String)) {
            throw new Error("Expected the field `orderTarget` to be a primitive type in the JSON string but got " + data['orderTarget']);
        }
        // ensure the json data is a string
        if (data['personalizationFileName'] && !(typeof data['personalizationFileName'] === 'string' || data['personalizationFileName'] instanceof String)) {
            throw new Error("Expected the field `personalizationFileName` to be a primitive type in the JSON string but got " + data['personalizationFileName']);
        }
        // ensure the json data is a string
        if (data['productionCode'] && !(typeof data['productionCode'] === 'string' || data['productionCode'] instanceof String)) {
            throw new Error("Expected the field `productionCode` to be a primitive type in the JSON string but got " + data['productionCode']);
        }
        // ensure the json data is a string
        if (data['productionEvent'] && !(typeof data['productionEvent'] === 'string' || data['productionEvent'] instanceof String)) {
            throw new Error("Expected the field `productionEvent` to be a primitive type in the JSON string but got " + data['productionEvent']);
        }
        // ensure the json data is a string
        if (data['productionReason'] && !(typeof data['productionReason'] === 'string' || data['productionReason'] instanceof String)) {
            throw new Error("Expected the field `productionReason` to be a primitive type in the JSON string but got " + data['productionReason']);
        }
        // ensure the json data is a string
        if (data['productionType'] && !(typeof data['productionType'] === 'string' || data['productionType'] instanceof String)) {
            throw new Error("Expected the field `productionType` to be a primitive type in the JSON string but got " + data['productionType']);
        }
        // ensure the json data is a string
        if (data['sequenceNumber'] && !(typeof data['sequenceNumber'] === 'string' || data['sequenceNumber'] instanceof String)) {
            throw new Error("Expected the field `sequenceNumber` to be a primitive type in the JSON string but got " + data['sequenceNumber']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}

Plastic.RequiredProperties = ["cardContractId", "cardContractNumber", "plasticId", "sequenceNumber", "status"];

/**
 * Unique technical card contract identifier generated by the MP's CMS. The identifier is generated when card contract creation finishes successfully and is returned in a card contract creation response (`POST /cards`). 
 * @member {Number} cardContractId
 */
Plastic.prototype['cardContractId'] = undefined;

/**
 * The card contract number represents a Primary Account Number (PAN). A PAN usually consists of 16 digits:   * The first six digits are the Bank Identification Number (BIN): a unique number within the payment organization (Mastercard, VISA)   * The following nine digits are the contract identification number, which can be generated randomly   * The last digit is a Luhn check digit.  The card contract number can be returned:   * unmasked - with a full PAN visible   * masked - with a full PAN masked according to the defined mask (a mask pattern is agreed with the Issuer and configured in the MP API) 
 * @member {String} cardContractNumber
 */
Plastic.prototype['cardContractNumber'] = undefined;

/**
 * Card expiry date (YYMM format). 
 * @member {String} cardExpiryDate
 */
Plastic.prototype['cardExpiryDate'] = undefined;

/**
 * Name of a chip scheme used to create a physical card. For smart cards (cards with a chip), the chip scheme defines a set of transaction limiters saved in the chip memory during the card personalization (physical production). 
 * @member {String} chipScheme
 */
Plastic.prototype['chipScheme'] = undefined;

/**
 * Client company name (free text field). 
 * @member {String} companyName
 */
Plastic.prototype['companyName'] = undefined;

/**
 * Start date of a card's effective period (YYYY-MM-DD format). 
 * @member {Date} effectiveDate
 */
Plastic.prototype['effectiveDate'] = undefined;

/**
 * Value embossed on a physical card. 
 * @member {String} embossedName
 */
Plastic.prototype['embossedName'] = undefined;

/**
 * Issuer's office that sent the card production order. 
 * @member {String} orderSource
 */
Plastic.prototype['orderSource'] = undefined;

/**
 * Issuer's office to which the issued card and a PIN mailer will be sent. 
 * @member {String} orderTarget
 */
Plastic.prototype['orderTarget'] = undefined;

/**
 * The name of a personalization file (a file sent to the personalization bureau).  Personalization files are generated by the MP. The process of file generation is executed by the MP several times per day, according to a defined schedule. All created cards marked for production are processed and placed in a personalization file. 
 * @member {String} personalizationFileName
 */
Plastic.prototype['personalizationFileName'] = undefined;

/**
 * Technical identifier of a card plastic record in the MP's CMS. 
 * @member {Number} plasticId
 */
Plastic.prototype['plasticId'] = undefined;

/**
 * A code under which a card contract has been created.  Possible values in the default configuration of the MP's CMS:   * NWOPIN_NOPROD (new card)     * physical card - No     * PAN - New     * PIN - Not required     * Expiry date - Set by the MP or the Issuer    * NWOPIN (new card)     * physical card - Yes     * PAN - New     * PIN - New     * Expiry date - Set by the MP or the Issuer    * RPLRE (duplicate card plastic)     * physical card - Yes     * PAN - Same     * PIN - Same     * Expiry date - Set by the MP or the Issuer    * RALLRE (duplicate card plastic)     * physical card - Yes     * PAN - Same     * PIN - New random PIN generated by the MP     * Expiry date - Set by the MP or the Issuer    * RPL (renew)     * physical card - Yes     * PAN - Same     * PIN - Same     * Expiry date - Set by the MP or the Issuer    * RPLRE_NOPROD (renew)     * physical card - No     * PAN - Same     * PIN - Not required     * Expiry date - Set by the MP or the Issuer    * NLOSTWOPIN (replacement)     * physical card - Yes     * PAN - New     * PIN - New     * Expiry date - Set by the MP or the Issuer    * RWOPIN_NOPROD (replacement)     * physical card - No     * PAN - New     * PIN - Not required     * Expiry date - Set by the MP or the Issuer 
 * @member {String} productionCode
 */
Plastic.prototype['productionCode'] = undefined;

/**
 * Date of generating a card plastic personalization file (YYYY-MM-DD format). 
 * @member {Date} productionDate
 */
Plastic.prototype['productionDate'] = undefined;

/**
 * | **Possible values**  | |--------------------- | | Produce Card         | | Replace Card         | 
 * @member {String} productionEvent
 */
Plastic.prototype['productionEvent'] = undefined;

/**
 * Free text describing `productionCode`.
 * @member {String} productionReason
 */
Plastic.prototype['productionReason'] = undefined;

/**
 * Card issuing method.  | **Possible values**  | **Description**                                                                                                                     | |--------------------- |------------------------------------------------------------------------------------------------------------------------------------ | | Replace All          | A new card will be issued and a PIN mailer will be printed, e.g. when a new card is issued or a stolen card is replaced.            | | Replace Plastic      | Only a card will be issued, e.g. to replace an expired card.                                                                        | | Reorder PIN          | A new PIN will be issued.                                                                                                           | | Replace CVV          | A card with a new CVV value will be issued.                                                                                         | | Replace PIN          | The same PIN mailer will be printed again (this action is only allowed by a special agreement between the Issuer and the MP's CMS)  | | Replace Add Parms    | In the current system version, this production type is used to issue a PIN2.                                                        | | Replace Chip Data    | Calculation of encryption values for smart cards (no PIN code is generated and no PIN mailer is printed).                           | | REPRINT_PIN          | Obsolete.                                                                                                                           | 
 * @member {String} productionType
 */
Plastic.prototype['productionType'] = undefined;

/**
 * The sequence number of a `Plastic`, created under the given card contract. Every new `Plastic` created has the next number in a sequence following previous card plastics. 
 * @member {String} sequenceNumber
 */
Plastic.prototype['sequenceNumber'] = undefined;

/**
 * Card status determines whether transactions may be performed with the card.  | **Possible values**  | **Description**                                                                                                                    | |--------------------- |----------------------------------------------------------------------------------------------------------------------------------- | | Active               | The card is active and may be used to perform transactions                                                                         | | Inactive             | The card has been marked                                                                                                           | | Closed               | Status of an old card after a new card is issued; transactions with the old card may be performed until the new card is activated  | | Locked               | The card is locked; this corresponds to an issued but not activated card                                                           | | Rejected             | An error occurred at the data preparation and personalization step                                                                 | | From File            | The request to reissue the card (received via batch file) is being processed by the MP's CMS                                       | | Locked for Online    |                                                                                                                                    | | Deferred             |                                                                                                                                    | 
 * @member {String} status
 */
Plastic.prototype['status'] = undefined;






export default Plastic;

