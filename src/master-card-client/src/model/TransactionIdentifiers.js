/**
 * Mastercard Processing Core API
 * OpenAPI Specification for MP (Mastercard Processing) **Core**.  This documentation describes what functionalities are exposed by the MP's CMS (Card Management System) and are available to be used by the Issuer. The Issuer is the primary actor who executes the operations. Whenever the Issuer wishes to onboard its customers to the card program, they may use API to:  * create and manage **client**  * create and manage **contracts**, there are two types of contracts in the MP's CMS:    * **account contract**    * **card contract**  Later, during the card lifecycle, the Issuer can also manage other objects related to the client and the contract (account or card):  * manage **card plastic**  * create, manage and retrieve **additional addresses** (for the client and the contract)  * manage and retrieve **classifiers** (for the client and the contract)  * manage and retrieve **custom data** (for the client and the contract)  * manage and retrieve **parameters** (for the contract)  * set or retrieve **service limit tariff** (for the contract)  * post or retrieve **transactions** (for the contract)  * manage and retrieve **usage limits** (for the contract)  *** API uses RESTful protocol via HTTP to execute POST, PUT, GET and PATCH operations sent to given endpoints, e.g. `/clients`.  API uses JSON Web Encryption compact serialization for payload encryption for all API operations. *** External documentation:   * [ISO 4217 - Currency Codes](https://www.iso.org/iso-4217-currency-codes.html)   * [ISO 3166 - Country Codes](https://www.iso.org/iso-3166-country-codes.html)   * [Internet Engineering Task Force (IETF) BCP 47 standard](https://tools.ietf.org/html/bcp47#appendix-A)   * [JSON Web Encryption](https://developer.mastercard.com/platform/documentation/security-and-authentication/securing-sensitive-data-using-payload-encryption/#jwe-encryption)   * [Internet Engineering Task Force (IETF) RFC7232](https://datatracker.ietf.org/doc/html/rfc7232)   * [JSON Merge Patch](https://datatracker.ietf.org/doc/html/rfc7386) *** 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TransactionIdentifiers model module.
 * @module model/TransactionIdentifiers
 * @version 1.0.0
 */
class TransactionIdentifiers {
    /**
     * Constructs a new <code>TransactionIdentifiers</code>.
     * @alias module:model/TransactionIdentifiers
     */
    constructor() { 
        
        TransactionIdentifiers.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TransactionIdentifiers</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransactionIdentifiers} obj Optional instance to populate.
     * @return {module:model/TransactionIdentifiers} The populated <code>TransactionIdentifiers</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransactionIdentifiers();

            if (data.hasOwnProperty('arn')) {
                obj['arn'] = ApiClient.convertToType(data['arn'], 'String');
            }
            if (data.hasOwnProperty('authorizationCode')) {
                obj['authorizationCode'] = ApiClient.convertToType(data['authorizationCode'], 'String');
            }
            if (data.hasOwnProperty('originalTransactionDocumentId')) {
                obj['originalTransactionDocumentId'] = ApiClient.convertToType(data['originalTransactionDocumentId'], 'Number');
            }
            if (data.hasOwnProperty('previousTransactionDocumentId')) {
                obj['previousTransactionDocumentId'] = ApiClient.convertToType(data['previousTransactionDocumentId'], 'Number');
            }
            if (data.hasOwnProperty('paymentSchemeReferenceNumber')) {
                obj['paymentSchemeReferenceNumber'] = ApiClient.convertToType(data['paymentSchemeReferenceNumber'], 'String');
            }
            if (data.hasOwnProperty('rrn')) {
                obj['rrn'] = ApiClient.convertToType(data['rrn'], 'String');
            }
            if (data.hasOwnProperty('srn')) {
                obj['srn'] = ApiClient.convertToType(data['srn'], 'String');
            }
            if (data.hasOwnProperty('transactionId')) {
                obj['transactionId'] = ApiClient.convertToType(data['transactionId'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransactionIdentifiers</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransactionIdentifiers</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['arn'] && !(typeof data['arn'] === 'string' || data['arn'] instanceof String)) {
            throw new Error("Expected the field `arn` to be a primitive type in the JSON string but got " + data['arn']);
        }
        // ensure the json data is a string
        if (data['authorizationCode'] && !(typeof data['authorizationCode'] === 'string' || data['authorizationCode'] instanceof String)) {
            throw new Error("Expected the field `authorizationCode` to be a primitive type in the JSON string but got " + data['authorizationCode']);
        }
        // ensure the json data is a string
        if (data['paymentSchemeReferenceNumber'] && !(typeof data['paymentSchemeReferenceNumber'] === 'string' || data['paymentSchemeReferenceNumber'] instanceof String)) {
            throw new Error("Expected the field `paymentSchemeReferenceNumber` to be a primitive type in the JSON string but got " + data['paymentSchemeReferenceNumber']);
        }
        // ensure the json data is a string
        if (data['rrn'] && !(typeof data['rrn'] === 'string' || data['rrn'] instanceof String)) {
            throw new Error("Expected the field `rrn` to be a primitive type in the JSON string but got " + data['rrn']);
        }
        // ensure the json data is a string
        if (data['srn'] && !(typeof data['srn'] === 'string' || data['srn'] instanceof String)) {
            throw new Error("Expected the field `srn` to be a primitive type in the JSON string but got " + data['srn']);
        }

        return true;
    }


}



/**
 * ARN - Acquiring Reference Number. 
 * @member {String} arn
 */
TransactionIdentifiers.prototype['arn'] = undefined;

/**
 * Original authorization number which, in case of annulation or devolution transaction, allows identifying the original transaction. 
 * @member {String} authorizationCode
 */
TransactionIdentifiers.prototype['authorizationCode'] = undefined;

/**
 * Identifier of the original transaction document in a document chain. 
 * @member {Number} originalTransactionDocumentId
 */
TransactionIdentifiers.prototype['originalTransactionDocumentId'] = undefined;

/**
 * Identifier of the previous transaction document in a document chain. 
 * @member {Number} previousTransactionDocumentId
 */
TransactionIdentifiers.prototype['previousTransactionDocumentId'] = undefined;

/**
 * Payment scheme reference number. 
 * @member {String} paymentSchemeReferenceNumber
 */
TransactionIdentifiers.prototype['paymentSchemeReferenceNumber'] = undefined;

/**
 * 12-digit Retrieval Reference Number. 
 * @member {String} rrn
 */
TransactionIdentifiers.prototype['rrn'] = undefined;

/**
 * Source Registration Number. 
 * @member {String} srn
 */
TransactionIdentifiers.prototype['srn'] = undefined;

/**
 * Unique identifier of the document record in the CMS database. 
 * @member {Number} transactionId
 */
TransactionIdentifiers.prototype['transactionId'] = undefined;






export default TransactionIdentifiers;

