/**
 * Mastercard Processing Core API
 * OpenAPI Specification for MP (Mastercard Processing) **Core**.  This documentation describes what functionalities are exposed by the MP's CMS (Card Management System) and are available to be used by the Issuer. The Issuer is the primary actor who executes the operations. Whenever the Issuer wishes to onboard its customers to the card program, they may use API to:  * create and manage **client**  * create and manage **contracts**, there are two types of contracts in the MP's CMS:    * **account contract**    * **card contract**  Later, during the card lifecycle, the Issuer can also manage other objects related to the client and the contract (account or card):  * manage **card plastic**  * create, manage and retrieve **additional addresses** (for the client and the contract)  * manage and retrieve **classifiers** (for the client and the contract)  * manage and retrieve **custom data** (for the client and the contract)  * manage and retrieve **parameters** (for the contract)  * set or retrieve **service limit tariff** (for the contract)  * post or retrieve **transactions** (for the contract)  * manage and retrieve **usage limits** (for the contract)  *** API uses RESTful protocol via HTTP to execute POST, PUT, GET and PATCH operations sent to given endpoints, e.g. `/clients`.  API uses JSON Web Encryption compact serialization for payload encryption for all API operations. *** External documentation:   * [ISO 4217 - Currency Codes](https://www.iso.org/iso-4217-currency-codes.html)   * [ISO 3166 - Country Codes](https://www.iso.org/iso-3166-country-codes.html)   * [Internet Engineering Task Force (IETF) BCP 47 standard](https://tools.ietf.org/html/bcp47#appendix-A)   * [JSON Web Encryption](https://developer.mastercard.com/platform/documentation/security-and-authentication/securing-sensitive-data-using-payload-encryption/#jwe-encryption)   * [Internet Engineering Task Force (IETF) RFC7232](https://datatracker.ietf.org/doc/html/rfc7232)   * [JSON Merge Patch](https://datatracker.ietf.org/doc/html/rfc7386) *** 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EmbossedData from './EmbossedData';

/**
 * The CardContractData model module.
 * @module model/CardContractData
 * @version 1.0.0
 */
class CardContractData {
    /**
     * Constructs a new <code>CardContractData</code>.
     * Card basic information.
     * @alias module:model/CardContractData
     * @param productCode {String} Product code defines the configuration used for the contract creation (account or card). Product code is linked in the MP's CMS to certain parameters which define how a contract will be used (for example if it is a card contract or an account contract, a debit or a credit contract, etc.).  *Disclaimer: `productCode` is configured in the MP's CMS and the Issuer is allowed to use only the value configured by the MP (the Issuer cannot use their own value).*  In the standard product card `productCode` can be found in the Parametrization Workbook (PPW) in the *CD.1.4.005*. 
     */
    constructor(productCode) { 
        
        CardContractData.initialize(this, productCode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, productCode) { 
        obj['productCode'] = productCode;
    }

    /**
     * Constructs a <code>CardContractData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CardContractData} obj Optional instance to populate.
     * @return {module:model/CardContractData} The populated <code>CardContractData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CardContractData();

            if (data.hasOwnProperty('branchCode')) {
                obj['branchCode'] = ApiClient.convertToType(data['branchCode'], 'String');
            }
            if (data.hasOwnProperty('cardContractNumber')) {
                obj['cardContractNumber'] = ApiClient.convertToType(data['cardContractNumber'], 'String');
            }
            if (data.hasOwnProperty('cardContractName')) {
                obj['cardContractName'] = ApiClient.convertToType(data['cardContractName'], 'String');
            }
            if (data.hasOwnProperty('cardSubtypeCode')) {
                obj['cardSubtypeCode'] = ApiClient.convertToType(data['cardSubtypeCode'], 'String');
            }
            if (data.hasOwnProperty('cbsNumber')) {
                obj['cbsNumber'] = ApiClient.convertToType(data['cbsNumber'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('embossedData')) {
                obj['embossedData'] = EmbossedData.constructFromObject(data['embossedData']);
            }
            if (data.hasOwnProperty('cardExpiryDate')) {
                obj['cardExpiryDate'] = ApiClient.convertToType(data['cardExpiryDate'], 'String');
            }
            if (data.hasOwnProperty('productCode')) {
                obj['productCode'] = ApiClient.convertToType(data['productCode'], 'String');
            }
            if (data.hasOwnProperty('productionCode')) {
                obj['productionCode'] = ApiClient.convertToType(data['productionCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CardContractData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CardContractData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CardContractData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['branchCode'] && !(typeof data['branchCode'] === 'string' || data['branchCode'] instanceof String)) {
            throw new Error("Expected the field `branchCode` to be a primitive type in the JSON string but got " + data['branchCode']);
        }
        // ensure the json data is a string
        if (data['cardContractNumber'] && !(typeof data['cardContractNumber'] === 'string' || data['cardContractNumber'] instanceof String)) {
            throw new Error("Expected the field `cardContractNumber` to be a primitive type in the JSON string but got " + data['cardContractNumber']);
        }
        // ensure the json data is a string
        if (data['cardContractName'] && !(typeof data['cardContractName'] === 'string' || data['cardContractName'] instanceof String)) {
            throw new Error("Expected the field `cardContractName` to be a primitive type in the JSON string but got " + data['cardContractName']);
        }
        // ensure the json data is a string
        if (data['cardSubtypeCode'] && !(typeof data['cardSubtypeCode'] === 'string' || data['cardSubtypeCode'] instanceof String)) {
            throw new Error("Expected the field `cardSubtypeCode` to be a primitive type in the JSON string but got " + data['cardSubtypeCode']);
        }
        // ensure the json data is a string
        if (data['cbsNumber'] && !(typeof data['cbsNumber'] === 'string' || data['cbsNumber'] instanceof String)) {
            throw new Error("Expected the field `cbsNumber` to be a primitive type in the JSON string but got " + data['cbsNumber']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // validate the optional field `embossedData`
        if (data['embossedData']) { // data not null
          EmbossedData.validateJSON(data['embossedData']);
        }
        // ensure the json data is a string
        if (data['cardExpiryDate'] && !(typeof data['cardExpiryDate'] === 'string' || data['cardExpiryDate'] instanceof String)) {
            throw new Error("Expected the field `cardExpiryDate` to be a primitive type in the JSON string but got " + data['cardExpiryDate']);
        }
        // ensure the json data is a string
        if (data['productCode'] && !(typeof data['productCode'] === 'string' || data['productCode'] instanceof String)) {
            throw new Error("Expected the field `productCode` to be a primitive type in the JSON string but got " + data['productCode']);
        }
        // ensure the json data is a string
        if (data['productionCode'] && !(typeof data['productionCode'] === 'string' || data['productionCode'] instanceof String)) {
            throw new Error("Expected the field `productionCode` to be a primitive type in the JSON string but got " + data['productionCode']);
        }

        return true;
    }


}

CardContractData.RequiredProperties = ["productCode"];

/**
 * Branch code under which a contract (an account contract or a card contract) has been created on the Issuer's side and which has been passed in a contract creation request. (`POST /accounts` or `POST /cards`). The value can be later used by the Issuer for reporting purposes. 
 * @member {String} branchCode
 */
CardContractData.prototype['branchCode'] = undefined;

/**
 * The card contract number represents the Primary Account Number (PAN). A PAN usually consists of 16 digits:   * The first six digits are the Bank Identification Number (BIN): a unique number within the payment organization (Mastercard, VISA)   * The following nine digits are the contract identification number, which can be generated randomly   * The last digit is a Luhn check digit.  The Issuer may enter a PAN number generated by themselves or leave the field empty: in such case, the MP's CMS will generate a PAN number on behalf of the Issuer.  To generate a PAN, the MP's CMS must be configured with BIN ranges for a given card product. 
 * @member {String} cardContractNumber
 */
CardContractData.prototype['cardContractNumber'] = undefined;

/**
 * Card contract name. Free text field. 
 * @member {String} cardContractName
 */
CardContractData.prototype['cardContractName'] = undefined;

/**
 * The field defines the subtype code of a contract. The value should be set only for products (an account contract or a card contract) for which a subtype definition is allowed.  *Disclaimer: `subtypeCode` is configured in the MP's CMS and the Issuer is allowed to use only the value configured by the MP (the Issuer cannot use their own values).* 
 * @member {String} cardSubtypeCode
 */
CardContractData.prototype['cardSubtypeCode'] = undefined;

/**
 * Contract identifier (for an account contract or a card contract) generated on the Issuer's side and passed to the MP's CMS in the contract creation request. (`POST /accounts` or `POST /cards`). 
 * @member {String} cbsNumber
 */
CardContractData.prototype['cbsNumber'] = undefined;

/**
 * Contract currency (format according to ISO 4217, alphanumeric code). Must be set for a product which references several account schemes in different currencies, otherwise, it will be ignored. 
 * @member {String} currency
 */
CardContractData.prototype['currency'] = undefined;

/**
 * @member {module:model/EmbossedData} embossedData
 */
CardContractData.prototype['embossedData'] = undefined;

/**
 * Card expiry date (YYMM format).  The Issuer may pass their own expiry date in a card creation request, in such case the MP will set the value passed in a card creation request on the first *card plastic* which will be created under newly created card contract.  If the Issuer does not provide their own expiry date, the MP will generate an expiry date on behalf of the Issuer. 
 * @member {String} cardExpiryDate
 */
CardContractData.prototype['cardExpiryDate'] = undefined;

/**
 * Product code defines the configuration used for the contract creation (account or card). Product code is linked in the MP's CMS to certain parameters which define how a contract will be used (for example if it is a card contract or an account contract, a debit or a credit contract, etc.).  *Disclaimer: `productCode` is configured in the MP's CMS and the Issuer is allowed to use only the value configured by the MP (the Issuer cannot use their own value).*  In the standard product card `productCode` can be found in the Parametrization Workbook (PPW) in the *CD.1.4.005*. 
 * @member {String} productCode
 */
CardContractData.prototype['productCode'] = undefined;

/**
 * Production code specifies a code under which the new card contract will be created.  There are 4 major card entities defined by the product type:  * plastic - should a card plastic be generated (Yes/No)  * PAN - should a new PAN be set (generated by the MP or passed in an API request by the Issuer) or should the existing one be used  * PIN - should a new PIN be set (generated by the MP or set by the Issuer) or should the existing one be used  * Expiry date - should a new expiry date be set (generated by the MP or passed in an API request by the Issuer)  Possible values in the default configuration of the MP's CMS:  * NWOPIN_NOPROD (new card)     * physical card  - No     * PAN - New     * PIN - Not required     * Expiry date - Set by the MP or the Issuer   * NWOPIN (new card)     * physical card - Yes     * PAN - New     * PIN - New     * Expiry date - Set by the MP or the Issuer    * RPLRE (duplicate card plastic)     * physical card - Yes     * PAN - Same     * PIN - Same     * Expiry date - Set by the MP or the Issuer    * RALLRE (duplicate card plastic)     * physical card - Yes     * PAN - Same     * PIN - New random PIN generated by the MP     * Expiry date - Set by the MP or the Issuer    * RPL (renew)     * physical card - Yes     * PAN - Same     * PIN - Same     * Expiry date - Set by the MP or the Issuer    * RPLRE_NOPROD (renew)     * physical card - No     * PAN - Same     * PIN - Not required     * Expiry date - Set by the MP or the Issuer    * NLOSTWOPIN (replacement)     * physical card - Yes     * PAN - New     * PIN - New     * Expiry date - Set by the MP or the Issuer    * RWOPIN_NOPROD (replacement)     * physical card  - No     * PAN - New     * PIN - Not required     * Expiry date - Set by the MP or the Issuer  Notes:   * `productionCode` is configured in the MP's CMS and the Issuer is allowed to use only the value set by the MP (the Issuer cannot use their own value).   * Passing `productionCode` field is optional. The MP's CMS allows to configure a default `productionCode` assigned to the `productCode`. 
 * @member {String} productionCode
 */
CardContractData.prototype['productionCode'] = undefined;






export default CardContractData;

