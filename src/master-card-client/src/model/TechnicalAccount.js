/**
 * Mastercard Processing Core API
 * OpenAPI Specification for MP (Mastercard Processing) **Core**.  This documentation describes what functionalities are exposed by the MP's CMS (Card Management System) and are available to be used by the Issuer. The Issuer is the primary actor who executes the operations. Whenever the Issuer wishes to onboard its customers to the card program, they may use API to:  * create and manage **client**  * create and manage **contracts**, there are two types of contracts in the MP's CMS:    * **account contract**    * **card contract**  Later, during the card lifecycle, the Issuer can also manage other objects related to the client and the contract (account or card):  * manage **card plastic**  * create, manage and retrieve **additional addresses** (for the client and the contract)  * manage and retrieve **classifiers** (for the client and the contract)  * manage and retrieve **custom data** (for the client and the contract)  * manage and retrieve **parameters** (for the contract)  * set or retrieve **service limit tariff** (for the contract)  * post or retrieve **transactions** (for the contract)  * manage and retrieve **usage limits** (for the contract)  *** API uses RESTful protocol via HTTP to execute POST, PUT, GET and PATCH operations sent to given endpoints, e.g. `/clients`.  API uses JSON Web Encryption compact serialization for payload encryption for all API operations. *** External documentation:   * [ISO 4217 - Currency Codes](https://www.iso.org/iso-4217-currency-codes.html)   * [ISO 3166 - Country Codes](https://www.iso.org/iso-3166-country-codes.html)   * [Internet Engineering Task Force (IETF) BCP 47 standard](https://tools.ietf.org/html/bcp47#appendix-A)   * [JSON Web Encryption](https://developer.mastercard.com/platform/documentation/security-and-authentication/securing-sensitive-data-using-payload-encryption/#jwe-encryption)   * [Internet Engineering Task Force (IETF) RFC7232](https://datatracker.ietf.org/doc/html/rfc7232)   * [JSON Merge Patch](https://datatracker.ietf.org/doc/html/rfc7386) *** 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TechnicalAccount model module.
 * @module model/TechnicalAccount
 * @version 1.0.0
 */
class TechnicalAccount {
    /**
     * Constructs a new <code>TechnicalAccount</code>.
     * @alias module:model/TechnicalAccount
     */
    constructor() { 
        
        TechnicalAccount.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TechnicalAccount</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TechnicalAccount} obj Optional instance to populate.
     * @return {module:model/TechnicalAccount} The populated <code>TechnicalAccount</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TechnicalAccount();

            if (data.hasOwnProperty('accountTemplateId')) {
                obj['accountTemplateId'] = ApiClient.convertToType(data['accountTemplateId'], 'String');
            }
            if (data.hasOwnProperty('accountTemplateName')) {
                obj['accountTemplateName'] = ApiClient.convertToType(data['accountTemplateName'], 'String');
            }
            if (data.hasOwnProperty('ageingPriority')) {
                obj['ageingPriority'] = ApiClient.convertToType(data['ageingPriority'], 'Number');
            }
            if (data.hasOwnProperty('ageingTechnicalAccountId')) {
                obj['ageingTechnicalAccountId'] = ApiClient.convertToType(data['ageingTechnicalAccountId'], 'String');
            }
            if (data.hasOwnProperty('ageingTechnicalAccountName')) {
                obj['ageingTechnicalAccountName'] = ApiClient.convertToType(data['ageingTechnicalAccountName'], 'String');
            }
            if (data.hasOwnProperty('analyticNumber')) {
                obj['analyticNumber'] = ApiClient.convertToType(data['analyticNumber'], 'String');
            }
            if (data.hasOwnProperty('balance')) {
                obj['balance'] = ApiClient.convertToType(data['balance'], 'Number');
            }
            if (data.hasOwnProperty('billingCycleNumber')) {
                obj['billingCycleNumber'] = ApiClient.convertToType(data['billingCycleNumber'], 'Number');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('contractId')) {
                obj['contractId'] = ApiClient.convertToType(data['contractId'], 'Number');
            }
            if (data.hasOwnProperty('contractNumber')) {
                obj['contractNumber'] = ApiClient.convertToType(data['contractNumber'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('currencyNumericCode')) {
                obj['currencyNumericCode'] = ApiClient.convertToType(data['currencyNumericCode'], 'String');
            }
            if (data.hasOwnProperty('dueType')) {
                obj['dueType'] = ApiClient.convertToType(data['dueType'], 'String');
            }
            if (data.hasOwnProperty('endDate')) {
                obj['endDate'] = ApiClient.convertToType(data['endDate'], 'Date');
            }
            if (data.hasOwnProperty('inAmountAvailable')) {
                obj['inAmountAvailable'] = ApiClient.convertToType(data['inAmountAvailable'], 'Boolean');
            }
            if (data.hasOwnProperty('interestFeeRate')) {
                obj['interestFeeRate'] = ApiClient.convertToType(data['interestFeeRate'], 'Number');
            }
            if (data.hasOwnProperty('interestRate')) {
                obj['interestRate'] = ApiClient.convertToType(data['interestRate'], 'Number');
            }
            if (data.hasOwnProperty('interestTechnicalAccountId')) {
                obj['interestTechnicalAccountId'] = ApiClient.convertToType(data['interestTechnicalAccountId'], 'String');
            }
            if (data.hasOwnProperty('interestTechnicalAccountName')) {
                obj['interestTechnicalAccountName'] = ApiClient.convertToType(data['interestTechnicalAccountName'], 'String');
            }
            if (data.hasOwnProperty('lowerLimit')) {
                obj['lowerLimit'] = ApiClient.convertToType(data['lowerLimit'], 'Number');
            }
            if (data.hasOwnProperty('overLimitTechnicalAccountId')) {
                obj['overLimitTechnicalAccountId'] = ApiClient.convertToType(data['overLimitTechnicalAccountId'], 'String');
            }
            if (data.hasOwnProperty('overLimitTechnicalAccountName')) {
                obj['overLimitTechnicalAccountName'] = ApiClient.convertToType(data['overLimitTechnicalAccountName'], 'String');
            }
            if (data.hasOwnProperty('ownBlockedAmount')) {
                obj['ownBlockedAmount'] = ApiClient.convertToType(data['ownBlockedAmount'], 'Number');
            }
            if (data.hasOwnProperty('paymentPriority')) {
                obj['paymentPriority'] = ApiClient.convertToType(data['paymentPriority'], 'Number');
            }
            if (data.hasOwnProperty('startBalance')) {
                obj['startBalance'] = ApiClient.convertToType(data['startBalance'], 'Number');
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'Date');
            }
            if (data.hasOwnProperty('syntheticNumber')) {
                obj['syntheticNumber'] = ApiClient.convertToType(data['syntheticNumber'], 'String');
            }
            if (data.hasOwnProperty('technicalAccountId')) {
                obj['technicalAccountId'] = ApiClient.convertToType(data['technicalAccountId'], 'Number');
            }
            if (data.hasOwnProperty('technicalAccountCode')) {
                obj['technicalAccountCode'] = ApiClient.convertToType(data['technicalAccountCode'], 'String');
            }
            if (data.hasOwnProperty('technicalAccountName')) {
                obj['technicalAccountName'] = ApiClient.convertToType(data['technicalAccountName'], 'String');
            }
            if (data.hasOwnProperty('technicalAccountType')) {
                obj['technicalAccountType'] = ApiClient.convertToType(data['technicalAccountType'], 'String');
            }
            if (data.hasOwnProperty('totalBlockedAmount')) {
                obj['totalBlockedAmount'] = ApiClient.convertToType(data['totalBlockedAmount'], 'Number');
            }
            if (data.hasOwnProperty('upperLimit')) {
                obj['upperLimit'] = ApiClient.convertToType(data['upperLimit'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TechnicalAccount</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TechnicalAccount</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountTemplateId'] && !(typeof data['accountTemplateId'] === 'string' || data['accountTemplateId'] instanceof String)) {
            throw new Error("Expected the field `accountTemplateId` to be a primitive type in the JSON string but got " + data['accountTemplateId']);
        }
        // ensure the json data is a string
        if (data['accountTemplateName'] && !(typeof data['accountTemplateName'] === 'string' || data['accountTemplateName'] instanceof String)) {
            throw new Error("Expected the field `accountTemplateName` to be a primitive type in the JSON string but got " + data['accountTemplateName']);
        }
        // ensure the json data is a string
        if (data['ageingTechnicalAccountId'] && !(typeof data['ageingTechnicalAccountId'] === 'string' || data['ageingTechnicalAccountId'] instanceof String)) {
            throw new Error("Expected the field `ageingTechnicalAccountId` to be a primitive type in the JSON string but got " + data['ageingTechnicalAccountId']);
        }
        // ensure the json data is a string
        if (data['ageingTechnicalAccountName'] && !(typeof data['ageingTechnicalAccountName'] === 'string' || data['ageingTechnicalAccountName'] instanceof String)) {
            throw new Error("Expected the field `ageingTechnicalAccountName` to be a primitive type in the JSON string but got " + data['ageingTechnicalAccountName']);
        }
        // ensure the json data is a string
        if (data['analyticNumber'] && !(typeof data['analyticNumber'] === 'string' || data['analyticNumber'] instanceof String)) {
            throw new Error("Expected the field `analyticNumber` to be a primitive type in the JSON string but got " + data['analyticNumber']);
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['contractNumber'] && !(typeof data['contractNumber'] === 'string' || data['contractNumber'] instanceof String)) {
            throw new Error("Expected the field `contractNumber` to be a primitive type in the JSON string but got " + data['contractNumber']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['currencyNumericCode'] && !(typeof data['currencyNumericCode'] === 'string' || data['currencyNumericCode'] instanceof String)) {
            throw new Error("Expected the field `currencyNumericCode` to be a primitive type in the JSON string but got " + data['currencyNumericCode']);
        }
        // ensure the json data is a string
        if (data['dueType'] && !(typeof data['dueType'] === 'string' || data['dueType'] instanceof String)) {
            throw new Error("Expected the field `dueType` to be a primitive type in the JSON string but got " + data['dueType']);
        }
        // ensure the json data is a string
        if (data['interestTechnicalAccountId'] && !(typeof data['interestTechnicalAccountId'] === 'string' || data['interestTechnicalAccountId'] instanceof String)) {
            throw new Error("Expected the field `interestTechnicalAccountId` to be a primitive type in the JSON string but got " + data['interestTechnicalAccountId']);
        }
        // ensure the json data is a string
        if (data['interestTechnicalAccountName'] && !(typeof data['interestTechnicalAccountName'] === 'string' || data['interestTechnicalAccountName'] instanceof String)) {
            throw new Error("Expected the field `interestTechnicalAccountName` to be a primitive type in the JSON string but got " + data['interestTechnicalAccountName']);
        }
        // ensure the json data is a string
        if (data['overLimitTechnicalAccountId'] && !(typeof data['overLimitTechnicalAccountId'] === 'string' || data['overLimitTechnicalAccountId'] instanceof String)) {
            throw new Error("Expected the field `overLimitTechnicalAccountId` to be a primitive type in the JSON string but got " + data['overLimitTechnicalAccountId']);
        }
        // ensure the json data is a string
        if (data['overLimitTechnicalAccountName'] && !(typeof data['overLimitTechnicalAccountName'] === 'string' || data['overLimitTechnicalAccountName'] instanceof String)) {
            throw new Error("Expected the field `overLimitTechnicalAccountName` to be a primitive type in the JSON string but got " + data['overLimitTechnicalAccountName']);
        }
        // ensure the json data is a string
        if (data['syntheticNumber'] && !(typeof data['syntheticNumber'] === 'string' || data['syntheticNumber'] instanceof String)) {
            throw new Error("Expected the field `syntheticNumber` to be a primitive type in the JSON string but got " + data['syntheticNumber']);
        }
        // ensure the json data is a string
        if (data['technicalAccountCode'] && !(typeof data['technicalAccountCode'] === 'string' || data['technicalAccountCode'] instanceof String)) {
            throw new Error("Expected the field `technicalAccountCode` to be a primitive type in the JSON string but got " + data['technicalAccountCode']);
        }
        // ensure the json data is a string
        if (data['technicalAccountName'] && !(typeof data['technicalAccountName'] === 'string' || data['technicalAccountName'] instanceof String)) {
            throw new Error("Expected the field `technicalAccountName` to be a primitive type in the JSON string but got " + data['technicalAccountName']);
        }
        // ensure the json data is a string
        if (data['technicalAccountType'] && !(typeof data['technicalAccountType'] === 'string' || data['technicalAccountType'] instanceof String)) {
            throw new Error("Expected the field `technicalAccountType` to be a primitive type in the JSON string but got " + data['technicalAccountType']);
        }

        return true;
    }


}



/**
 * Identification number of the account template the account is based on. 
 * @member {String} accountTemplateId
 */
TechnicalAccount.prototype['accountTemplateId'] = undefined;

/**
 * Alphanumeric description of the account template the account is based on. 
 * @member {String} accountTemplateName
 */
TechnicalAccount.prototype['accountTemplateName'] = undefined;

/**
 * Technical account priority, which influences the order of account interest accrual and the order of repayments to loan accounts. 
 * @member {Number} ageingPriority
 */
TechnicalAccount.prototype['ageingPriority'] = undefined;

/**
 * Identification number of the technical account to which funds are transferred when due normalization is performed. 
 * @member {String} ageingTechnicalAccountId
 */
TechnicalAccount.prototype['ageingTechnicalAccountId'] = undefined;

/**
 * Alphanumeric description of the technical account to which funds are transferred when due normalization is performed. 
 * @member {String} ageingTechnicalAccountName
 */
TechnicalAccount.prototype['ageingTechnicalAccountName'] = undefined;

/**
 * General ledger account number used for analytic accounting. 
 * @member {String} analyticNumber
 */
TechnicalAccount.prototype['analyticNumber'] = undefined;

/**
 * Current technical account balance.  The field can contain values up to 4 decimal places. A dot is used as a decimal separator. 
 * @member {Number} balance
 */
TechnicalAccount.prototype['balance'] = undefined;

/**
 * Number of billing cycle. Starting from 0. Increased by 1 for every new billing cycle. 
 * @member {Number} billingCycleNumber
 */
TechnicalAccount.prototype['billingCycleNumber'] = undefined;

/**
 * Technical account category.  | **Possible values**  |      **Description**       | |:-------------------: |:-------------------------: | |          C           |       Personal Limit       | |          S           |        Shared Limit        | |          D           |           Dispute          | |          I           |        Pay Immediate       | |          P           |         Payment Due        | |          O           |            Other           | |          T           |       Transit To ...       | |          X           |           Primary          | |          p           |  Credit Limit Payment Due  | |          i           |    Credit Limit Overdue    | 
 * @member {String} category
 */
TechnicalAccount.prototype['category'] = undefined;

/**
 * Contract record id from the CMS database of contract for which technical account is created. 
 * @member {Number} contractId
 */
TechnicalAccount.prototype['contractId'] = undefined;

/**
 * Contract number for which technical account is created. 
 * @member {String} contractNumber
 */
TechnicalAccount.prototype['contractNumber'] = undefined;

/**
 * Technical account currency (format according to ISO 4217, alphanumeric code). 
 * @member {String} currency
 */
TechnicalAccount.prototype['currency'] = undefined;

/**
 * Technical account currency (format according to ISO 4217, numeric code). 
 * @member {String} currencyNumericCode
 */
TechnicalAccount.prototype['currencyNumericCode'] = undefined;

/**
 * Rule for calculating due normalization dates for the technical account.  | **Possible values**  | **Description**   | |--------------------- |------------------ | | S                    |  Sliding          | | s                    |  Sliding + Clear  | | O                    |  Value Date Due   | | E                    |  End Cycle Due    | | C                    |  Contract Due     | | P                    |  Payment Due      | | L                    |  Long Payment Due | | F                    |  Fixed Day Due    | | Q                    |  Quarter          | | N                    |  None             | 
 * @member {String} dueType
 */
TechnicalAccount.prototype['dueType'] = undefined;

/**
 * Technical cycle end date (YYYY-MM-DD format). 
 * @member {Date} endDate
 */
TechnicalAccount.prototype['endDate'] = undefined;

/**
 * Shows whether the technical account balance is considered during the amount available calculation. 
 * @member {Boolean} inAmountAvailable
 */
TechnicalAccount.prototype['inAmountAvailable'] = undefined;

/**
 * Interest fee rate for the technical account.  The field can contain values up to 2 decimal places. A dot is used as a decimal separator. 
 * @member {Number} interestFeeRate
 */
TechnicalAccount.prototype['interestFeeRate'] = undefined;

/**
 * Interest rate for the technical account.  The field can contain values up to 2 decimal places. A dot is used as a decimal separator. 
 * @member {Number} interestRate
 */
TechnicalAccount.prototype['interestRate'] = undefined;

/**
 * Identification number of the technical account to which interest accrued for the account is transferred. 
 * @member {String} interestTechnicalAccountId
 */
TechnicalAccount.prototype['interestTechnicalAccountId'] = undefined;

/**
 * Alphanumeric description of the technical account to which interest accrued for the account is transferred. 
 * @member {String} interestTechnicalAccountName
 */
TechnicalAccount.prototype['interestTechnicalAccountName'] = undefined;

/**
 * Minimum technical account balance.  The field can contain values up to 4 decimal places. A dot is used as a decimal separator. 
 * @member {Number} lowerLimit
 */
TechnicalAccount.prototype['lowerLimit'] = undefined;

/**
 * Identification number of the technical account to which excessive funds will be transferred if the account balance exceeds the value of the `upperLimit` field. 
 * @member {String} overLimitTechnicalAccountId
 */
TechnicalAccount.prototype['overLimitTechnicalAccountId'] = undefined;

/**
 * Alphanumeric description of the technical account to which excessive funds will be transferred if the account balance exceeds the value of the `upperLiimit` field. 
 * @member {String} overLimitTechnicalAccountName
 */
TechnicalAccount.prototype['overLimitTechnicalAccountName'] = undefined;

/**
 * Technical account's blocked amount not considering blocked amounts of the subcontracts.  The field can contain values up to 4 decimal places. A dot is used as a decimal separator. 
 * @member {Number} ownBlockedAmount
 */
TechnicalAccount.prototype['ownBlockedAmount'] = undefined;

/**
 * Technical account priority, which influences the order of account interest accrual and the order of repayments to loan accounts. 
 * @member {Number} paymentPriority
 */
TechnicalAccount.prototype['paymentPriority'] = undefined;

/**
 * Account balance at the beginning of the billing cycle.  The field can contain values up to 4 decimal places. A dot is used as a decimal separator. 
 * @member {Number} startBalance
 */
TechnicalAccount.prototype['startBalance'] = undefined;

/**
 * Technical cycle start date (YYYY-MM-DD format). 
 * @member {Date} startDate
 */
TechnicalAccount.prototype['startDate'] = undefined;

/**
 * General ledger account number used for synthetic accounting. 
 * @member {String} syntheticNumber
 */
TechnicalAccount.prototype['syntheticNumber'] = undefined;

/**
 * Unique identifier of the technical account record in the database. 
 * @member {Number} technicalAccountId
 */
TechnicalAccount.prototype['technicalAccountId'] = undefined;

/**
 * Technical account code. 
 * @member {String} technicalAccountCode
 */
TechnicalAccount.prototype['technicalAccountCode'] = undefined;

/**
 * Technical account name. 
 * @member {String} technicalAccountName
 */
TechnicalAccount.prototype['technicalAccountName'] = undefined;

/**
 * Technical account type. 
 * @member {String} technicalAccountType
 */
TechnicalAccount.prototype['technicalAccountType'] = undefined;

/**
 * Technical account's blocked amount considering blocked amounts of the subcontracts.  The field can contain values up to 4 decimal places. A dot is used as a decimal separator. 
 * @member {Number} totalBlockedAmount
 */
TechnicalAccount.prototype['totalBlockedAmount'] = undefined;

/**
 * Maximum technical account balance.  The field can contain values up to 4 decimal places. A dot is used as a decimal separator. 
 * @member {Number} upperLimit
 */
TechnicalAccount.prototype['upperLimit'] = undefined;






export default TechnicalAccount;

