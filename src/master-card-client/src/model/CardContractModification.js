/**
 * Mastercard Processing Core API
 * OpenAPI Specification for MP (Mastercard Processing) **Core**.  This documentation describes what functionalities are exposed by the MP's CMS (Card Management System) and are available to be used by the Issuer. The Issuer is the primary actor who executes the operations. Whenever the Issuer wishes to onboard its customers to the card program, they may use API to:  * create and manage **client**  * create and manage **contracts**, there are two types of contracts in the MP's CMS:    * **account contract**    * **card contract**  Later, during the card lifecycle, the Issuer can also manage other objects related to the client and the contract (account or card):  * manage **card plastic**  * create, manage and retrieve **additional addresses** (for the client and the contract)  * manage and retrieve **classifiers** (for the client and the contract)  * manage and retrieve **custom data** (for the client and the contract)  * manage and retrieve **parameters** (for the contract)  * set or retrieve **service limit tariff** (for the contract)  * post or retrieve **transactions** (for the contract)  * manage and retrieve **usage limits** (for the contract)  *** API uses RESTful protocol via HTTP to execute POST, PUT, GET and PATCH operations sent to given endpoints, e.g. `/clients`.  API uses JSON Web Encryption compact serialization for payload encryption for all API operations. *** External documentation:   * [ISO 4217 - Currency Codes](https://www.iso.org/iso-4217-currency-codes.html)   * [ISO 3166 - Country Codes](https://www.iso.org/iso-3166-country-codes.html)   * [Internet Engineering Task Force (IETF) BCP 47 standard](https://tools.ietf.org/html/bcp47#appendix-A)   * [JSON Web Encryption](https://developer.mastercard.com/platform/documentation/security-and-authentication/securing-sensitive-data-using-payload-encryption/#jwe-encryption)   * [Internet Engineering Task Force (IETF) RFC7232](https://datatracker.ietf.org/doc/html/rfc7232)   * [JSON Merge Patch](https://datatracker.ietf.org/doc/html/rfc7386) *** 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CustomDataTag from './CustomDataTag';
import EmbossedData from './EmbossedData';

/**
 * The CardContractModification model module.
 * @module model/CardContractModification
 * @version 1.0.0
 */
class CardContractModification {
    /**
     * Constructs a new <code>CardContractModification</code>.
     * @alias module:model/CardContractModification
     */
    constructor() { 
        
        CardContractModification.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CardContractModification</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CardContractModification} obj Optional instance to populate.
     * @return {module:model/CardContractModification} The populated <code>CardContractModification</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CardContractModification();

            if (data.hasOwnProperty('cbsNumber')) {
                obj['cbsNumber'] = ApiClient.convertToType(data['cbsNumber'], 'String');
            }
            if (data.hasOwnProperty('cardContractName')) {
                obj['cardContractName'] = ApiClient.convertToType(data['cardContractName'], 'String');
            }
            if (data.hasOwnProperty('embossedData')) {
                obj['embossedData'] = EmbossedData.constructFromObject(data['embossedData']);
            }
            if (data.hasOwnProperty('cardContractCustomData')) {
                obj['cardContractCustomData'] = ApiClient.convertToType(data['cardContractCustomData'], [CustomDataTag]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CardContractModification</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CardContractModification</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cbsNumber'] && !(typeof data['cbsNumber'] === 'string' || data['cbsNumber'] instanceof String)) {
            throw new Error("Expected the field `cbsNumber` to be a primitive type in the JSON string but got " + data['cbsNumber']);
        }
        // ensure the json data is a string
        if (data['cardContractName'] && !(typeof data['cardContractName'] === 'string' || data['cardContractName'] instanceof String)) {
            throw new Error("Expected the field `cardContractName` to be a primitive type in the JSON string but got " + data['cardContractName']);
        }
        // validate the optional field `embossedData`
        if (data['embossedData']) { // data not null
          EmbossedData.validateJSON(data['embossedData']);
        }
        if (data['cardContractCustomData']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['cardContractCustomData'])) {
                throw new Error("Expected the field `cardContractCustomData` to be an array in the JSON data but got " + data['cardContractCustomData']);
            }
            // validate the optional field `cardContractCustomData` (array)
            for (const item of data['cardContractCustomData']) {
                CustomDataTag.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Contract identifier (for an account contract or a card contract) generated on the Issuer's side and passed to the MP's CMS in the contract creation request. (`POST /accounts` or `POST /cards`). 
 * @member {String} cbsNumber
 */
CardContractModification.prototype['cbsNumber'] = undefined;

/**
 * Card contract name. Free text field. 
 * @member {String} cardContractName
 */
CardContractModification.prototype['cardContractName'] = undefined;

/**
 * @member {module:model/EmbossedData} embossedData
 */
CardContractModification.prototype['embossedData'] = undefined;

/**
 * Contract custom data allow the Issuer to pass specific contract tags during the creation request. The tags may represent Issuer-specific field names and values, not available as separate, dedicated fields. The Issuer can specify a tag name and its value.  Custom data tags are stored in fixed containers (four containers are available) in a TAG=VALUE; format (for example CATEGORY=A;GROUP=G1;).  Each container has a length of 255 characters. 
 * @member {Array.<module:model/CustomDataTag>} cardContractCustomData
 */
CardContractModification.prototype['cardContractCustomData'] = undefined;






export default CardContractModification;

