/**
 * Mastercard Processing Core API
 * OpenAPI Specification for MP (Mastercard Processing) **Core**.  This documentation describes what functionalities are exposed by the MP's CMS (Card Management System) and are available to be used by the Issuer. The Issuer is the primary actor who executes the operations. Whenever the Issuer wishes to onboard its customers to the card program, they may use API to:  * create and manage **client**  * create and manage **contracts**, there are two types of contracts in the MP's CMS:    * **account contract**    * **card contract**  Later, during the card lifecycle, the Issuer can also manage other objects related to the client and the contract (account or card):  * manage **card plastic**  * create, manage and retrieve **additional addresses** (for the client and the contract)  * manage and retrieve **classifiers** (for the client and the contract)  * manage and retrieve **custom data** (for the client and the contract)  * manage and retrieve **parameters** (for the contract)  * set or retrieve **service limit tariff** (for the contract)  * post or retrieve **transactions** (for the contract)  * manage and retrieve **usage limits** (for the contract)  *** API uses RESTful protocol via HTTP to execute POST, PUT, GET and PATCH operations sent to given endpoints, e.g. `/clients`.  API uses JSON Web Encryption compact serialization for payload encryption for all API operations. *** External documentation:   * [ISO 4217 - Currency Codes](https://www.iso.org/iso-4217-currency-codes.html)   * [ISO 3166 - Country Codes](https://www.iso.org/iso-3166-country-codes.html)   * [Internet Engineering Task Force (IETF) BCP 47 standard](https://tools.ietf.org/html/bcp47#appendix-A)   * [JSON Web Encryption](https://developer.mastercard.com/platform/documentation/security-and-authentication/securing-sensitive-data-using-payload-encryption/#jwe-encryption)   * [Internet Engineering Task Force (IETF) RFC7232](https://datatracker.ietf.org/doc/html/rfc7232)   * [JSON Merge Patch](https://datatracker.ietf.org/doc/html/rfc7386) *** 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ContractTariff model module.
 * @module model/ContractTariff
 * @version 1.0.0
 */
class ContractTariff {
    /**
     * Constructs a new <code>ContractTariff</code>.
     * @alias module:model/ContractTariff
     */
    constructor() { 
        
        ContractTariff.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ContractTariff</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContractTariff} obj Optional instance to populate.
     * @return {module:model/ContractTariff} The populated <code>ContractTariff</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContractTariff();

            if (data.hasOwnProperty('applyMode')) {
                obj['applyMode'] = ApiClient.convertToType(data['applyMode'], 'String');
            }
            if (data.hasOwnProperty('activeTariffDataId')) {
                obj['activeTariffDataId'] = ApiClient.convertToType(data['activeTariffDataId'], 'Number');
            }
            if (data.hasOwnProperty('baseAmount')) {
                obj['baseAmount'] = ApiClient.convertToType(data['baseAmount'], 'Number');
            }
            if (data.hasOwnProperty('contractId')) {
                obj['contractId'] = ApiClient.convertToType(data['contractId'], 'Number');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('currencyNumericCode')) {
                obj['currencyNumericCode'] = ApiClient.convertToType(data['currencyNumericCode'], 'String');
            }
            if (data.hasOwnProperty('domainFrom')) {
                obj['domainFrom'] = ApiClient.convertToType(data['domainFrom'], 'String');
            }
            if (data.hasOwnProperty('domainLevel')) {
                obj['domainLevel'] = ApiClient.convertToType(data['domainLevel'], 'Number');
            }
            if (data.hasOwnProperty('domainName')) {
                obj['domainName'] = ApiClient.convertToType(data['domainName'], 'String');
            }
            if (data.hasOwnProperty('duePeriod')) {
                obj['duePeriod'] = ApiClient.convertToType(data['duePeriod'], 'Number');
            }
            if (data.hasOwnProperty('feeRateValue')) {
                obj['feeRateValue'] = ApiClient.convertToType(data['feeRateValue'], 'Number');
            }
            if (data.hasOwnProperty('fxRateType')) {
                obj['fxRateType'] = ApiClient.convertToType(data['fxRateType'], 'String');
            }
            if (data.hasOwnProperty('generalLedgerNumber')) {
                obj['generalLedgerNumber'] = ApiClient.convertToType(data['generalLedgerNumber'], 'String');
            }
            if (data.hasOwnProperty('generalLedgerNumberName')) {
                obj['generalLedgerNumberName'] = ApiClient.convertToType(data['generalLedgerNumberName'], 'String');
            }
            if (data.hasOwnProperty('globalTariffId')) {
                obj['globalTariffId'] = ApiClient.convertToType(data['globalTariffId'], 'Number');
            }
            if (data.hasOwnProperty('gracePeriod')) {
                obj['gracePeriod'] = ApiClient.convertToType(data['gracePeriod'], 'Number');
            }
            if (data.hasOwnProperty('minCount')) {
                obj['minCount'] = ApiClient.convertToType(data['minCount'], 'Number');
            }
            if (data.hasOwnProperty('maxCount')) {
                obj['maxCount'] = ApiClient.convertToType(data['maxCount'], 'Number');
            }
            if (data.hasOwnProperty('maxAmount')) {
                obj['maxAmount'] = ApiClient.convertToType(data['maxAmount'], 'Number');
            }
            if (data.hasOwnProperty('minAmount')) {
                obj['minAmount'] = ApiClient.convertToType(data['minAmount'], 'Number');
            }
            if (data.hasOwnProperty('personalisationType')) {
                obj['personalisationType'] = ApiClient.convertToType(data['personalisationType'], 'String');
            }
            if (data.hasOwnProperty('personalTariffId')) {
                obj['personalTariffId'] = ApiClient.convertToType(data['personalTariffId'], 'Number');
            }
            if (data.hasOwnProperty('rateValue')) {
                obj['rateValue'] = ApiClient.convertToType(data['rateValue'], 'Number');
            }
            if (data.hasOwnProperty('singleAmount')) {
                obj['singleAmount'] = ApiClient.convertToType(data['singleAmount'], 'Number');
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'Date');
            }
            if (data.hasOwnProperty('tariffCode')) {
                obj['tariffCode'] = ApiClient.convertToType(data['tariffCode'], 'String');
            }
            if (data.hasOwnProperty('tariffDomainId')) {
                obj['tariffDomainId'] = ApiClient.convertToType(data['tariffDomainId'], 'Number');
            }
            if (data.hasOwnProperty('tariffDomainCode')) {
                obj['tariffDomainCode'] = ApiClient.convertToType(data['tariffDomainCode'], 'String');
            }
            if (data.hasOwnProperty('tariffId')) {
                obj['tariffId'] = ApiClient.convertToType(data['tariffId'], 'Number');
            }
            if (data.hasOwnProperty('tariffName')) {
                obj['tariffName'] = ApiClient.convertToType(data['tariffName'], 'String');
            }
            if (data.hasOwnProperty('tariffRole')) {
                obj['tariffRole'] = ApiClient.convertToType(data['tariffRole'], 'String');
            }
            if (data.hasOwnProperty('tariffStartDate')) {
                obj['tariffStartDate'] = ApiClient.convertToType(data['tariffStartDate'], 'Date');
            }
            if (data.hasOwnProperty('tariffTypeCode')) {
                obj['tariffTypeCode'] = ApiClient.convertToType(data['tariffTypeCode'], 'String');
            }
            if (data.hasOwnProperty('tariffTypeName')) {
                obj['tariffTypeName'] = ApiClient.convertToType(data['tariffTypeName'], 'String');
            }
            if (data.hasOwnProperty('tariffValue')) {
                obj['tariffValue'] = ApiClient.convertToType(data['tariffValue'], 'String');
            }
            if (data.hasOwnProperty('volumeBased')) {
                obj['volumeBased'] = ApiClient.convertToType(data['volumeBased'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContractTariff</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContractTariff</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['applyMode'] && !(typeof data['applyMode'] === 'string' || data['applyMode'] instanceof String)) {
            throw new Error("Expected the field `applyMode` to be a primitive type in the JSON string but got " + data['applyMode']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['currencyNumericCode'] && !(typeof data['currencyNumericCode'] === 'string' || data['currencyNumericCode'] instanceof String)) {
            throw new Error("Expected the field `currencyNumericCode` to be a primitive type in the JSON string but got " + data['currencyNumericCode']);
        }
        // ensure the json data is a string
        if (data['domainFrom'] && !(typeof data['domainFrom'] === 'string' || data['domainFrom'] instanceof String)) {
            throw new Error("Expected the field `domainFrom` to be a primitive type in the JSON string but got " + data['domainFrom']);
        }
        // ensure the json data is a string
        if (data['domainName'] && !(typeof data['domainName'] === 'string' || data['domainName'] instanceof String)) {
            throw new Error("Expected the field `domainName` to be a primitive type in the JSON string but got " + data['domainName']);
        }
        // ensure the json data is a string
        if (data['fxRateType'] && !(typeof data['fxRateType'] === 'string' || data['fxRateType'] instanceof String)) {
            throw new Error("Expected the field `fxRateType` to be a primitive type in the JSON string but got " + data['fxRateType']);
        }
        // ensure the json data is a string
        if (data['generalLedgerNumber'] && !(typeof data['generalLedgerNumber'] === 'string' || data['generalLedgerNumber'] instanceof String)) {
            throw new Error("Expected the field `generalLedgerNumber` to be a primitive type in the JSON string but got " + data['generalLedgerNumber']);
        }
        // ensure the json data is a string
        if (data['generalLedgerNumberName'] && !(typeof data['generalLedgerNumberName'] === 'string' || data['generalLedgerNumberName'] instanceof String)) {
            throw new Error("Expected the field `generalLedgerNumberName` to be a primitive type in the JSON string but got " + data['generalLedgerNumberName']);
        }
        // ensure the json data is a string
        if (data['personalisationType'] && !(typeof data['personalisationType'] === 'string' || data['personalisationType'] instanceof String)) {
            throw new Error("Expected the field `personalisationType` to be a primitive type in the JSON string but got " + data['personalisationType']);
        }
        // ensure the json data is a string
        if (data['tariffCode'] && !(typeof data['tariffCode'] === 'string' || data['tariffCode'] instanceof String)) {
            throw new Error("Expected the field `tariffCode` to be a primitive type in the JSON string but got " + data['tariffCode']);
        }
        // ensure the json data is a string
        if (data['tariffDomainCode'] && !(typeof data['tariffDomainCode'] === 'string' || data['tariffDomainCode'] instanceof String)) {
            throw new Error("Expected the field `tariffDomainCode` to be a primitive type in the JSON string but got " + data['tariffDomainCode']);
        }
        // ensure the json data is a string
        if (data['tariffName'] && !(typeof data['tariffName'] === 'string' || data['tariffName'] instanceof String)) {
            throw new Error("Expected the field `tariffName` to be a primitive type in the JSON string but got " + data['tariffName']);
        }
        // ensure the json data is a string
        if (data['tariffRole'] && !(typeof data['tariffRole'] === 'string' || data['tariffRole'] instanceof String)) {
            throw new Error("Expected the field `tariffRole` to be a primitive type in the JSON string but got " + data['tariffRole']);
        }
        // ensure the json data is a string
        if (data['tariffTypeCode'] && !(typeof data['tariffTypeCode'] === 'string' || data['tariffTypeCode'] instanceof String)) {
            throw new Error("Expected the field `tariffTypeCode` to be a primitive type in the JSON string but got " + data['tariffTypeCode']);
        }
        // ensure the json data is a string
        if (data['tariffTypeName'] && !(typeof data['tariffTypeName'] === 'string' || data['tariffTypeName'] instanceof String)) {
            throw new Error("Expected the field `tariffTypeName` to be a primitive type in the JSON string but got " + data['tariffTypeName']);
        }
        // ensure the json data is a string
        if (data['tariffValue'] && !(typeof data['tariffValue'] === 'string' || data['tariffValue'] instanceof String)) {
            throw new Error("Expected the field `tariffValue` to be a primitive type in the JSON string but got " + data['tariffValue']);
        }
        // ensure the json data is a string
        if (data['volumeBased'] && !(typeof data['volumeBased'] === 'string' || data['volumeBased'] instanceof String)) {
            throw new Error("Expected the field `volumeBased` to be a primitive type in the JSON string but got " + data['volumeBased']);
        }

        return true;
    }


}



/**
 * Apply mode.  | **Possible values**  | **Description**  | |--------------------- |----------------- | | D                    | Skip             | | N                    | Inactive         | | Y                    | From tariff      | 
 * @member {String} applyMode
 */
ContractTariff.prototype['applyMode'] = undefined;

/**
 * Tariff data identifier. 
 * @member {Number} activeTariffDataId
 */
ContractTariff.prototype['activeTariffDataId'] = undefined;

/**
 * Additional minimum allowed amount, e.g. minimum loan payment.  The field can contain values up to 4 decimal places. A dot is used as a decimal separator. 
 * @member {Number} baseAmount
 */
ContractTariff.prototype['baseAmount'] = undefined;

/**
 * Contract technical identifier. 
 * @member {Number} contractId
 */
ContractTariff.prototype['contractId'] = undefined;

/**
 * Currency of the fee (format according to ISO 4217, alphanumeric code). 
 * @member {String} currency
 */
ContractTariff.prototype['currency'] = undefined;

/**
 * Currency of the fee (format according to ISO 4217, numeric code). 
 * @member {String} currencyNumericCode
 */
ContractTariff.prototype['currencyNumericCode'] = undefined;

/**
 * Tariff domain organization.  | **Possible values**  |     **Description**     | |:-------------------: |:----------------------: | |          F           |  Financial Institution  | |          A           |      Account Scheme     | |          S           |       Service Pack      | |          P           |         Product         | |          T           |     Product Template    | |          O           |         Personal        | |          E           |          Event          | |          G           |          Group          | |          C           |       Counterparty      | |          M           |         Grouped         | 
 * @member {String} domainFrom
 */
ContractTariff.prototype['domainFrom'] = undefined;

/**
 * Tariff domain level in tariff hierarchy. 
 * @member {Number} domainLevel
 */
ContractTariff.prototype['domainLevel'] = undefined;

/**
 * Tariff domain name. 
 * @member {String} domainName
 */
ContractTariff.prototype['domainName'] = undefined;

/**
 * Due period value. 
 * @member {Number} duePeriod
 */
ContractTariff.prototype['duePeriod'] = undefined;

/**
 * Additional interest rate, e.g. fee rate charged on revenue from account interest.  The field can contain values up to 4 decimal places. A dot is used as a decimal separator. 
 * @member {Number} feeRateValue
 */
ContractTariff.prototype['feeRateValue'] = undefined;

/**
 * Type of currency exchange rate.  | **Possible values**  | **Description**  | |--------------------- |----------------- | | B                    | Buy/Sell         | | M                    | Middle           | 
 * @member {String} fxRateType
 */
ContractTariff.prototype['fxRateType'] = undefined;

/**
 * Account number in the general ledger, used for synthetic accounting. 
 * @member {String} generalLedgerNumber
 */
ContractTariff.prototype['generalLedgerNumber'] = undefined;

/**
 * General ledger number name. 
 * @member {String} generalLedgerNumberName
 */
ContractTariff.prototype['generalLedgerNumberName'] = undefined;

/**
 * Global tariff identifier. 
 * @member {Number} globalTariffId
 */
ContractTariff.prototype['globalTariffId'] = undefined;

/**
 * The time interval used, for example, to specify a time shift for merchant reimbursement or to specify a loan grace period. 
 * @member {Number} gracePeriod
 */
ContractTariff.prototype['gracePeriod'] = undefined;

/**
 * Minimum allowed counter value. 
 * @member {Number} minCount
 */
ContractTariff.prototype['minCount'] = undefined;

/**
 * Maximum allowed counter value. 
 * @member {Number} maxCount
 */
ContractTariff.prototype['maxCount'] = undefined;

/**
 * Maximum allowed amount, e.g. maximum fee or maximum transaction amount.  The field can contain values up to 4 decimal places. A dot is used as a decimal separator. 
 * @member {Number} maxAmount
 */
ContractTariff.prototype['maxAmount'] = undefined;

/**
 * Minimum allowed amount, e.g. minimum fee or minimum transaction amount.  The field can contain values up to 4 decimal places. A dot is used as a decimal separator. 
 * @member {Number} minAmount
 */
ContractTariff.prototype['minAmount'] = undefined;

/**
 * Personalisation type.  | **Possible values**  |      **Description**       | |:-------------------: |:-------------------------: | |          G           |           Global           | |          P           |          Personal          | |          D           |        Personalised        | |          T           | Personal (Template Based)  | |          L           |          Template          | 
 * @member {String} personalisationType
 */
ContractTariff.prototype['personalisationType'] = undefined;

/**
 * Personal tariff identifier. 
 * @member {Number} personalTariffId
 */
ContractTariff.prototype['personalTariffId'] = undefined;

/**
 * The interest rate on an account or fee rate.  The field can contain values up to 4 decimal places. A dot is used as a decimal separator. 
 * @member {Number} rateValue
 */
ContractTariff.prototype['rateValue'] = undefined;

/**
 * Additional allowed amount, e.g. maximum payment in installment schedule.  The field can contain values up to 4 decimal places. A dot is used as a decimal separator. 
 * @member {Number} singleAmount
 */
ContractTariff.prototype['singleAmount'] = undefined;

/**
 * Date from which tariff data is active (YYYY-MM-DD format). 
 * @member {Date} startDate
 */
ContractTariff.prototype['startDate'] = undefined;

/**
 * Tariff code. 
 * @member {String} tariffCode
 */
ContractTariff.prototype['tariffCode'] = undefined;

/**
 * Tariff domain identifier. 
 * @member {Number} tariffDomainId
 */
ContractTariff.prototype['tariffDomainId'] = undefined;

/**
 * Tariff domain code. 
 * @member {String} tariffDomainCode
 */
ContractTariff.prototype['tariffDomainCode'] = undefined;

/**
 * Tariff identifier. 
 * @member {Number} tariffId
 */
ContractTariff.prototype['tariffId'] = undefined;

/**
 * Tariff name. 
 * @member {String} tariffName
 */
ContractTariff.prototype['tariffName'] = undefined;

/**
 * Tariff role.  | **Possible values**  | **Description**             | |--------------------- |---------------------------- | | SERVICE              |  Service                    | | SERVICE_LIMIT        |  Service Limit              | | SERVICE_VD           |  Service Value Days         | | INTEREST             |  Interest                   | | AGEING               |  Ageing                     | | USAGE                |  Usage                      | | INTEREST_TAX         |  Interest Tax               | | BILLING              |  Billing Scheme             | | GL                   |  General Ledger Numeration  | | INST_FEE             |  Installment Fee            | | INSTALLMENT          |  Installment Scheme         | | THRESHOLD            |  Threshold                  | | TECHNICAL            |  Technical                  | | FX                   |  Conversion                 | | REDEFINITION         |  Redefinition               | 
 * @member {String} tariffRole
 */
ContractTariff.prototype['tariffRole'] = undefined;

/**
 * Date from which tariff data is active (YYYY-MM-DD format). 
 * @member {Date} tariffStartDate
 */
ContractTariff.prototype['tariffStartDate'] = undefined;

/**
 * Tariff type code. 
 * @member {String} tariffTypeCode
 */
ContractTariff.prototype['tariffTypeCode'] = undefined;

/**
 * Tariff type name. 
 * @member {String} tariffTypeName
 */
ContractTariff.prototype['tariffTypeName'] = undefined;

/**
 * Tariff value. 
 * @member {String} tariffValue
 */
ContractTariff.prototype['tariffValue'] = undefined;

/**
 * A flag that indicates whether the tariff is volume-based.  | **Possible values**  | |--------------------- | | N                    | | Y                    | 
 * @member {String} volumeBased
 */
ContractTariff.prototype['volumeBased'] = undefined;






export default ContractTariff;

