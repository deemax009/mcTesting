/**
 * Mastercard Processing Core API
 * OpenAPI Specification for MP (Mastercard Processing) **Core**.  This documentation describes what functionalities are exposed by the MP's CMS (Card Management System) and are available to be used by the Issuer. The Issuer is the primary actor who executes the operations. Whenever the Issuer wishes to onboard its customers to the card program, they may use API to:  * create and manage **client**  * create and manage **contracts**, there are two types of contracts in the MP's CMS:    * **account contract**    * **card contract**  Later, during the card lifecycle, the Issuer can also manage other objects related to the client and the contract (account or card):  * manage **card plastic**  * create, manage and retrieve **additional addresses** (for the client and the contract)  * manage and retrieve **classifiers** (for the client and the contract)  * manage and retrieve **custom data** (for the client and the contract)  * manage and retrieve **parameters** (for the contract)  * set or retrieve **service limit tariff** (for the contract)  * post or retrieve **transactions** (for the contract)  * manage and retrieve **usage limits** (for the contract)  *** API uses RESTful protocol via HTTP to execute POST, PUT, GET and PATCH operations sent to given endpoints, e.g. `/clients`.  API uses JSON Web Encryption compact serialization for payload encryption for all API operations. *** External documentation:   * [ISO 4217 - Currency Codes](https://www.iso.org/iso-4217-currency-codes.html)   * [ISO 3166 - Country Codes](https://www.iso.org/iso-3166-country-codes.html)   * [Internet Engineering Task Force (IETF) BCP 47 standard](https://tools.ietf.org/html/bcp47#appendix-A)   * [JSON Web Encryption](https://developer.mastercard.com/platform/documentation/security-and-authentication/securing-sensitive-data-using-payload-encryption/#jwe-encryption)   * [Internet Engineering Task Force (IETF) RFC7232](https://datatracker.ietf.org/doc/html/rfc7232)   * [JSON Merge Patch](https://datatracker.ietf.org/doc/html/rfc7386) *** 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Client from '../model/Client';
import ClientAccountContracts from '../model/ClientAccountContracts';
import ClientCardContracts from '../model/ClientCardContracts';
import ClientCreation from '../model/ClientCreation';
import ClientIdentifier from '../model/ClientIdentifier';
import ClientModification from '../model/ClientModification';
import ErrorWrapper from '../model/ErrorWrapper';
import OnlinePinAttemptsClearanceForClient from '../model/OnlinePinAttemptsClearanceForClient';

/**
* Client service.
* @module api/ClientApi
* @version 1.0.0
*/
export default class ClientApi {

    /**
    * Constructs a new ClientApi. 
    * @alias module:api/ClientApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the clearOnlinePinAttemptsForClient operation.
     * @callback module:api/ClientApi~clearOnlinePinAttemptsForClientCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resets Online PIN Try Counter
     * Operation name: `clearOnlinePinAttemptsForClient`  Operation is used to reset Online PIN Try Counter for a specified client. 
     * @param {Number} clientId Unique technical client identifier, generated by the MP's CMS database engine. The identifier is generated when client creation finishes successfully and is returned in a client creation response (`POST /clients`, field `clientId`). 
     * @param {module:model/OnlinePinAttemptsClearanceForClient} onlinePinAttemptsClearanceForClient 
     * @param {module:api/ClientApi~clearOnlinePinAttemptsForClientCallback} callback The callback function, accepting three arguments: error, data, response
     */
    clearOnlinePinAttemptsForClient(clientId, onlinePinAttemptsClearanceForClient, callback) {
      let postBody = onlinePinAttemptsClearanceForClient;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling clearOnlinePinAttemptsForClient");
      }
      // verify the required parameter 'onlinePinAttemptsClearanceForClient' is set
      if (onlinePinAttemptsClearanceForClient === undefined || onlinePinAttemptsClearanceForClient === null) {
        throw new Error("Missing the required parameter 'onlinePinAttemptsClearanceForClient' when calling clearOnlinePinAttemptsForClient");
      }

      let pathParams = {
        'client_id': clientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json;charset=utf-8'];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = null;
      return this.apiClient.callApi(
        '/clients/{client_id}/online-pin-attempts-counter', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createClient operation.
     * @callback module:api/ClientApi~createClientCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientIdentifier} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a client
     * Operation name: `createClient`  Operation is used to create a client. Client creation is the first step in the onboarding of the Issuer's customers into MP's CMS.  Upon successful client creation, a unique client identifier is returned. The Issuer shall create a client before they request for an account contract creation (`POST /accounts`) or a card contract creation (`POST /cards`). 
     * @param {module:model/ClientCreation} clientCreation 
     * @param {Object} opts Optional parameters
     * @param {String} [idempotencyKey] Unique identifier generated by the issuer. Mastercard Processing uses this identifier to recognize subsequent retries of the same request and ensure idempotent behaviour by sending the same response without repeating the operation again. 
     * @param {module:api/ClientApi~createClientCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClientIdentifier}
     */
    createClient(clientCreation, opts, callback) {
      opts = opts || {};
      let postBody = clientCreation;
      // verify the required parameter 'clientCreation' is set
      if (clientCreation === undefined || clientCreation === null) {
        throw new Error("Missing the required parameter 'clientCreation' when calling createClient");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Idempotency-Key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json;charset=utf-8'];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = ClientIdentifier;
      return this.apiClient.callApi(
        '/clients', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountContractsByClient operation.
     * @callback module:api/ClientApi~getAccountContractsByClientCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientAccountContracts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of account contracts for a specified client
     * Operation name: `getAccountContractsByClient`  Operation is used to retrieve a list of account contracts for a specified client. 
     * @param {Number} clientId Unique technical client identifier, generated by the MP's CMS database engine. The identifier is generated when client creation finishes successfully and is returned in a client creation response (`POST /clients`, field `clientId`). 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] The number of items you want the list to be limited to. 
     * @param {Number} [offset = 0)] The number of items to offset the start of the list from. 
     * @param {module:api/ClientApi~getAccountContractsByClientCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClientAccountContracts}
     */
    getAccountContractsByClient(clientId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getAccountContractsByClient");
      }

      let pathParams = {
        'client_id': clientId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = ClientAccountContracts;
      return this.apiClient.callApi(
        '/clients/{client_id}/account-contracts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCardContractsByClient operation.
     * @callback module:api/ClientApi~getCardContractsByClientCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientCardContracts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of card contracts for a specified client
     * Operation name: `getCardContractsByClient`  Operation is used to retrieve a list of card contracts for a specified client.  Additional filtering can be applied:   * **Card contract opening date** - to retrieve cards created after defined date   * **Card contract status** - to retrieve cards with specified statuses only 
     * @param {Number} clientId Unique technical client identifier, generated by the MP's CMS database engine. The identifier is generated when client creation finishes successfully and is returned in a client creation response (`POST /clients`, field `clientId`). 
     * @param {Object} opts Optional parameters
     * @param {Date} [creationDateFrom] Response will return card contracts with creation date >= than date passed in the request (YYYY-MM-DD format).  If not filled card contracts are returned without checking the creation date. 
     * @param {Array.<String>} [statuses] The list of `Status`. The response will contain contracts with specified statuses only.  If the list does not contain any value then the response will contain all cards without filtering by status. 
     * @param {Number} [limit = 10)] The number of items you want the list to be limited to. 
     * @param {Number} [offset = 0)] The number of items to offset the start of the list from. 
     * @param {module:api/ClientApi~getCardContractsByClientCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClientCardContracts}
     */
    getCardContractsByClient(clientId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getCardContractsByClient");
      }

      let pathParams = {
        'client_id': clientId
      };
      let queryParams = {
        'creation_date_from': opts['creationDateFrom'],
        'statuses': this.apiClient.buildCollectionParam(opts['statuses'], 'csv'),
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = ClientCardContracts;
      return this.apiClient.callApi(
        '/clients/{client_id}/card-contracts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClient operation.
     * @callback module:api/ClientApi~getClientCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Client} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a client
     * Operation name: `getClient`  Operation is used to retrieve information about the specified client, existing in the MP's CMS. 
     * @param {Number} clientId Unique technical client identifier, generated by the MP's CMS database engine. The identifier is generated when client creation finishes successfully and is returned in a client creation response (`POST /clients`, field `clientId`). 
     * @param {module:api/ClientApi~getClientCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Client}
     */
    getClient(clientId, callback) {
      let postBody = null;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getClient");
      }

      let pathParams = {
        'client_id': clientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = Client;
      return this.apiClient.callApi(
        '/clients/{client_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateClient operation.
     * @callback module:api/ClientApi~updateClientCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a client
     * Operation name: `updateClient`  Operation is used to update client data in the MP's CMS. The method has been implemented as [JSON Merge Patch](https://datatracker.ietf.org/doc/html/rfc7386), but not all field values can be cleared. Fields which can be cleared are listed below:   * `client.additionalDate01`   * `client.additionalDate02`   * `client.clientBaseAddressData.state`   * `client.clientBaseAddressData.city`   * `client.clientBaseAddressData.postalCode`   * `client.clientBaseAddressData.addressLine1`   * `client.clientBaseAddressData.addressLine2`   * `client.clientBaseAddressData.addressLine3`   * `client.clientBaseAddressData.addressLine4`   * `client.clientBaseAddressData.country`   * `client.clientCompanyData.companyName`   * `client.clientCompanyData.companyTradeName`   * `client.clientCompanyData.companyDepartment`   * `client.clientCompanyData.position`   * `client.clientContactData.phoneNumberHome`   * `client.clientContactData.phoneNumberMobile`   * `client.clientContactData.phoneNumberWork`   * `client.clientContactData.faxHome`   * `client.clientContactData.fax`   * `client.clientContactData.email`   * `client.clientExpiryDate`   * `client.clientIdentificationData.taxPosition`   * `client.clientIdentificationData.taxpayerIdentifier`   * `client.clientIdentificationData.identificationDocumentType`   * `client.clientIdentificationData.identificationDocumentNumber`   * `client.clientIdentificationData.identificationDocumentDetails`   * `client.clientIdentificationData.socialNumber`   * `client.clientPersonalData.language`   * `client.clientPersonalData.maritalStatus`   * `client.clientPersonalData.title`   * `client.clientPersonalData.shortName`   * `client.clientPersonalData.suffix`   * `client.clientPersonalData.gender`   * `client.clientPersonalData.firstName`   * `client.clientPersonalData.middleName`   * `client.clientPersonalData.lastName`   * `client.clientPersonalData.birthDate`   * `client.clientPersonalData.birthPlace`   * `client.clientPersonalData.birthName`   * `client.clientPersonalData.citizenship`   * `client.clientPersonalData.secretPhrase`   * `client.embossedData.title`   * `client.embossedData.firstName`   * `client.embossedData.lastName`   * `client.embossedData.companyName` 
     * @param {String} ifMatch Used to ensure idempotency for the PATCH methods. This header should be populated with the `ETag` received in the response header from the GET call of the same resource being updated. See [RFC7232](https://datatracker.ietf.org/doc/html/rfc7232) for more details. 
     * @param {Number} clientId Unique technical client identifier, generated by the MP's CMS database engine. The identifier is generated when client creation finishes successfully and is returned in a client creation response (`POST /clients`, field `clientId`). 
     * @param {module:model/ClientModification} clientModification 
     * @param {Object} opts Optional parameters
     * @param {String} [idempotencyKey] Unique identifier generated by the issuer. Mastercard Processing uses this identifier to recognize subsequent retries of the same request and ensure idempotent behaviour by sending the same response without repeating the operation again. 
     * @param {module:api/ClientApi~updateClientCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateClient(ifMatch, clientId, clientModification, opts, callback) {
      opts = opts || {};
      let postBody = clientModification;
      // verify the required parameter 'ifMatch' is set
      if (ifMatch === undefined || ifMatch === null) {
        throw new Error("Missing the required parameter 'ifMatch' when calling updateClient");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling updateClient");
      }
      // verify the required parameter 'clientModification' is set
      if (clientModification === undefined || clientModification === null) {
        throw new Error("Missing the required parameter 'clientModification' when calling updateClient");
      }

      let pathParams = {
        'client_id': clientId
      };
      let queryParams = {
      };
      let headerParams = {
        'If-Match': ifMatch,
        'Idempotency-Key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/merge-patch+json;charset=utf-8'];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = null;
      return this.apiClient.callApi(
        '/clients/{client_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
