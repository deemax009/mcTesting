/**
 * Mastercard Processing Core API
 * OpenAPI Specification for MP (Mastercard Processing) **Core**.  This documentation describes what functionalities are exposed by the MP's CMS (Card Management System) and are available to be used by the Issuer. The Issuer is the primary actor who executes the operations. Whenever the Issuer wishes to onboard its customers to the card program, they may use API to:  * create and manage **client**  * create and manage **contracts**, there are two types of contracts in the MP's CMS:    * **account contract**    * **card contract**  Later, during the card lifecycle, the Issuer can also manage other objects related to the client and the contract (account or card):  * manage **card plastic**  * create, manage and retrieve **additional addresses** (for the client and the contract)  * manage and retrieve **classifiers** (for the client and the contract)  * manage and retrieve **custom data** (for the client and the contract)  * manage and retrieve **parameters** (for the contract)  * set or retrieve **service limit tariff** (for the contract)  * post or retrieve **transactions** (for the contract)  * manage and retrieve **usage limits** (for the contract)  *** API uses RESTful protocol via HTTP to execute POST, PUT, GET and PATCH operations sent to given endpoints, e.g. `/clients`.  API uses JSON Web Encryption compact serialization for payload encryption for all API operations. *** External documentation:   * [ISO 4217 - Currency Codes](https://www.iso.org/iso-4217-currency-codes.html)   * [ISO 3166 - Country Codes](https://www.iso.org/iso-3166-country-codes.html)   * [Internet Engineering Task Force (IETF) BCP 47 standard](https://tools.ietf.org/html/bcp47#appendix-A)   * [JSON Web Encryption](https://developer.mastercard.com/platform/documentation/security-and-authentication/securing-sensitive-data-using-payload-encryption/#jwe-encryption)   * [Internet Engineering Task Force (IETF) RFC7232](https://datatracker.ietf.org/doc/html/rfc7232)   * [JSON Merge Patch](https://datatracker.ietf.org/doc/html/rfc7386) *** 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ContractParameters from '../model/ContractParameters';
import ErrorWrapper from '../model/ErrorWrapper';
import ParameterModification from '../model/ParameterModification';

/**
* Parameter service.
* @module api/ParameterApi
* @version 1.0.0
*/
export default class ParameterApi {

    /**
    * Constructs a new ParameterApi. 
    * @alias module:api/ParameterApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getContractParameters operation.
     * @callback module:api/ParameterApi~getContractParametersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContractParameters} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about contract (account contract or card contract) parameter(s).
     * Operation name: `getContractParameters`  Operation is used to retrieve information about contract parameter(s) (**account contract** or **card contract**).  The Issuer is allowed to provide parameter codes to retrieve information only about specific parameters.  Available parameters in the standard product with possible values: | `parameterCode`            | `parameterValue`                           | **Contract level**  | **Description**                               | **Product applicability**  | |---------------------------- |------------------------------------------- |-------------------- |---------------------------------------------- |--------------------------- | | FUNCTIONAL_DATES            | DATE_PLAN_01                               | Account   Contract  | Functional   dates plan management            | Prepaid                    | | FUNCTIONAL_DATES            | DATE_PLAN_02                               | Account   Contract  | Functional   dates plan management            | Prepaid                    | | GL_PLAN                     | GL_PLAN_01                                 | Account   Contract  | GL plan   management                          | Credit                     | | INTEREST_PLAN               | INT_PLAN_01                                | Account   Contract  | Interest   plan management                    | Credit                     | | INTEREST_PLAN               | INT_PLAN_02                                | Account   Contract  | Interest   plan management                    | Credit                     | | INTEREST_PLAN               | INT_PLAN_03                                | Account   Contract  | Interest   plan management                    | Credit                     | | MTP_OPTION                  | MTP_OPTION_01                              | Account   Contract  | MTP   option management                       | Credit                     | | MTP_OPTION                  | MTP_OPTION_02                              | Account   Contract  | MTP   option management                       | Credit                     | | SDD_AGREED_TO_PAY_VARIANCE  | NULL                                       | Card   contract     | Variance   for Direct debit Statement option  | Credit                     | | SDD_AGREED_TO_PAY_VARIANCE  | 10                                         | Card   contract     | Variance   for Direct debit Statement option  | Credit                     |  | SDD_AGREED_TO_PAY_VARIANCE  | 20                                          | Card   contract     | Variance   for Direct debit Statement option  | Credit                     | | SDD_AGREED_TO_PAY_VARIANCE  | 30                                          | Card   contract     | Variance   for Direct debit Statement option  | Credit                     | | SDD_AGREED_TO_PAY_VARIANCE  | 50                                         | Card   contract     | Variance   for Direct debit Statement option  | Credit                     | | SDD_AGREED_TO_PAY_VARIANCE  | 75                                         | Card   contract     | Variance   for Direct debit Statement option  | Credit                     | | TARIFF_PLAN                 | FEE_PLAN_01                                | Any   Contract      | Fee plan   management                         | Credit, Prepaid             | | TARIFF_PLAN                 | FEE_PLAN_02                                | Any   Contract      | Fee plan   management                         | Credit, Prepaid             | | TARIFF_PLAN                 | FEE_PLAN_03                                | Any   Contract      | Fee plan   management                         | Credit                     |                   
     * @param {Number} contractId Unique technical contract identifier generated by the CMS.  The identifier is generated when contract (account or card) creation finishes successfully and is returned in:   * account contract creation response (`POST /accounts`, field: `accountContractId`).   * card contract creation response (`POST /cards`, field: `cardContractId`). 
     * @param {Array.<String>} parameterCodes The list of contract parameters which should be returned.  Note: Response will contain only specified parameter codes that does exist in the CMS. If none exists or a list does not contain any value then the response will not return any data (HTTP 200 will be returned with an empty array `[]`).  *Disclaimer: Possible values which can be sent must be defined by MP and Issuer during the onboarding process.* 
     * @param {module:api/ParameterApi~getContractParametersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContractParameters}
     */
    getContractParameters(contractId, parameterCodes, callback) {
      let postBody = null;
      // verify the required parameter 'contractId' is set
      if (contractId === undefined || contractId === null) {
        throw new Error("Missing the required parameter 'contractId' when calling getContractParameters");
      }
      // verify the required parameter 'parameterCodes' is set
      if (parameterCodes === undefined || parameterCodes === null) {
        throw new Error("Missing the required parameter 'parameterCodes' when calling getContractParameters");
      }

      let pathParams = {
        'contract_id': contractId
      };
      let queryParams = {
        'parameter_codes': this.apiClient.buildCollectionParam(parameterCodes, 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = ContractParameters;
      return this.apiClient.callApi(
        '/contracts/{contract_id}/parameters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setContractParameter operation.
     * @callback module:api/ParameterApi~setContractParameterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets up or changes a contract's parameter value.
     * Operation name: `setContractParameter`  Operation is used to set or change the contract (**account contract** or **card contract**) parameter value.  Contract parameters are used for storing the product configuration values. For example, contract parameters can store:   * chosen billing day (for credit card)   * the profile of the fees   * the profile of the interest  The set of allowed contract parameters for the contract depends on the product based on which the contract is created. A list of possible contract parameter codes will be defined during the card product implementation project.  Available parameters in the standard product with possible values: | `parameter_code`            | `parameterValue`                           | **Contract level**  | **Description**                               | **Product applicability**  | |---------------------------- |------------------------------------------- |-------------------- |---------------------------------------------- |--------------------------- | | FUNCTIONAL_DATES            | DATE_PLAN_01                               | Account   Contract  | Functional   dates plan management            | Prepaid                    | | FUNCTIONAL_DATES            | DATE_PLAN_02                               | Account   Contract  | Functional   dates plan management            | Prepaid                    | | GL_PLAN                     | GL_PLAN_01                                 | Account   Contract  | GL plan   management                          | Credit                     | | INTEREST_PLAN               | INT_PLAN_01                                | Account   Contract  | Interest   plan management                    | Credit                     | | INTEREST_PLAN               | INT_PLAN_02                                | Account   Contract  | Interest   plan management                    | Credit                     |  | INTEREST_PLAN               | INT_PLAN_03                                | Account   Contract  | Interest   plan management                    | Credit                     |  | MTP_OPTION                  | MTP_OPTION_01                              | Account   Contract  | MTP   option management                       | Credit                     | | MTP_OPTION                  | MTP_OPTION_02                               | Account   Contract  | MTP   option management                       | Credit                     | | SDD_AGREED_TO_PAY_VARIANCE  | NULL                                       | Card   contract     | Variance   for Direct debit Statement option  | Credit                     | | SDD_AGREED_TO_PAY_VARIANCE  | 10                                         | Card   contract     | Variance   for Direct debit Statement option  | Credit                     |         | SDD_AGREED_TO_PAY_VARIANCE  | 20                                         | Card   contract     | Variance   for Direct debit Statement option  | Credit                     |  | SDD_AGREED_TO_PAY_VARIANCE  | 30                                         | Card   contract     | Variance   for Direct debit Statement option  | Credit                     |  | SDD_AGREED_TO_PAY_VARIANCE  | 50                                          | Card   contract     | Variance   for Direct debit Statement option  | Credit                     | | SDD_AGREED_TO_PAY_VARIANCE  | 75                                         | Card   contract     | Variance   for Direct debit Statement option  | Credit                     | | TARIFF_PLAN                 | FEE_PLAN_01                                 | Any   Contract      | Fee plan   management                         | Credit, Prepaid             | | TARIFF_PLAN                 | FEE_PLAN_02                                 | Any   Contract      | Fee plan   management                         | Credit, Prepaid             | | TARIFF_PLAN                 | FEE_PLAN_03                                | Any   Contract      | Fee plan   management                         | Credit                     | 
     * @param {Number} contractId Unique technical contract identifier generated by the CMS.  The identifier is generated when contract (account or card) creation finishes successfully and is returned in:   * account contract creation response (`POST /accounts`, field: `accountContractId`).   * card contract creation response (`POST /cards`, field: `cardContractId`). 
     * @param {String} parameterCode Code of the contract parameter for which the value will be set.  *Disclaimer: Parameter codes are configured in the MP's CMS and the Issuer is allowed to use only the value configured by the MP (the Issuer cannot use their own values).* 
     * @param {module:model/ParameterModification} parameterModification 
     * @param {module:api/ParameterApi~setContractParameterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setContractParameter(contractId, parameterCode, parameterModification, callback) {
      let postBody = parameterModification;
      // verify the required parameter 'contractId' is set
      if (contractId === undefined || contractId === null) {
        throw new Error("Missing the required parameter 'contractId' when calling setContractParameter");
      }
      // verify the required parameter 'parameterCode' is set
      if (parameterCode === undefined || parameterCode === null) {
        throw new Error("Missing the required parameter 'parameterCode' when calling setContractParameter");
      }
      // verify the required parameter 'parameterModification' is set
      if (parameterModification === undefined || parameterModification === null) {
        throw new Error("Missing the required parameter 'parameterModification' when calling setContractParameter");
      }

      let pathParams = {
        'contract_id': contractId,
        'parameter_code': parameterCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json;charset=utf-8'];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = null;
      return this.apiClient.callApi(
        '/contracts/{contract_id}/parameters/{parameter_code}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
