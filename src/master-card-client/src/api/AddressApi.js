/**
 * Mastercard Processing Core API
 * OpenAPI Specification for MP (Mastercard Processing) **Core**.  This documentation describes what functionalities are exposed by the MP's CMS (Card Management System) and are available to be used by the Issuer. The Issuer is the primary actor who executes the operations. Whenever the Issuer wishes to onboard its customers to the card program, they may use API to:  * create and manage **client**  * create and manage **contracts**, there are two types of contracts in the MP's CMS:    * **account contract**    * **card contract**  Later, during the card lifecycle, the Issuer can also manage other objects related to the client and the contract (account or card):  * manage **card plastic**  * create, manage and retrieve **additional addresses** (for the client and the contract)  * manage and retrieve **classifiers** (for the client and the contract)  * manage and retrieve **custom data** (for the client and the contract)  * manage and retrieve **parameters** (for the contract)  * set or retrieve **service limit tariff** (for the contract)  * post or retrieve **transactions** (for the contract)  * manage and retrieve **usage limits** (for the contract)  *** API uses RESTful protocol via HTTP to execute POST, PUT, GET and PATCH operations sent to given endpoints, e.g. `/clients`.  API uses JSON Web Encryption compact serialization for payload encryption for all API operations. *** External documentation:   * [ISO 4217 - Currency Codes](https://www.iso.org/iso-4217-currency-codes.html)   * [ISO 3166 - Country Codes](https://www.iso.org/iso-3166-country-codes.html)   * [Internet Engineering Task Force (IETF) BCP 47 standard](https://tools.ietf.org/html/bcp47#appendix-A)   * [JSON Web Encryption](https://developer.mastercard.com/platform/documentation/security-and-authentication/securing-sensitive-data-using-payload-encryption/#jwe-encryption)   * [Internet Engineering Task Force (IETF) RFC7232](https://datatracker.ietf.org/doc/html/rfc7232)   * [JSON Merge Patch](https://datatracker.ietf.org/doc/html/rfc7386) *** 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddressCreation from '../model/AddressCreation';
import AddressModification from '../model/AddressModification';
import ClientAddresses from '../model/ClientAddresses';
import ContractAddresses from '../model/ContractAddresses';
import ErrorWrapper from '../model/ErrorWrapper';

/**
* Address service.
* @module api/AddressApi
* @version 1.0.0
*/
export default class AddressApi {

    /**
    * Constructs a new AddressApi. 
    * @alias module:api/AddressApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addClientAddress operation.
     * @callback module:api/AddressApi~addClientAddressCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an address for a client
     * Operation name: `addClientAddress`  Operation is used to add an additional address for a specified client object.  MP's CMS allows to store many additional addresses related to the client. Each address type which will be added must be predefined in the CMS system.  The additional address can be used to store for example:   * statement delivery address.   * PIN mailer delivery address. 
     * @param {Number} clientId Unique technical client identifier, generated by the MP's CMS database engine. The identifier is generated when client creation finishes successfully and is returned in a client creation response (`POST /clients`, field `clientId`). 
     * @param {module:model/AddressCreation} addressCreation 
     * @param {Object} opts Optional parameters
     * @param {String} [idempotencyKey] Unique identifier generated by the issuer. Mastercard Processing uses this identifier to recognize subsequent retries of the same request and ensure idempotent behaviour by sending the same response without repeating the operation again. 
     * @param {module:api/AddressApi~addClientAddressCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addClientAddress(clientId, addressCreation, opts, callback) {
      opts = opts || {};
      let postBody = addressCreation;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling addClientAddress");
      }
      // verify the required parameter 'addressCreation' is set
      if (addressCreation === undefined || addressCreation === null) {
        throw new Error("Missing the required parameter 'addressCreation' when calling addClientAddress");
      }

      let pathParams = {
        'client_id': clientId
      };
      let queryParams = {
      };
      let headerParams = {
        'Idempotency-Key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json;charset=utf-8'];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = null;
      return this.apiClient.callApi(
        '/clients/{client_id}/addresses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addContractAddress operation.
     * @callback module:api/AddressApi~addContractAddressCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an address for the contract (account contract or card contract)
     * Operation name: `addContractAddress`  Operation is used to add an additional address for a specified contract (**account contract** or **card contract**).  MP's CMS allows to store many additional addresses related to the contract. Each address type which will be added must be predefined in the CMS system.  Additional address can be used to store for example:   * statement delivery address.   * PIN mailer delivery address 
     * @param {Number} contractId Unique technical contract identifier generated by the CMS.  The identifier is generated when contract (account or card) creation finishes successfully and is returned in:   * account contract creation response (`POST /accounts`, field: `accountContractId`).   * card contract creation response (`POST /cards`, field: `cardContractId`). 
     * @param {module:model/AddressCreation} addressCreation 
     * @param {Object} opts Optional parameters
     * @param {String} [idempotencyKey] Unique identifier generated by the issuer. Mastercard Processing uses this identifier to recognize subsequent retries of the same request and ensure idempotent behaviour by sending the same response without repeating the operation again. 
     * @param {module:api/AddressApi~addContractAddressCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addContractAddress(contractId, addressCreation, opts, callback) {
      opts = opts || {};
      let postBody = addressCreation;
      // verify the required parameter 'contractId' is set
      if (contractId === undefined || contractId === null) {
        throw new Error("Missing the required parameter 'contractId' when calling addContractAddress");
      }
      // verify the required parameter 'addressCreation' is set
      if (addressCreation === undefined || addressCreation === null) {
        throw new Error("Missing the required parameter 'addressCreation' when calling addContractAddress");
      }

      let pathParams = {
        'contract_id': contractId
      };
      let queryParams = {
      };
      let headerParams = {
        'Idempotency-Key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json;charset=utf-8'];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = null;
      return this.apiClient.callApi(
        '/contracts/{contract_id}/addresses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClientAddresses operation.
     * @callback module:api/AddressApi~getClientAddressesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientAddresses} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of addresses for the client
     * Operation name: `getClientAddresses`  Operation is used to retrieve a list of additional addresses assigned to the specified client object. 
     * @param {Number} clientId Unique technical client identifier, generated by the MP's CMS database engine. The identifier is generated when client creation finishes successfully and is returned in a client creation response (`POST /clients`, field `clientId`). 
     * @param {module:api/AddressApi~getClientAddressesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClientAddresses}
     */
    getClientAddresses(clientId, callback) {
      let postBody = null;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getClientAddresses");
      }

      let pathParams = {
        'client_id': clientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = ClientAddresses;
      return this.apiClient.callApi(
        '/clients/{client_id}/addresses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContractAddresses operation.
     * @callback module:api/AddressApi~getContractAddressesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContractAddresses} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of addresses for the contract (account contract or card contract)
     * Operation name: `getContractAddresses`  Operation is used to retrieve a list of additional addresses assigned to the specified contract (**account contract** or **card contract**). 
     * @param {Number} contractId Unique technical contract identifier generated by the CMS.  The identifier is generated when contract (account or card) creation finishes successfully and is returned in:   * account contract creation response (`POST /accounts`, field: `accountContractId`).   * card contract creation response (`POST /cards`, field: `cardContractId`). 
     * @param {module:api/AddressApi~getContractAddressesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContractAddresses}
     */
    getContractAddresses(contractId, callback) {
      let postBody = null;
      // verify the required parameter 'contractId' is set
      if (contractId === undefined || contractId === null) {
        throw new Error("Missing the required parameter 'contractId' when calling getContractAddresses");
      }

      let pathParams = {
        'contract_id': contractId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = ContractAddresses;
      return this.apiClient.callApi(
        '/contracts/{contract_id}/addresses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateClientAddress operation.
     * @callback module:api/AddressApi~updateClientAddressCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an address of a selected type for the client
     * Operation name: `updateClientAddress`  Operation is used to update the additional address for a specified client object. 
     * @param {Number} clientId Unique technical client identifier, generated by the MP's CMS database engine. The identifier is generated when client creation finishes successfully and is returned in a client creation response (`POST /clients`, field `clientId`). 
     * @param {String} addressType Address type. Additional addresses allow to store any address related to the client or contract (account contract or card contract).  | **Default possible values**  | **Description**              | |----------------------------- |----------------------------- | | PIN                          | PIN mailer delivery address  | | STMT                         | Statement delivery address   |  *Disclaimer: Possible values which can be sent must be defined by MP and Issuer during the onboarding process as they are configured in the CMS system.* 
     * @param {module:model/AddressModification} addressModification 
     * @param {module:api/AddressApi~updateClientAddressCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateClientAddress(clientId, addressType, addressModification, callback) {
      let postBody = addressModification;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling updateClientAddress");
      }
      // verify the required parameter 'addressType' is set
      if (addressType === undefined || addressType === null) {
        throw new Error("Missing the required parameter 'addressType' when calling updateClientAddress");
      }
      // verify the required parameter 'addressModification' is set
      if (addressModification === undefined || addressModification === null) {
        throw new Error("Missing the required parameter 'addressModification' when calling updateClientAddress");
      }

      let pathParams = {
        'client_id': clientId,
        'address_type': addressType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json;charset=utf-8'];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = null;
      return this.apiClient.callApi(
        '/clients/{client_id}/addresses/{address_type}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateContractAddress operation.
     * @callback module:api/AddressApi~updateContractAddressCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an address of a selected type for the contract (account contract or card contract)
     * Operation name: `updateContractAddress`  Operation is used to update the additional address for a specified contract (**account contract** or **card contract**). 
     * @param {Number} contractId Unique technical contract identifier generated by the CMS.  The identifier is generated when contract (account or card) creation finishes successfully and is returned in:   * account contract creation response (`POST /accounts`, field: `accountContractId`).   * card contract creation response (`POST /cards`, field: `cardContractId`). 
     * @param {String} addressType Address type. Additional addresses allow to store any address related to the client or contract (account contract or card contract).  | **Default possible values**  | **Description**              | |----------------------------- |----------------------------- | | PIN                          | PIN mailer delivery address  | | STMT                         | Statement delivery address   |  *Disclaimer: Possible values which can be sent must be defined by MP and Issuer during the onboarding process as they are configured in the CMS system.* 
     * @param {module:model/AddressModification} addressModification 
     * @param {module:api/AddressApi~updateContractAddressCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateContractAddress(contractId, addressType, addressModification, callback) {
      let postBody = addressModification;
      // verify the required parameter 'contractId' is set
      if (contractId === undefined || contractId === null) {
        throw new Error("Missing the required parameter 'contractId' when calling updateContractAddress");
      }
      // verify the required parameter 'addressType' is set
      if (addressType === undefined || addressType === null) {
        throw new Error("Missing the required parameter 'addressType' when calling updateContractAddress");
      }
      // verify the required parameter 'addressModification' is set
      if (addressModification === undefined || addressModification === null) {
        throw new Error("Missing the required parameter 'addressModification' when calling updateContractAddress");
      }

      let pathParams = {
        'contract_id': contractId,
        'address_type': addressType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json;charset=utf-8'];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = null;
      return this.apiClient.callApi(
        '/contracts/{contract_id}/addresses/{address_type}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
