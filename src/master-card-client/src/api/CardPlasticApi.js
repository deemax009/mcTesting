/**
 * Mastercard Processing Core API
 * OpenAPI Specification for MP (Mastercard Processing) **Core**.  This documentation describes what functionalities are exposed by the MP's CMS (Card Management System) and are available to be used by the Issuer. The Issuer is the primary actor who executes the operations. Whenever the Issuer wishes to onboard its customers to the card program, they may use API to:  * create and manage **client**  * create and manage **contracts**, there are two types of contracts in the MP's CMS:    * **account contract**    * **card contract**  Later, during the card lifecycle, the Issuer can also manage other objects related to the client and the contract (account or card):  * manage **card plastic**  * create, manage and retrieve **additional addresses** (for the client and the contract)  * manage and retrieve **classifiers** (for the client and the contract)  * manage and retrieve **custom data** (for the client and the contract)  * manage and retrieve **parameters** (for the contract)  * set or retrieve **service limit tariff** (for the contract)  * post or retrieve **transactions** (for the contract)  * manage and retrieve **usage limits** (for the contract)  *** API uses RESTful protocol via HTTP to execute POST, PUT, GET and PATCH operations sent to given endpoints, e.g. `/clients`.  API uses JSON Web Encryption compact serialization for payload encryption for all API operations. *** External documentation:   * [ISO 4217 - Currency Codes](https://www.iso.org/iso-4217-currency-codes.html)   * [ISO 3166 - Country Codes](https://www.iso.org/iso-3166-country-codes.html)   * [Internet Engineering Task Force (IETF) BCP 47 standard](https://tools.ietf.org/html/bcp47#appendix-A)   * [JSON Web Encryption](https://developer.mastercard.com/platform/documentation/security-and-authentication/securing-sensitive-data-using-payload-encryption/#jwe-encryption)   * [Internet Engineering Task Force (IETF) RFC7232](https://datatracker.ietf.org/doc/html/rfc7232)   * [JSON Merge Patch](https://datatracker.ietf.org/doc/html/rfc7386) *** 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CardContractActivation from '../model/CardContractActivation';
import CardContractPlastics from '../model/CardContractPlastics';
import CardContractReissue from '../model/CardContractReissue';
import Cvc from '../model/Cvc';
import CvcSearchCriteria from '../model/CvcSearchCriteria';
import CvcVerification from '../model/CvcVerification';
import CvcVerificationResult from '../model/CvcVerificationResult';
import EncryptedPin from '../model/EncryptedPin';
import ErrorWrapper from '../model/ErrorWrapper';
import PinCreation from '../model/PinCreation';
import PinSearchCriteria from '../model/PinSearchCriteria';
import PinVerification from '../model/PinVerification';
import PinVerificationResult from '../model/PinVerificationResult';
import ReissuedCardContract from '../model/ReissuedCardContract';

/**
* CardPlastic service.
* @module api/CardPlasticApi
* @version 1.0.0
*/
export default class CardPlasticApi {

    /**
    * Constructs a new CardPlasticApi. 
    * @alias module:api/CardPlasticApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the activateCard operation.
     * @callback module:api/CardPlasticApi~activateCardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activates a card plastic and unlocks the card for transaction use.
     * Operation name: `activateCard`  Operation is used to activate a card plastic for transaction use. When a new card contract is created, usually a card plastic is produced with the status `Locked` to prevent the card from unauthorized transactions. If the card plastic status is `Locked`, the cardholder is not able to perform any transactions as they will be rejected. Plastic activation unlocks the plastic and allows the cardholder to use it in POS, e-commerce, ATM, etc. 
     * @param {Number} cardContractId Unique technical identifier for a card contract generated by the MP's CMS. The identifier is generated when card contract creation finishes successfully and is returned in a card contract creation response (`POST /cards`). 
     * @param {module:model/CardContractActivation} cardContractActivation 
     * @param {module:api/CardPlasticApi~activateCardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    activateCard(cardContractId, cardContractActivation, callback) {
      let postBody = cardContractActivation;
      // verify the required parameter 'cardContractId' is set
      if (cardContractId === undefined || cardContractId === null) {
        throw new Error("Missing the required parameter 'cardContractId' when calling activateCard");
      }
      // verify the required parameter 'cardContractActivation' is set
      if (cardContractActivation === undefined || cardContractActivation === null) {
        throw new Error("Missing the required parameter 'cardContractActivation' when calling activateCard");
      }

      let pathParams = {
        'card_contract_id': cardContractId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json;charset=utf-8'];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{card_contract_id}/active', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCardPlastics operation.
     * @callback module:api/CardPlasticApi~getCardPlasticsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CardContractPlastics} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about all card plastics for a specified card contract
     * Operation name: `getCardPlastics`  Operation is used to retrieve information about all card plastics created under a specified card contract.  Each card plastic has a sequential number assigned. The card plastic number sequence starts with 1 and is increased by 1 for each reissued card, whenever a new card plastic is created under the same card contract. 
     * @param {Number} cardContractId Unique technical identifier for a card contract generated by the MP's CMS. The identifier is generated when card contract creation finishes successfully and is returned in a card contract creation response (`POST /cards`). 
     * @param {module:api/CardPlasticApi~getCardPlasticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardContractPlastics}
     */
    getCardPlastics(cardContractId, callback) {
      let postBody = null;
      // verify the required parameter 'cardContractId' is set
      if (cardContractId === undefined || cardContractId === null) {
        throw new Error("Missing the required parameter 'cardContractId' when calling getCardPlastics");
      }

      let pathParams = {
        'card_contract_id': cardContractId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = CardContractPlastics;
      return this.apiClient.callApi(
        '/cards/{card_contract_id}/plastics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCvc operation.
     * @callback module:api/CardPlasticApi~getCvcCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Cvc} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a CVC2 for a card plastic
     * Operation name: `getCvc`  Operation is used to retrieve a Card Verification Code (CVC2) for a given card plastic (card plastic exists also for a virtual card - is not always a physical card) from MP's CMS.    If there is no `cardContractId` matching the requested `expiryDate` HTTP 404 error with `INVALID_EXPIRY_DATE` `reasonCode` will be returned. 
     * @param {Number} cardContractId Unique technical identifier for a card contract generated by the MP's CMS. The identifier is generated when card contract creation finishes successfully and is returned in a card contract creation response (`POST /cards`). 
     * @param {module:model/CvcSearchCriteria} cvcSearchCriteria 
     * @param {Object} opts Optional parameters
     * @param {String} [customerPublicRsaKey] Public RSA key generated by the Issuer. ASCII/UTF-8 string of characters 0-9, A-F, ASN.1 DER Public hex unpacked to string or PEM concatenated Base64 without BEGIN and END lines.  Key is used to encrypt sensitive data returned by the MP in the response. 
     * @param {String} [idempotencyKey] Unique identifier generated by the issuer. Mastercard Processing uses this identifier to recognize subsequent retries of the same request and ensure idempotent behaviour by sending the same response without repeating the operation again. 
     * @param {module:api/CardPlasticApi~getCvcCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Cvc}
     */
    getCvc(cardContractId, cvcSearchCriteria, opts, callback) {
      opts = opts || {};
      let postBody = cvcSearchCriteria;
      // verify the required parameter 'cardContractId' is set
      if (cardContractId === undefined || cardContractId === null) {
        throw new Error("Missing the required parameter 'cardContractId' when calling getCvc");
      }
      // verify the required parameter 'cvcSearchCriteria' is set
      if (cvcSearchCriteria === undefined || cvcSearchCriteria === null) {
        throw new Error("Missing the required parameter 'cvcSearchCriteria' when calling getCvc");
      }

      let pathParams = {
        'card_contract_id': cardContractId
      };
      let queryParams = {
      };
      let headerParams = {
        'Customer-Public-Rsa-Key': opts['customerPublicRsaKey'],
        'Idempotency-Key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json;charset=utf-8'];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = Cvc;
      return this.apiClient.callApi(
        '/cards/{card_contract_id}/card-verification-codes/searches', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPin operation.
     * @callback module:api/CardPlasticApi~getPinCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EncryptedPin} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a PIN for a card plastic
     * Operation name: `getPin`  Operation is used to retrieve from MP's CMS the PIN defined for given card plastic (in the CMS card plastic exists also for a virtual card - card plastic is not always a physical card).  Note: If there is more than one card plastic with the same value of expiry date then the CMS system retrieves the PIN from the plastic which is currently treated as active by the CMS system.  The PIN is always retrieved in a secured way - asymmetric encryption is used. MP will encrypt the PIN returned in the response with public RSA key passed in request message in the `Customer-Public-Rsa-Key` header. The Public RSA key will be generated by the Issuer and the Issuer will have a matching private key that can be used to decrypt the PIN value.  Note: Apart from above symmetric encryption payload JWE encryption is used. 
     * @param {Number} cardContractId Unique technical identifier for a card contract generated by the MP's CMS. The identifier is generated when card contract creation finishes successfully and is returned in a card contract creation response (`POST /cards`). 
     * @param {String} customerPublicRsaKey Public RSA key generated by the Issuer. ASCII/UTF-8 string of characters 0-9, A-F, ASN.1 DER Public hex unpacked to string or PEM concatenated Base64 without BEGIN and END lines.  Key is used to encrypt sensitive data (`encryptedCardContractNumber`, `encryptedZpk`) returned by the MP in the response. 
     * @param {module:model/PinSearchCriteria} pinSearchCriteria 
     * @param {Object} opts Optional parameters
     * @param {String} [idempotencyKey] Unique identifier generated by the issuer. Mastercard Processing uses this identifier to recognize subsequent retries of the same request and ensure idempotent behaviour by sending the same response without repeating the operation again. 
     * @param {module:api/CardPlasticApi~getPinCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EncryptedPin}
     */
    getPin(cardContractId, customerPublicRsaKey, pinSearchCriteria, opts, callback) {
      opts = opts || {};
      let postBody = pinSearchCriteria;
      // verify the required parameter 'cardContractId' is set
      if (cardContractId === undefined || cardContractId === null) {
        throw new Error("Missing the required parameter 'cardContractId' when calling getPin");
      }
      // verify the required parameter 'customerPublicRsaKey' is set
      if (customerPublicRsaKey === undefined || customerPublicRsaKey === null) {
        throw new Error("Missing the required parameter 'customerPublicRsaKey' when calling getPin");
      }
      // verify the required parameter 'pinSearchCriteria' is set
      if (pinSearchCriteria === undefined || pinSearchCriteria === null) {
        throw new Error("Missing the required parameter 'pinSearchCriteria' when calling getPin");
      }

      let pathParams = {
        'card_contract_id': cardContractId
      };
      let queryParams = {
      };
      let headerParams = {
        'Customer-Public-Rsa-Key': customerPublicRsaKey,
        'Idempotency-Key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json;charset=utf-8'];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = EncryptedPin;
      return this.apiClient.callApi(
        '/cards/{card_contract_id}/pins/searches', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reissueCard operation.
     * @callback module:api/CardPlasticApi~reissueCardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReissuedCardContract} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reissues a card
     * Operation name: `reissueCard`  Operation is used to create a new card plastic object for a given card contract. By triggering the operation, the Issuer may execute the following cases:   * issue a physical card for a virtual card   * reissue an existing card (duplicate physical card, e.g. due to damage, ...)   * renew an existing card   * replace an existing card  In each case, a new card plastic object is created for a given card contract and the card plastic sequential number for the new object is incremented by 1.  Note: `newCardContractNumber` is not used when:   * `reissueType` defines that a new card contract is not created (only a new `Plastic` is created under the same card contract)   * `reissueType` defines that a card contract will be replaced with a PIN inheritance (the MP's CMS generates `newCardContractNumber` in this case) 
     * @param {Number} cardContractId Unique technical identifier for a card contract generated by the MP's CMS. The identifier is generated when card contract creation finishes successfully and is returned in a card contract creation response (`POST /cards`). 
     * @param {module:model/CardContractReissue} cardContractReissue 
     * @param {Object} opts Optional parameters
     * @param {String} [idempotencyKey] Unique identifier generated by the issuer. Mastercard Processing uses this identifier to recognize subsequent retries of the same request and ensure idempotent behaviour by sending the same response without repeating the operation again. 
     * @param {module:api/CardPlasticApi~reissueCardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReissuedCardContract}
     */
    reissueCard(cardContractId, cardContractReissue, opts, callback) {
      opts = opts || {};
      let postBody = cardContractReissue;
      // verify the required parameter 'cardContractId' is set
      if (cardContractId === undefined || cardContractId === null) {
        throw new Error("Missing the required parameter 'cardContractId' when calling reissueCard");
      }
      // verify the required parameter 'cardContractReissue' is set
      if (cardContractReissue === undefined || cardContractReissue === null) {
        throw new Error("Missing the required parameter 'cardContractReissue' when calling reissueCard");
      }

      let pathParams = {
        'card_contract_id': cardContractId
      };
      let queryParams = {
      };
      let headerParams = {
        'Idempotency-Key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json;charset=utf-8'];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = ReissuedCardContract;
      return this.apiClient.callApi(
        '/cards/{card_contract_id}/plastics', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setPin operation.
     * @callback module:api/CardPlasticApi~setPinCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets up new PIN for a card plastic
     * Operation name: `setPin`  Operation is used to set PIN for a card plastic. The card must have a PIN defined before a physical card is produced. MP's CMS does not validate the old PIN.  The Issuer is not allowed to send PIN value in clear text, instead, a PIN block shall be sent. Additionally, the PIN block must be encrypted.  The following encryption options are allowed:   * **Symmetric** - a PIN block is secured with a ZPK (Zone Pin Key, exchanged with MP during the onboarding process).        When the ZPK encryption is used, the PIN block must be in ISO format 0.   * **Asymmetric** - a PIN block is secured with a public RSA key received from MP's CMS in `GET /public-keys` response (API operation: `getPublicRsaKey`).        When the public RSA key encryption is used, the PIN block may be in ISO format 0 or format 1 (depending on the MP API configuration). In such case, the PIN block length is up to 2048 characters. A permitted value format is an ASCII/UTF-8 string of characters 0-9,A-F (ASN.1 DER cryptogram hex unpacked to string).  Note: Apart from the above encryption (symmetric or asymmetric) payload JWE encryption is used.  PIN block ISO formats usage:   * **ISO-0 format** is used when full `cardContractNumber`(PAN) is known to the Issuer (usually for PCI-compliant Issuers).   * **ISO-1 format** is used when full `cardContractNumber`(PAN) is not known to the Issuer (usually for non-PCI-compliant Issuers). 
     * @param {Number} cardContractId Unique technical identifier for a card contract generated by the MP's CMS. The identifier is generated when card contract creation finishes successfully and is returned in a card contract creation response (`POST /cards`). 
     * @param {module:model/PinCreation} pinCreation 
     * @param {Object} opts Optional parameters
     * @param {String} [keyIndex] Index of the MP's public RSA key received in a `GET /public-keys` response (API operation: `getPublicRsaKey`).  If `Key-Index` is provided, then the `newPinBlock` field must be encrypted using the MP's public RSA key received together with the `Key-Index` from the MP in `GET /public-keys` response (API operation: `getPublicRsaKey`). 
     * @param {module:api/CardPlasticApi~setPinCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setPin(cardContractId, pinCreation, opts, callback) {
      opts = opts || {};
      let postBody = pinCreation;
      // verify the required parameter 'cardContractId' is set
      if (cardContractId === undefined || cardContractId === null) {
        throw new Error("Missing the required parameter 'cardContractId' when calling setPin");
      }
      // verify the required parameter 'pinCreation' is set
      if (pinCreation === undefined || pinCreation === null) {
        throw new Error("Missing the required parameter 'pinCreation' when calling setPin");
      }

      let pathParams = {
        'card_contract_id': cardContractId
      };
      let queryParams = {
      };
      let headerParams = {
        'Key-Index': opts['keyIndex']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json;charset=utf-8'];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{card_contract_id}/pin', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the verifyCvc operation.
     * @callback module:api/CardPlasticApi~verifyCvcCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CvcVerificationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verifies a CVC2 of specific card plastic
     * Operation name: `verifyCvc`  Operation is used to verify a Card Verification Code 2 (CVC2) for specified card plastic (in the CMS card plastic exists also for a virtual card - card plastic is not always a physical card).  The verification result is returned in the response. 
     * @param {Number} cardContractId Unique technical identifier for a card contract generated by the MP's CMS. The identifier is generated when card contract creation finishes successfully and is returned in a card contract creation response (`POST /cards`). 
     * @param {module:model/CvcVerification} cvcVerification 
     * @param {Object} opts Optional parameters
     * @param {String} [idempotencyKey] Unique identifier generated by the issuer. Mastercard Processing uses this identifier to recognize subsequent retries of the same request and ensure idempotent behaviour by sending the same response without repeating the operation again. 
     * @param {module:api/CardPlasticApi~verifyCvcCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CvcVerificationResult}
     */
    verifyCvc(cardContractId, cvcVerification, opts, callback) {
      opts = opts || {};
      let postBody = cvcVerification;
      // verify the required parameter 'cardContractId' is set
      if (cardContractId === undefined || cardContractId === null) {
        throw new Error("Missing the required parameter 'cardContractId' when calling verifyCvc");
      }
      // verify the required parameter 'cvcVerification' is set
      if (cvcVerification === undefined || cvcVerification === null) {
        throw new Error("Missing the required parameter 'cvcVerification' when calling verifyCvc");
      }

      let pathParams = {
        'card_contract_id': cardContractId
      };
      let queryParams = {
      };
      let headerParams = {
        'Idempotency-Key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json;charset=utf-8'];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = CvcVerificationResult;
      return this.apiClient.callApi(
        '/cards/{card_contract_id}/card-verification-codes/verifications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the verifyPin operation.
     * @callback module:api/CardPlasticApi~verifyPinCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PinVerificationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verifies a PIN
     * Operation name: `verifyPin`  Operation is used to verify the PIN for specified card plastic (in the CMS card plastic exists also for a virtual card - card plastic is not always a physical card).  The Issuer is not allowed to send the PIN value in clear text, instead, PIN block shall be sent. Additionally, the PIN block must be encrypted.  The following encryption options are allowed:   * **Symmetric** - the PIN block secured with ZPK (Zone Pin Key, exchanged with MP).     When ZPK encryption is used, the PIN block must be in ISO format 0.   * **Asymmetric** - the PIN block secured with public RSA key received from MP's CMS in `GET /public-keys` response (API operation: `getPublicRsaKey`).     When public RSA key encryption is used, the PIN block may be in ISO format 0 or format 1 (depending on MP API configuration).     In such case, PIN block length is up to 2048 characters. ASCII/UTF-8 string of characters 0-9,A-F (ASN.1 DER cryptogram hex unpacked to string).    Note: Apart from the above encryption (symmetric or asymmetric) payload JWE encryption is used.  PIN block ISO formats usage:   * **ISO-0** format is used when full `cardContractNumber`(PAN) is known to the Issuer (usually for PCI-compliant Issuers).   * **ISO-1** format is used when full `cardContractNumber`(PAN) is not known to the Issuer (usually for non-PCI-compliant Issuers).  The verification result is returned in response.  Note: If there is more than one card plastic with the same value of expiry date then the CMS system will verify provided PIN with the PIN from the plastic currently treated as active by the CMS system. 
     * @param {Number} cardContractId Unique technical identifier for a card contract generated by the MP's CMS. The identifier is generated when card contract creation finishes successfully and is returned in a card contract creation response (`POST /cards`). 
     * @param {module:model/PinVerification} pinVerification 
     * @param {Object} opts Optional parameters
     * @param {String} [keyIndex] Index of the MP's public RSA key received in a `GET /public-keys` response (API operation: `getPublicRsaKey`).  If `Key-Index` is provided, then the `newPinBlock` field must be encrypted using the MP's public RSA key received together with the `Key-Index` from the MP in `GET /public-keys` response (API operation: `getPublicRsaKey`). 
     * @param {String} [idempotencyKey] Unique identifier generated by the issuer. Mastercard Processing uses this identifier to recognize subsequent retries of the same request and ensure idempotent behaviour by sending the same response without repeating the operation again. 
     * @param {module:api/CardPlasticApi~verifyPinCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PinVerificationResult}
     */
    verifyPin(cardContractId, pinVerification, opts, callback) {
      opts = opts || {};
      let postBody = pinVerification;
      // verify the required parameter 'cardContractId' is set
      if (cardContractId === undefined || cardContractId === null) {
        throw new Error("Missing the required parameter 'cardContractId' when calling verifyPin");
      }
      // verify the required parameter 'pinVerification' is set
      if (pinVerification === undefined || pinVerification === null) {
        throw new Error("Missing the required parameter 'pinVerification' when calling verifyPin");
      }

      let pathParams = {
        'card_contract_id': cardContractId
      };
      let queryParams = {
      };
      let headerParams = {
        'Key-Index': opts['keyIndex'],
        'Idempotency-Key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json;charset=utf-8'];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = PinVerificationResult;
      return this.apiClient.callApi(
        '/cards/{card_contract_id}/pins/verifications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
