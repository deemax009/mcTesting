/**
 * Mastercard Processing Core API
 * OpenAPI Specification for MP (Mastercard Processing) **Core**.  This documentation describes what functionalities are exposed by the MP's CMS (Card Management System) and are available to be used by the Issuer. The Issuer is the primary actor who executes the operations. Whenever the Issuer wishes to onboard its customers to the card program, they may use API to:  * create and manage **client**  * create and manage **contracts**, there are two types of contracts in the MP's CMS:    * **account contract**    * **card contract**  Later, during the card lifecycle, the Issuer can also manage other objects related to the client and the contract (account or card):  * manage **card plastic**  * create, manage and retrieve **additional addresses** (for the client and the contract)  * manage and retrieve **classifiers** (for the client and the contract)  * manage and retrieve **custom data** (for the client and the contract)  * manage and retrieve **parameters** (for the contract)  * set or retrieve **service limit tariff** (for the contract)  * post or retrieve **transactions** (for the contract)  * manage and retrieve **usage limits** (for the contract)  *** API uses RESTful protocol via HTTP to execute POST, PUT, GET and PATCH operations sent to given endpoints, e.g. `/clients`.  API uses JSON Web Encryption compact serialization for payload encryption for all API operations. *** External documentation:   * [ISO 4217 - Currency Codes](https://www.iso.org/iso-4217-currency-codes.html)   * [ISO 3166 - Country Codes](https://www.iso.org/iso-3166-country-codes.html)   * [Internet Engineering Task Force (IETF) BCP 47 standard](https://tools.ietf.org/html/bcp47#appendix-A)   * [JSON Web Encryption](https://developer.mastercard.com/platform/documentation/security-and-authentication/securing-sensitive-data-using-payload-encryption/#jwe-encryption)   * [Internet Engineering Task Force (IETF) RFC7232](https://datatracker.ietf.org/doc/html/rfc7232)   * [JSON Merge Patch](https://datatracker.ietf.org/doc/html/rfc7386) *** 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountContractIdentifier from '../model/AccountContractIdentifier';
import CardContractCreation from '../model/CardContractCreation';
import CardContractDetailsVerification from '../model/CardContractDetailsVerification';
import CardContractDetailsVerificationResult from '../model/CardContractDetailsVerificationResult';
import CardContractIdentifier from '../model/CardContractIdentifier';
import CardContractModification from '../model/CardContractModification';
import CardContractStatus from '../model/CardContractStatus';
import CardContractStatusWithReason from '../model/CardContractStatusWithReason';
import CardContractWithEncryptedCardContractNumber from '../model/CardContractWithEncryptedCardContractNumber';
import ClientIdentifier from '../model/ClientIdentifier';
import ErrorWrapper from '../model/ErrorWrapper';
import OnlinePinAttemptsClearance from '../model/OnlinePinAttemptsClearance';

/**
* CardContract service.
* @module api/CardContractApi
* @version 1.0.0
*/
export default class CardContractApi {

    /**
    * Constructs a new CardContractApi. 
    * @alias module:api/CardContractApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the changeCardContractClient operation.
     * @callback module:api/CardContractApi~changeCardContractClientCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Relinks a card contract to another client
     * Operation name: `changeCardContractClient`  Operation is used to associate the card contract with a different client (change of client - cardholder). 
     * @param {Number} cardContractId Unique technical identifier for a card contract generated by the MP's CMS. The identifier is generated when card contract creation finishes successfully and is returned in a card contract creation response (`POST /cards`). 
     * @param {module:model/ClientIdentifier} clientIdentifier 
     * @param {module:api/CardContractApi~changeCardContractClientCallback} callback The callback function, accepting three arguments: error, data, response
     */
    changeCardContractClient(cardContractId, clientIdentifier, callback) {
      let postBody = clientIdentifier;
      // verify the required parameter 'cardContractId' is set
      if (cardContractId === undefined || cardContractId === null) {
        throw new Error("Missing the required parameter 'cardContractId' when calling changeCardContractClient");
      }
      // verify the required parameter 'clientIdentifier' is set
      if (clientIdentifier === undefined || clientIdentifier === null) {
        throw new Error("Missing the required parameter 'clientIdentifier' when calling changeCardContractClient");
      }

      let pathParams = {
        'card_contract_id': cardContractId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json;charset=utf-8'];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{card_contract_id}/client-identifier', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the changeCardContractMainContract operation.
     * @callback module:api/CardContractApi~changeCardContractMainContractCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Relinks a card contract to another account contract
     * Operation name: `changeCardContractMainContract`  Operation is used to associate the card contract with a different account contract. 
     * @param {Number} cardContractId Unique technical identifier for a card contract generated by the MP's CMS. The identifier is generated when card contract creation finishes successfully and is returned in a card contract creation response (`POST /cards`). 
     * @param {module:model/AccountContractIdentifier} accountContractIdentifier 
     * @param {module:api/CardContractApi~changeCardContractMainContractCallback} callback The callback function, accepting three arguments: error, data, response
     */
    changeCardContractMainContract(cardContractId, accountContractIdentifier, callback) {
      let postBody = accountContractIdentifier;
      // verify the required parameter 'cardContractId' is set
      if (cardContractId === undefined || cardContractId === null) {
        throw new Error("Missing the required parameter 'cardContractId' when calling changeCardContractMainContract");
      }
      // verify the required parameter 'accountContractIdentifier' is set
      if (accountContractIdentifier === undefined || accountContractIdentifier === null) {
        throw new Error("Missing the required parameter 'accountContractIdentifier' when calling changeCardContractMainContract");
      }

      let pathParams = {
        'card_contract_id': cardContractId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json;charset=utf-8'];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{card_contract_id}/main-contract', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the changeCardContractStatus operation.
     * @callback module:api/CardContractApi~changeCardContractStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set new status for the card contract
     * Operation name: `changeCardContractStatus`  Operation is used to change the card contract status.  In the MP's CMS, the Issuer can set either a temporary status (which can be reversed) or a permanent one (without the possibility to change it afterwards). The change is possible according to the configured priorities of card contract statuses. A change to a status with lower priority is not possible. 
     * @param {Number} cardContractId Unique technical identifier for a card contract generated by the MP's CMS. The identifier is generated when card contract creation finishes successfully and is returned in a card contract creation response (`POST /cards`). 
     * @param {module:model/CardContractStatusWithReason} cardContractStatusWithReason 
     * @param {module:api/CardContractApi~changeCardContractStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    changeCardContractStatus(cardContractId, cardContractStatusWithReason, callback) {
      let postBody = cardContractStatusWithReason;
      // verify the required parameter 'cardContractId' is set
      if (cardContractId === undefined || cardContractId === null) {
        throw new Error("Missing the required parameter 'cardContractId' when calling changeCardContractStatus");
      }
      // verify the required parameter 'cardContractStatusWithReason' is set
      if (cardContractStatusWithReason === undefined || cardContractStatusWithReason === null) {
        throw new Error("Missing the required parameter 'cardContractStatusWithReason' when calling changeCardContractStatus");
      }

      let pathParams = {
        'card_contract_id': cardContractId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json;charset=utf-8'];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{card_contract_id}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clearOnlinePinAttempts operation.
     * @callback module:api/CardContractApi~clearOnlinePinAttemptsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resets Online PIN Try Counter
     * Operation name: `clearOnlinePinAttempts`  Operation is used to reset Online PIN Try Counter for a specified card contract. 
     * @param {Number} cardContractId Unique technical identifier for a card contract generated by the MP's CMS. The identifier is generated when card contract creation finishes successfully and is returned in a card contract creation response (`POST /cards`). 
     * @param {module:model/OnlinePinAttemptsClearance} onlinePinAttemptsClearance 
     * @param {module:api/CardContractApi~clearOnlinePinAttemptsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    clearOnlinePinAttempts(cardContractId, onlinePinAttemptsClearance, callback) {
      let postBody = onlinePinAttemptsClearance;
      // verify the required parameter 'cardContractId' is set
      if (cardContractId === undefined || cardContractId === null) {
        throw new Error("Missing the required parameter 'cardContractId' when calling clearOnlinePinAttempts");
      }
      // verify the required parameter 'onlinePinAttemptsClearance' is set
      if (onlinePinAttemptsClearance === undefined || onlinePinAttemptsClearance === null) {
        throw new Error("Missing the required parameter 'onlinePinAttemptsClearance' when calling clearOnlinePinAttempts");
      }

      let pathParams = {
        'card_contract_id': cardContractId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json;charset=utf-8'];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{card_contract_id}/online-pin-attempts-counter', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createCardContract operation.
     * @callback module:api/CardContractApi~createCardContractCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CardContractIdentifier} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a card contract
     * Operation name: `createCardContract`  Operation is used to create a card contract.  Card contract creation is the final step in the Issuer's onboarding into MP's CMS. To create a card contract, the Issuer must specify the `accountContractId`. If the `clientId` is not provided, MP's CMS will assign the same Client as the account contract owner.  Upon successful card contract creation, a unique card contract identifier is returned. 
     * @param {module:model/CardContractCreation} cardContractCreation 
     * @param {Object} opts Optional parameters
     * @param {String} [idempotencyKey] Unique identifier generated by the issuer. Mastercard Processing uses this identifier to recognize subsequent retries of the same request and ensure idempotent behaviour by sending the same response without repeating the operation again. 
     * @param {module:api/CardContractApi~createCardContractCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardContractIdentifier}
     */
    createCardContract(cardContractCreation, opts, callback) {
      opts = opts || {};
      let postBody = cardContractCreation;
      // verify the required parameter 'cardContractCreation' is set
      if (cardContractCreation === undefined || cardContractCreation === null) {
        throw new Error("Missing the required parameter 'cardContractCreation' when calling createCardContract");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Idempotency-Key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json;charset=utf-8'];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = CardContractIdentifier;
      return this.apiClient.callApi(
        '/cards', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCardContract operation.
     * @callback module:api/CardContractApi~getCardContractCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CardContractWithEncryptedCardContractNumber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a card contract
     * Operation name: `getCardContract`  Operation is used to retrieve details of a given card contract. 
     * @param {Number} cardContractId Unique technical identifier for a card contract generated by the MP's CMS. The identifier is generated when card contract creation finishes successfully and is returned in a card contract creation response (`POST /cards`). 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [fields] The response message can return only the data represented by field names specified in this field. The Issuer can choose any field name being returned for a card contract object or can leave the field empty (in such case all data will be returned). 
     * @param {String} [customerPublicRsaKey] Public RSA key generated by the Issuer. ASCII/UTF-8 string of characters 0-9, A-F, ASN.1 DER Public hex unpacked to string or PEM concatenated Base64 without BEGIN and END lines.  Key is used to encrypt sensitive data returned by the MP in the response. 
     * @param {module:api/CardContractApi~getCardContractCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardContractWithEncryptedCardContractNumber}
     */
    getCardContract(cardContractId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cardContractId' is set
      if (cardContractId === undefined || cardContractId === null) {
        throw new Error("Missing the required parameter 'cardContractId' when calling getCardContract");
      }

      let pathParams = {
        'card_contract_id': cardContractId
      };
      let queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
      };
      let headerParams = {
        'Customer-Public-Rsa-Key': opts['customerPublicRsaKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = CardContractWithEncryptedCardContractNumber;
      return this.apiClient.callApi(
        '/cards/{card_contract_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCardContractStatus operation.
     * @callback module:api/CardContractApi~getCardContractStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CardContractStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves card contract status.
     * Operation name: `getCardContractStatus`  Operation is used to retrieve card status detailed information. 
     * @param {Number} cardContractId Unique technical identifier for a card contract generated by the MP's CMS. The identifier is generated when card contract creation finishes successfully and is returned in a card contract creation response (`POST /cards`). 
     * @param {module:api/CardContractApi~getCardContractStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardContractStatus}
     */
    getCardContractStatus(cardContractId, callback) {
      let postBody = null;
      // verify the required parameter 'cardContractId' is set
      if (cardContractId === undefined || cardContractId === null) {
        throw new Error("Missing the required parameter 'cardContractId' when calling getCardContractStatus");
      }

      let pathParams = {
        'card_contract_id': cardContractId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = CardContractStatus;
      return this.apiClient.callApi(
        '/cards/{card_contract_id}/statuses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCardContract operation.
     * @callback module:api/CardContractApi~updateCardContractCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a card contract
     * Operation name: `updateCardContract`  Operation is used to update a card data. The method has been implemented as [JSON Merge Patch](https://datatracker.ietf.org/doc/html/rfc7386), but not all field values can be cleared. Fields which can be cleared are listed below:   * `cardContractName`   * `cbsNumber`   * `embossedData.title`   * `embossedData.firstName`   * `embossedData.lastName`   * `embossedData.companyName` 
     * @param {Number} cardContractId Unique technical identifier for a card contract generated by the MP's CMS. The identifier is generated when card contract creation finishes successfully and is returned in a card contract creation response (`POST /cards`). 
     * @param {String} ifMatch Used to ensure idempotency for the PATCH methods. This header should be populated with the `ETag` received in the response header from the GET call of the same resource being updated. See [RFC7232](https://datatracker.ietf.org/doc/html/rfc7232) for more details. 
     * @param {module:model/CardContractModification} cardContractModification 
     * @param {Object} opts Optional parameters
     * @param {String} [idempotencyKey] Unique identifier generated by the issuer. Mastercard Processing uses this identifier to recognize subsequent retries of the same request and ensure idempotent behaviour by sending the same response without repeating the operation again. 
     * @param {module:api/CardContractApi~updateCardContractCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateCardContract(cardContractId, ifMatch, cardContractModification, opts, callback) {
      opts = opts || {};
      let postBody = cardContractModification;
      // verify the required parameter 'cardContractId' is set
      if (cardContractId === undefined || cardContractId === null) {
        throw new Error("Missing the required parameter 'cardContractId' when calling updateCardContract");
      }
      // verify the required parameter 'ifMatch' is set
      if (ifMatch === undefined || ifMatch === null) {
        throw new Error("Missing the required parameter 'ifMatch' when calling updateCardContract");
      }
      // verify the required parameter 'cardContractModification' is set
      if (cardContractModification === undefined || cardContractModification === null) {
        throw new Error("Missing the required parameter 'cardContractModification' when calling updateCardContract");
      }

      let pathParams = {
        'card_contract_id': cardContractId
      };
      let queryParams = {
      };
      let headerParams = {
        'If-Match': ifMatch,
        'Idempotency-Key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/merge-patch+json;charset=utf-8'];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{card_contract_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the verifyCardDetails operation.
     * @callback module:api/CardContractApi~verifyCardDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CardContractDetailsVerificationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verifies card details
     * Operation name: `verifyCardDetails`  Operation is used to verify card details. 
     * @param {module:model/CardContractDetailsVerification} cardContractDetailsVerification 
     * @param {Object} opts Optional parameters
     * @param {String} [idempotencyKey] Unique identifier generated by the issuer. Mastercard Processing uses this identifier to recognize subsequent retries of the same request and ensure idempotent behaviour by sending the same response without repeating the operation again. 
     * @param {module:api/CardContractApi~verifyCardDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardContractDetailsVerificationResult}
     */
    verifyCardDetails(cardContractDetailsVerification, opts, callback) {
      opts = opts || {};
      let postBody = cardContractDetailsVerification;
      // verify the required parameter 'cardContractDetailsVerification' is set
      if (cardContractDetailsVerification === undefined || cardContractDetailsVerification === null) {
        throw new Error("Missing the required parameter 'cardContractDetailsVerification' when calling verifyCardDetails");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Idempotency-Key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json;charset=utf-8'];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = CardContractDetailsVerificationResult;
      return this.apiClient.callApi(
        '/cards/details-verifications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
