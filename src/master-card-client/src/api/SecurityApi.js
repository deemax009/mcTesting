/**
 * Mastercard Processing Core API
 * OpenAPI Specification for MP (Mastercard Processing) **Core**.  This documentation describes what functionalities are exposed by the MP's CMS (Card Management System) and are available to be used by the Issuer. The Issuer is the primary actor who executes the operations. Whenever the Issuer wishes to onboard its customers to the card program, they may use API to:  * create and manage **client**  * create and manage **contracts**, there are two types of contracts in the MP's CMS:    * **account contract**    * **card contract**  Later, during the card lifecycle, the Issuer can also manage other objects related to the client and the contract (account or card):  * manage **card plastic**  * create, manage and retrieve **additional addresses** (for the client and the contract)  * manage and retrieve **classifiers** (for the client and the contract)  * manage and retrieve **custom data** (for the client and the contract)  * manage and retrieve **parameters** (for the contract)  * set or retrieve **service limit tariff** (for the contract)  * post or retrieve **transactions** (for the contract)  * manage and retrieve **usage limits** (for the contract)  *** API uses RESTful protocol via HTTP to execute POST, PUT, GET and PATCH operations sent to given endpoints, e.g. `/clients`.  API uses JSON Web Encryption compact serialization for payload encryption for all API operations. *** External documentation:   * [ISO 4217 - Currency Codes](https://www.iso.org/iso-4217-currency-codes.html)   * [ISO 3166 - Country Codes](https://www.iso.org/iso-3166-country-codes.html)   * [Internet Engineering Task Force (IETF) BCP 47 standard](https://tools.ietf.org/html/bcp47#appendix-A)   * [JSON Web Encryption](https://developer.mastercard.com/platform/documentation/security-and-authentication/securing-sensitive-data-using-payload-encryption/#jwe-encryption)   * [Internet Engineering Task Force (IETF) RFC7232](https://datatracker.ietf.org/doc/html/rfc7232)   * [JSON Merge Patch](https://datatracker.ietf.org/doc/html/rfc7386) *** 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorWrapper from '../model/ErrorWrapper';
import PublicRsaKeyData from '../model/PublicRsaKeyData';

/**
* Security service.
* @module api/SecurityApi
* @version 1.0.0
*/
export default class SecurityApi {

    /**
    * Constructs a new SecurityApi. 
    * @alias module:api/SecurityApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getPublicRsaKey operation.
     * @callback module:api/SecurityApi~getPublicRsaKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicRsaKeyData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves MP's public RSA key.
     * Operation name: `getPublicRsaKey`  Operation is used to request a public RSA key information from the MP. In the response to the request, MP will return the MP's public RSA key and its index.  Operation is used for PIN Block asymmetric encryption in `setPin` and `verifyPin` operations. 
     * @param {module:model/String} dataTypeToSecure Definition specifying what type of sensitive data an RSA key data will be used for.  | **Possible values**  | **Description**           | |--------------------- |-------------------------- | | PIN_BLOCK            | For PIN block encryption  | 
     * @param {module:api/SecurityApi~getPublicRsaKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublicRsaKeyData}
     */
    getPublicRsaKey(dataTypeToSecure, callback) {
      let postBody = null;
      // verify the required parameter 'dataTypeToSecure' is set
      if (dataTypeToSecure === undefined || dataTypeToSecure === null) {
        throw new Error("Missing the required parameter 'dataTypeToSecure' when calling getPublicRsaKey");
      }

      let pathParams = {
      };
      let queryParams = {
        'data_type_to_secure': dataTypeToSecure
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = PublicRsaKeyData;
      return this.apiClient.callApi(
        '/public-keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
