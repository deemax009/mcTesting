/**
 * Mastercard Processing Core API
 * OpenAPI Specification for MP (Mastercard Processing) **Core**.  This documentation describes what functionalities are exposed by the MP's CMS (Card Management System) and are available to be used by the Issuer. The Issuer is the primary actor who executes the operations. Whenever the Issuer wishes to onboard its customers to the card program, they may use API to:  * create and manage **client**  * create and manage **contracts**, there are two types of contracts in the MP's CMS:    * **account contract**    * **card contract**  Later, during the card lifecycle, the Issuer can also manage other objects related to the client and the contract (account or card):  * manage **card plastic**  * create, manage and retrieve **additional addresses** (for the client and the contract)  * manage and retrieve **classifiers** (for the client and the contract)  * manage and retrieve **custom data** (for the client and the contract)  * manage and retrieve **parameters** (for the contract)  * set or retrieve **service limit tariff** (for the contract)  * post or retrieve **transactions** (for the contract)  * manage and retrieve **usage limits** (for the contract)  *** API uses RESTful protocol via HTTP to execute POST, PUT, GET and PATCH operations sent to given endpoints, e.g. `/clients`.  API uses JSON Web Encryption compact serialization for payload encryption for all API operations. *** External documentation:   * [ISO 4217 - Currency Codes](https://www.iso.org/iso-4217-currency-codes.html)   * [ISO 3166 - Country Codes](https://www.iso.org/iso-3166-country-codes.html)   * [Internet Engineering Task Force (IETF) BCP 47 standard](https://tools.ietf.org/html/bcp47#appendix-A)   * [JSON Web Encryption](https://developer.mastercard.com/platform/documentation/security-and-authentication/securing-sensitive-data-using-payload-encryption/#jwe-encryption)   * [Internet Engineering Task Force (IETF) RFC7232](https://datatracker.ietf.org/doc/html/rfc7232)   * [JSON Merge Patch](https://datatracker.ietf.org/doc/html/rfc7386) *** 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountContractIdentifier from '../model/AccountContractIdentifier';
import AccountContractIdentifierSearch from '../model/AccountContractIdentifierSearch';
import CardContractIdentifier from '../model/CardContractIdentifier';
import CardContractIdentifierSearch from '../model/CardContractIdentifierSearch';
import ClientIdentifier from '../model/ClientIdentifier';
import ClientIdentifierSearch from '../model/ClientIdentifierSearch';
import ErrorWrapper from '../model/ErrorWrapper';

/**
* Search service.
* @module api/SearchApi
* @version 1.0.0
*/
export default class SearchApi {

    /**
    * Constructs a new SearchApi. 
    * @alias module:api/SearchApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAccountContractId operation.
     * @callback module:api/SearchApi~getAccountContractIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountContractIdentifier} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns accountContractId assigned to a given account identifier.
     * Operation name: `getAccountContractId`  Operation is used to retrieve `accountContractId` of the account contract record identified by:   * `accountContractNumber` (account contract number assigned by the Issuer) or   * `cbsNumber` (Core Banking System number assigned usually by the Issuer)  An `accountContractId` is a unique, technical account contract identifier assigned by the MP's CMS system. The identifier is used in the MP API operations to identify particular account contract. 
     * @param {module:model/AccountContractIdentifierSearch} accountContractIdentifierSearch 
     * @param {Object} opts Optional parameters
     * @param {String} [idempotencyKey] Unique identifier generated by the issuer. Mastercard Processing uses this identifier to recognize subsequent retries of the same request and ensure idempotent behaviour by sending the same response without repeating the operation again. 
     * @param {module:api/SearchApi~getAccountContractIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountContractIdentifier}
     */
    getAccountContractId(accountContractIdentifierSearch, opts, callback) {
      opts = opts || {};
      let postBody = accountContractIdentifierSearch;
      // verify the required parameter 'accountContractIdentifierSearch' is set
      if (accountContractIdentifierSearch === undefined || accountContractIdentifierSearch === null) {
        throw new Error("Missing the required parameter 'accountContractIdentifierSearch' when calling getAccountContractId");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Idempotency-Key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json;charset=utf-8'];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = AccountContractIdentifier;
      return this.apiClient.callApi(
        '/accounts/searches', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCardContractId operation.
     * @callback module:api/SearchApi~getCardContractIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CardContractIdentifier} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns cardContractId assigned to a given card contract identifier.
     * Operation name: `getCardContractId`  Operation is used to retrieve `cardContractId` of the card contract record identified by:   * `cardContractNumber` (PAN of the card assigned by the Issuer or MP) or   * `cbsNumber` (Core Banking System number assigned usually by the Issuer)  A `cardContractId` is a unique, technical card contract identifier assigned by the MP's CMS system. The identifier is used in the MP API operations to identify particular card contract. 
     * @param {module:model/CardContractIdentifierSearch} cardContractIdentifierSearch 
     * @param {Object} opts Optional parameters
     * @param {String} [idempotencyKey] Unique identifier generated by the issuer. Mastercard Processing uses this identifier to recognize subsequent retries of the same request and ensure idempotent behaviour by sending the same response without repeating the operation again. 
     * @param {module:api/SearchApi~getCardContractIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardContractIdentifier}
     */
    getCardContractId(cardContractIdentifierSearch, opts, callback) {
      opts = opts || {};
      let postBody = cardContractIdentifierSearch;
      // verify the required parameter 'cardContractIdentifierSearch' is set
      if (cardContractIdentifierSearch === undefined || cardContractIdentifierSearch === null) {
        throw new Error("Missing the required parameter 'cardContractIdentifierSearch' when calling getCardContractId");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Idempotency-Key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json;charset=utf-8'];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = CardContractIdentifier;
      return this.apiClient.callApi(
        '/cards/searches', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClientId operation.
     * @callback module:api/SearchApi~getClientIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientIdentifier} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns clientId assigned to a given client identifier.
     * Operation name: `getClientId`  Operation is used to retrieve `clientId` of the client record identified by:   * `clientNumber` assigned by the Issuer   * `identificationDocumentNumber` assigned by the Issuer or   * `socialNumber` assigned by the Issuer or   * `taxpayerIdentifier` assigned by the Issuer 
     * @param {module:model/ClientIdentifierSearch} clientIdentifierSearch 
     * @param {Object} opts Optional parameters
     * @param {String} [idempotencyKey] Unique identifier generated by the issuer. Mastercard Processing uses this identifier to recognize subsequent retries of the same request and ensure idempotent behaviour by sending the same response without repeating the operation again. 
     * @param {module:api/SearchApi~getClientIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClientIdentifier}
     */
    getClientId(clientIdentifierSearch, opts, callback) {
      opts = opts || {};
      let postBody = clientIdentifierSearch;
      // verify the required parameter 'clientIdentifierSearch' is set
      if (clientIdentifierSearch === undefined || clientIdentifierSearch === null) {
        throw new Error("Missing the required parameter 'clientIdentifierSearch' when calling getClientId");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Idempotency-Key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json;charset=utf-8'];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = ClientIdentifier;
      return this.apiClient.callApi(
        '/clients/searches', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
