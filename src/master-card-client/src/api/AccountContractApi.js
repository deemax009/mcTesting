/**
 * Mastercard Processing Core API
 * OpenAPI Specification for MP (Mastercard Processing) **Core**.  This documentation describes what functionalities are exposed by the MP's CMS (Card Management System) and are available to be used by the Issuer. The Issuer is the primary actor who executes the operations. Whenever the Issuer wishes to onboard its customers to the card program, they may use API to:  * create and manage **client**  * create and manage **contracts**, there are two types of contracts in the MP's CMS:    * **account contract**    * **card contract**  Later, during the card lifecycle, the Issuer can also manage other objects related to the client and the contract (account or card):  * manage **card plastic**  * create, manage and retrieve **additional addresses** (for the client and the contract)  * manage and retrieve **classifiers** (for the client and the contract)  * manage and retrieve **custom data** (for the client and the contract)  * manage and retrieve **parameters** (for the contract)  * set or retrieve **service limit tariff** (for the contract)  * post or retrieve **transactions** (for the contract)  * manage and retrieve **usage limits** (for the contract)  *** API uses RESTful protocol via HTTP to execute POST, PUT, GET and PATCH operations sent to given endpoints, e.g. `/clients`.  API uses JSON Web Encryption compact serialization for payload encryption for all API operations. *** External documentation:   * [ISO 4217 - Currency Codes](https://www.iso.org/iso-4217-currency-codes.html)   * [ISO 3166 - Country Codes](https://www.iso.org/iso-3166-country-codes.html)   * [Internet Engineering Task Force (IETF) BCP 47 standard](https://tools.ietf.org/html/bcp47#appendix-A)   * [JSON Web Encryption](https://developer.mastercard.com/platform/documentation/security-and-authentication/securing-sensitive-data-using-payload-encryption/#jwe-encryption)   * [Internet Engineering Task Force (IETF) RFC7232](https://datatracker.ietf.org/doc/html/rfc7232)   * [JSON Merge Patch](https://datatracker.ietf.org/doc/html/rfc7386) *** 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountContract from '../model/AccountContract';
import AccountContractCardContracts from '../model/AccountContractCardContracts';
import AccountContractCreation from '../model/AccountContractCreation';
import AccountContractIdentifier from '../model/AccountContractIdentifier';
import AccountContractModification from '../model/AccountContractModification';
import AccountContractStatus from '../model/AccountContractStatus';
import AccountContractStatusWithReason from '../model/AccountContractStatusWithReason';
import ClientIdentifierWithRelinkType from '../model/ClientIdentifierWithRelinkType';
import ErrorWrapper from '../model/ErrorWrapper';
import SubAccountContracts from '../model/SubAccountContracts';

/**
* AccountContract service.
* @module api/AccountContractApi
* @version 1.0.0
*/
export default class AccountContractApi {

    /**
    * Constructs a new AccountContractApi. 
    * @alias module:api/AccountContractApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the changeAccountContractClient operation.
     * @callback module:api/AccountContractApi~changeAccountContractClientCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Relinks an account contract to another client
     * Operation name: `changeAccountContractClient`  Operation is used to associate the account contract with a different client object.  The Issuer can choose the mode for changing a client for a contract tree:   * **ALL** – the client will be changed for the entire account contract tree   * **THIS** – the client will be changed only for the specified account contract   * **DOWN** – the client will be changed for all contracts (including cards) in the hierarchy that are under the account contract. 
     * @param {Number} accountContractId Unique technical identifier for an account contract generated by the MP's CMS. The identifier is generated when account contract creation finishes successfully and is returned in an account contract creation response (`POST /accounts`). 
     * @param {module:model/ClientIdentifierWithRelinkType} clientIdentifierWithRelinkType 
     * @param {module:api/AccountContractApi~changeAccountContractClientCallback} callback The callback function, accepting three arguments: error, data, response
     */
    changeAccountContractClient(accountContractId, clientIdentifierWithRelinkType, callback) {
      let postBody = clientIdentifierWithRelinkType;
      // verify the required parameter 'accountContractId' is set
      if (accountContractId === undefined || accountContractId === null) {
        throw new Error("Missing the required parameter 'accountContractId' when calling changeAccountContractClient");
      }
      // verify the required parameter 'clientIdentifierWithRelinkType' is set
      if (clientIdentifierWithRelinkType === undefined || clientIdentifierWithRelinkType === null) {
        throw new Error("Missing the required parameter 'clientIdentifierWithRelinkType' when calling changeAccountContractClient");
      }

      let pathParams = {
        'account_contract_id': accountContractId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json;charset=utf-8'];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = null;
      return this.apiClient.callApi(
        '/accounts/{account_contract_id}/client-identifier', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the changeAccountContractStatus operation.
     * @callback module:api/AccountContractApi~changeAccountContractStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes an account contract status
     * Operation name: `changeAccountContractStatus`  Operation is used to change an account contract status.  Change is possible according to configured priorities of account contract statuses. Change to status with lower priority is not possible. For example `Account closed` has higher priority than `Account OK` and changing from `Account closed` to `Account OK` is not possible. 
     * @param {Number} accountContractId Unique technical identifier for an account contract generated by the MP's CMS. The identifier is generated when account contract creation finishes successfully and is returned in an account contract creation response (`POST /accounts`). 
     * @param {module:model/AccountContractStatusWithReason} accountContractStatusWithReason 
     * @param {module:api/AccountContractApi~changeAccountContractStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    changeAccountContractStatus(accountContractId, accountContractStatusWithReason, callback) {
      let postBody = accountContractStatusWithReason;
      // verify the required parameter 'accountContractId' is set
      if (accountContractId === undefined || accountContractId === null) {
        throw new Error("Missing the required parameter 'accountContractId' when calling changeAccountContractStatus");
      }
      // verify the required parameter 'accountContractStatusWithReason' is set
      if (accountContractStatusWithReason === undefined || accountContractStatusWithReason === null) {
        throw new Error("Missing the required parameter 'accountContractStatusWithReason' when calling changeAccountContractStatus");
      }

      let pathParams = {
        'account_contract_id': accountContractId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json;charset=utf-8'];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = null;
      return this.apiClient.callApi(
        '/accounts/{account_contract_id}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAccountContract operation.
     * @callback module:api/AccountContractApi~createAccountContractCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountContractIdentifier} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an account contract
     * Operation name: `createAccountContract`  Operation is used to create an account contract.  Different types of account contracts can be created: * top or sub * prepaid, debit or credit * with liability or without liability  To create a top account contract, the Issuer must specify the `clientId` and leave the `parentAccountContractId` empty.  To create a subaccount contract, the Issuer must leave the `clientId` empty and specify the `parentAccountContractId`.  To create a credit account contract, the Issuer must specify the `creditData`.  To create an account contract with liability link to another account contract, the Issuer must fill in the `liabilityContract`.  Upon successful account contract creation, a unique `accountContractId` is returned. The identifier must be used later on in a card contract creation request (`POST /cards`). 
     * @param {module:model/AccountContractCreation} accountContractCreation 
     * @param {Object} opts Optional parameters
     * @param {String} [idempotencyKey] Unique identifier generated by the issuer. Mastercard Processing uses this identifier to recognize subsequent retries of the same request and ensure idempotent behaviour by sending the same response without repeating the operation again. 
     * @param {module:api/AccountContractApi~createAccountContractCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountContractIdentifier}
     */
    createAccountContract(accountContractCreation, opts, callback) {
      opts = opts || {};
      let postBody = accountContractCreation;
      // verify the required parameter 'accountContractCreation' is set
      if (accountContractCreation === undefined || accountContractCreation === null) {
        throw new Error("Missing the required parameter 'accountContractCreation' when calling createAccountContract");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Idempotency-Key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json;charset=utf-8'];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = AccountContractIdentifier;
      return this.apiClient.callApi(
        '/accounts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountContract operation.
     * @callback module:api/AccountContractApi~getAccountContractCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountContract} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves an account contract
     * Operation name: `getAccountContract`  Operation is used to retrieve information about the specified account contract. 
     * @param {Number} accountContractId Unique technical identifier for an account contract generated by the MP's CMS. The identifier is generated when account contract creation finishes successfully and is returned in an account contract creation response (`POST /accounts`). 
     * @param {module:api/AccountContractApi~getAccountContractCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountContract}
     */
    getAccountContract(accountContractId, callback) {
      let postBody = null;
      // verify the required parameter 'accountContractId' is set
      if (accountContractId === undefined || accountContractId === null) {
        throw new Error("Missing the required parameter 'accountContractId' when calling getAccountContract");
      }

      let pathParams = {
        'account_contract_id': accountContractId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = AccountContract;
      return this.apiClient.callApi(
        '/accounts/{account_contract_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountContractStatus operation.
     * @callback module:api/AccountContractApi~getAccountContractStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountContractStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves account contract status.
     * Operation name: `getAccountContractStatus`  Operation is used to retrieve an account contract status detailed information. 
     * @param {Number} accountContractId Unique technical identifier for an account contract generated by the MP's CMS. The identifier is generated when account contract creation finishes successfully and is returned in an account contract creation response (`POST /accounts`). 
     * @param {module:api/AccountContractApi~getAccountContractStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountContractStatus}
     */
    getAccountContractStatus(accountContractId, callback) {
      let postBody = null;
      // verify the required parameter 'accountContractId' is set
      if (accountContractId === undefined || accountContractId === null) {
        throw new Error("Missing the required parameter 'accountContractId' when calling getAccountContractStatus");
      }

      let pathParams = {
        'account_contract_id': accountContractId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = AccountContractStatus;
      return this.apiClient.callApi(
        '/accounts/{account_contract_id}/statuses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCardContractsByAccount operation.
     * @callback module:api/AccountContractApi~getCardContractsByAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountContractCardContracts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of card contracts for a specified account contract
     * Operation name: `getCardContractsByAccount`  Operation is used to retrieve card contracts for specified account contract.  Additional filtering can be applied:   * **Card creation date** - to retrieve cards open date greater or equal than passed date   * **Card statuses** - to retrieve cards with selected statuses only 
     * @param {Number} accountContractId Unique technical identifier for an account contract generated by the MP's CMS. The identifier is generated when account contract creation finishes successfully and is returned in an account contract creation response (`POST /accounts`). 
     * @param {Object} opts Optional parameters
     * @param {Date} [creationDateFrom] Response will return card contracts with creation date >= than date passed in the request (YYYY-MM-DD format).  If not filled card contracts are returned without checking the creation date. 
     * @param {Array.<String>} [statuses] The list of `Status`. The response will contain contracts with specified statuses only.  If the list does not contain any value then the response will contain all cards without filtering by status. 
     * @param {Number} [limit = 10)] The number of items you want the list to be limited to. 
     * @param {Number} [offset = 0)] The number of items to offset the start of the list from. 
     * @param {module:api/AccountContractApi~getCardContractsByAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountContractCardContracts}
     */
    getCardContractsByAccount(accountContractId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountContractId' is set
      if (accountContractId === undefined || accountContractId === null) {
        throw new Error("Missing the required parameter 'accountContractId' when calling getCardContractsByAccount");
      }

      let pathParams = {
        'account_contract_id': accountContractId
      };
      let queryParams = {
        'creation_date_from': opts['creationDateFrom'],
        'statuses': this.apiClient.buildCollectionParam(opts['statuses'], 'csv'),
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = AccountContractCardContracts;
      return this.apiClient.callApi(
        '/accounts/{account_contract_id}/card-contracts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubAccountContracts operation.
     * @callback module:api/AccountContractApi~getSubAccountContractsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubAccountContracts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of subaccount contracts for a specified account contract.
     * Operation name: `getSubAccountContracts`  Operation is used to retrieve a list of subaccounts for a specified account contract. The list contains basic information about subaccount contracts. 
     * @param {Number} accountContractId Unique technical identifier for an account contract generated by the MP's CMS. The identifier is generated when account contract creation finishes successfully and is returned in an account contract creation response (`POST /accounts`). 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] The number of items you want the list to be limited to. 
     * @param {Number} [offset = 0)] The number of items to offset the start of the list from. 
     * @param {module:api/AccountContractApi~getSubAccountContractsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubAccountContracts}
     */
    getSubAccountContracts(accountContractId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountContractId' is set
      if (accountContractId === undefined || accountContractId === null) {
        throw new Error("Missing the required parameter 'accountContractId' when calling getSubAccountContracts");
      }

      let pathParams = {
        'account_contract_id': accountContractId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = SubAccountContracts;
      return this.apiClient.callApi(
        '/accounts/{account_contract_id}/sub-accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAccountContract operation.
     * @callback module:api/AccountContractApi~updateAccountContractCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an account contract
     * Operation name: `updateAccountContract`  Operation is used to update an account contract data.  The method has been implemented as [JSON Merge Patch](https://datatracker.ietf.org/doc/html/rfc7386), but not all field values can be cleared.  Fields which can be cleared are listed below:  * `accountContractName`  * `cbsNumber` 
     * @param {Number} accountContractId Unique technical identifier for an account contract generated by the MP's CMS. The identifier is generated when account contract creation finishes successfully and is returned in an account contract creation response (`POST /accounts`). 
     * @param {String} ifMatch Used to ensure idempotency for the PATCH methods. This header should be populated with the `ETag` received in the response header from the GET call of the same resource being updated. See [RFC7232](https://datatracker.ietf.org/doc/html/rfc7232) for more details. 
     * @param {module:model/AccountContractModification} accountContractModification 
     * @param {Object} opts Optional parameters
     * @param {String} [idempotencyKey] Unique identifier generated by the issuer. Mastercard Processing uses this identifier to recognize subsequent retries of the same request and ensure idempotent behaviour by sending the same response without repeating the operation again. 
     * @param {module:api/AccountContractApi~updateAccountContractCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateAccountContract(accountContractId, ifMatch, accountContractModification, opts, callback) {
      opts = opts || {};
      let postBody = accountContractModification;
      // verify the required parameter 'accountContractId' is set
      if (accountContractId === undefined || accountContractId === null) {
        throw new Error("Missing the required parameter 'accountContractId' when calling updateAccountContract");
      }
      // verify the required parameter 'ifMatch' is set
      if (ifMatch === undefined || ifMatch === null) {
        throw new Error("Missing the required parameter 'ifMatch' when calling updateAccountContract");
      }
      // verify the required parameter 'accountContractModification' is set
      if (accountContractModification === undefined || accountContractModification === null) {
        throw new Error("Missing the required parameter 'accountContractModification' when calling updateAccountContract");
      }

      let pathParams = {
        'account_contract_id': accountContractId
      };
      let queryParams = {
      };
      let headerParams = {
        'If-Match': ifMatch,
        'Idempotency-Key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/merge-patch+json;charset=utf-8'];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = null;
      return this.apiClient.callApi(
        '/accounts/{account_contract_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
