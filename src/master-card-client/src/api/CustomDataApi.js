/**
 * Mastercard Processing Core API
 * OpenAPI Specification for MP (Mastercard Processing) **Core**.  This documentation describes what functionalities are exposed by the MP's CMS (Card Management System) and are available to be used by the Issuer. The Issuer is the primary actor who executes the operations. Whenever the Issuer wishes to onboard its customers to the card program, they may use API to:  * create and manage **client**  * create and manage **contracts**, there are two types of contracts in the MP's CMS:    * **account contract**    * **card contract**  Later, during the card lifecycle, the Issuer can also manage other objects related to the client and the contract (account or card):  * manage **card plastic**  * create, manage and retrieve **additional addresses** (for the client and the contract)  * manage and retrieve **classifiers** (for the client and the contract)  * manage and retrieve **custom data** (for the client and the contract)  * manage and retrieve **parameters** (for the contract)  * set or retrieve **service limit tariff** (for the contract)  * post or retrieve **transactions** (for the contract)  * manage and retrieve **usage limits** (for the contract)  *** API uses RESTful protocol via HTTP to execute POST, PUT, GET and PATCH operations sent to given endpoints, e.g. `/clients`.  API uses JSON Web Encryption compact serialization for payload encryption for all API operations. *** External documentation:   * [ISO 4217 - Currency Codes](https://www.iso.org/iso-4217-currency-codes.html)   * [ISO 3166 - Country Codes](https://www.iso.org/iso-3166-country-codes.html)   * [Internet Engineering Task Force (IETF) BCP 47 standard](https://tools.ietf.org/html/bcp47#appendix-A)   * [JSON Web Encryption](https://developer.mastercard.com/platform/documentation/security-and-authentication/securing-sensitive-data-using-payload-encryption/#jwe-encryption)   * [Internet Engineering Task Force (IETF) RFC7232](https://datatracker.ietf.org/doc/html/rfc7232)   * [JSON Merge Patch](https://datatracker.ietf.org/doc/html/rfc7386) *** 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ClientCustomDataTagValues from '../model/ClientCustomDataTagValues';
import ContractCustomDataTagValues from '../model/ContractCustomDataTagValues';
import CustomDataTag from '../model/CustomDataTag';
import ErrorWrapper from '../model/ErrorWrapper';

/**
* CustomData service.
* @module api/CustomDataApi
* @version 1.0.0
*/
export default class CustomDataApi {

    /**
    * Constructs a new CustomDataApi. 
    * @alias module:api/CustomDataApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getClientCustomData operation.
     * @callback module:api/CustomDataApi~getClientCustomDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientCustomDataTagValues} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves selected custom data for a client
     * Operation name: `getClientCustomData`  Operation is used to retrieve selected custom data of the client object. 
     * @param {Number} clientId Unique technical client identifier, generated by the MP's CMS database engine. The identifier is generated when client creation finishes successfully and is returned in a client creation response (`POST /clients`, field `clientId`). 
     * @param {String} tagName Tag name 
     * @param {module:api/CustomDataApi~getClientCustomDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClientCustomDataTagValues}
     */
    getClientCustomData(clientId, tagName, callback) {
      let postBody = null;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getClientCustomData");
      }
      // verify the required parameter 'tagName' is set
      if (tagName === undefined || tagName === null) {
        throw new Error("Missing the required parameter 'tagName' when calling getClientCustomData");
      }

      let pathParams = {
        'client_id': clientId,
        'tag_name': tagName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = ClientCustomDataTagValues;
      return this.apiClient.callApi(
        '/clients/{client_id}/custom-data/{tag_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContractCustomData operation.
     * @callback module:api/CustomDataApi~getContractCustomDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContractCustomDataTagValues} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves selected custom data for a specified contract (account contract or card contract)
     * Operation name: `getContractCustomData`  Operation is used to retrieve selected custom data of the specified contract (**account contract** or **card contract**). 
     * @param {Number} contractId Unique technical contract identifier generated by the CMS.  The identifier is generated when contract (account or card) creation finishes successfully and is returned in:   * account contract creation response (`POST /accounts`, field: `accountContractId`).   * card contract creation response (`POST /cards`, field: `cardContractId`). 
     * @param {String} tagName Tag name 
     * @param {module:api/CustomDataApi~getContractCustomDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContractCustomDataTagValues}
     */
    getContractCustomData(contractId, tagName, callback) {
      let postBody = null;
      // verify the required parameter 'contractId' is set
      if (contractId === undefined || contractId === null) {
        throw new Error("Missing the required parameter 'contractId' when calling getContractCustomData");
      }
      // verify the required parameter 'tagName' is set
      if (tagName === undefined || tagName === null) {
        throw new Error("Missing the required parameter 'tagName' when calling getContractCustomData");
      }

      let pathParams = {
        'contract_id': contractId,
        'tag_name': tagName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = ContractCustomDataTagValues;
      return this.apiClient.callApi(
        '/contracts/{contract_id}/custom-data/{tag_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setClientCustomData operation.
     * @callback module:api/CustomDataApi~setClientCustomDataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets up a custom data for a client
     * Operation name: `setClientCustomData`  Operation is used to manage custom data of the client object:   * add   * update   * remove  Client custom data allow the Issuer to store specific client-related information on client record in the MP's CMS. The tags may represent Issuer-specific field names and values, not available as separate, dedicated fields on client record. The Issuer can specify the tag name and its value.  Custom data tags are stored in fixed containers (four containers are available) in TAG=VALUE; format (for example: CATEGORY=A;GROUP=G1;).  Each container has length of 3900 characters. 
     * @param {Number} clientId Unique technical client identifier, generated by the MP's CMS database engine. The identifier is generated when client creation finishes successfully and is returned in a client creation response (`POST /clients`, field `clientId`). 
     * @param {Array.<module:model/CustomDataTag>} customDataTag 
     * @param {Object} opts Optional parameters
     * @param {String} [idempotencyKey] Unique identifier generated by the issuer. Mastercard Processing uses this identifier to recognize subsequent retries of the same request and ensure idempotent behaviour by sending the same response without repeating the operation again. 
     * @param {module:api/CustomDataApi~setClientCustomDataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setClientCustomData(clientId, customDataTag, opts, callback) {
      opts = opts || {};
      let postBody = customDataTag;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling setClientCustomData");
      }
      // verify the required parameter 'customDataTag' is set
      if (customDataTag === undefined || customDataTag === null) {
        throw new Error("Missing the required parameter 'customDataTag' when calling setClientCustomData");
      }

      let pathParams = {
        'client_id': clientId
      };
      let queryParams = {
      };
      let headerParams = {
        'Idempotency-Key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json;charset=utf-8'];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = null;
      return this.apiClient.callApi(
        '/clients/{client_id}/custom-data', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setContractCustomData operation.
     * @callback module:api/CustomDataApi~setContractCustomDataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets up a custom data for a specified contract (account contract or card contract)
     * Operation name: `setContractCustomData`  Operation is used to manage custom data of the contract (**account contract** or **card contract**):   * add   * update   * remove  Account contract custom data allow the Issuer to store specific contract-related information on a contract record in the MP's CMS. The tags may represent the Issuer-specific field names and values, not available as separate, dedicated fields on the contract record. The Issuer can specify the tag name and its value.  Custom data tags are stored in fixed containers (four containers are available) in TAG=VALUE; format (for example: CATEGORY=A;GROUP=G1;).  Each container has length of 255 characters. 
     * @param {Number} contractId Unique technical contract identifier generated by the CMS.  The identifier is generated when contract (account or card) creation finishes successfully and is returned in:   * account contract creation response (`POST /accounts`, field: `accountContractId`).   * card contract creation response (`POST /cards`, field: `cardContractId`). 
     * @param {Array.<module:model/CustomDataTag>} customDataTag 
     * @param {Object} opts Optional parameters
     * @param {String} [idempotencyKey] Unique identifier generated by the issuer. Mastercard Processing uses this identifier to recognize subsequent retries of the same request and ensure idempotent behaviour by sending the same response without repeating the operation again. 
     * @param {module:api/CustomDataApi~setContractCustomDataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setContractCustomData(contractId, customDataTag, opts, callback) {
      opts = opts || {};
      let postBody = customDataTag;
      // verify the required parameter 'contractId' is set
      if (contractId === undefined || contractId === null) {
        throw new Error("Missing the required parameter 'contractId' when calling setContractCustomData");
      }
      // verify the required parameter 'customDataTag' is set
      if (customDataTag === undefined || customDataTag === null) {
        throw new Error("Missing the required parameter 'customDataTag' when calling setContractCustomData");
      }

      let pathParams = {
        'contract_id': contractId
      };
      let queryParams = {
      };
      let headerParams = {
        'Idempotency-Key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json;charset=utf-8'];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = null;
      return this.apiClient.callApi(
        '/contracts/{contract_id}/custom-data', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
