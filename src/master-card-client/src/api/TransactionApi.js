/**
 * Mastercard Processing Core API
 * OpenAPI Specification for MP (Mastercard Processing) **Core**.  This documentation describes what functionalities are exposed by the MP's CMS (Card Management System) and are available to be used by the Issuer. The Issuer is the primary actor who executes the operations. Whenever the Issuer wishes to onboard its customers to the card program, they may use API to:  * create and manage **client**  * create and manage **contracts**, there are two types of contracts in the MP's CMS:    * **account contract**    * **card contract**  Later, during the card lifecycle, the Issuer can also manage other objects related to the client and the contract (account or card):  * manage **card plastic**  * create, manage and retrieve **additional addresses** (for the client and the contract)  * manage and retrieve **classifiers** (for the client and the contract)  * manage and retrieve **custom data** (for the client and the contract)  * manage and retrieve **parameters** (for the contract)  * set or retrieve **service limit tariff** (for the contract)  * post or retrieve **transactions** (for the contract)  * manage and retrieve **usage limits** (for the contract)  *** API uses RESTful protocol via HTTP to execute POST, PUT, GET and PATCH operations sent to given endpoints, e.g. `/clients`.  API uses JSON Web Encryption compact serialization for payload encryption for all API operations. *** External documentation:   * [ISO 4217 - Currency Codes](https://www.iso.org/iso-4217-currency-codes.html)   * [ISO 3166 - Country Codes](https://www.iso.org/iso-3166-country-codes.html)   * [Internet Engineering Task Force (IETF) BCP 47 standard](https://tools.ietf.org/html/bcp47#appendix-A)   * [JSON Web Encryption](https://developer.mastercard.com/platform/documentation/security-and-authentication/securing-sensitive-data-using-payload-encryption/#jwe-encryption)   * [Internet Engineering Task Force (IETF) RFC7232](https://datatracker.ietf.org/doc/html/rfc7232)   * [JSON Merge Patch](https://datatracker.ietf.org/doc/html/rfc7386) *** 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BlockedFundsRelease from '../model/BlockedFundsRelease';
import BlockedFundsReleaseResult from '../model/BlockedFundsReleaseResult';
import ChargeFee from '../model/ChargeFee';
import ErrorWrapper from '../model/ErrorWrapper';
import ReverseTransactionId from '../model/ReverseTransactionId';
import ReverseTransactionReason from '../model/ReverseTransactionReason';
import TransactionContractCredit from '../model/TransactionContractCredit';
import TransactionContractDebit from '../model/TransactionContractDebit';
import TransactionDocuments from '../model/TransactionDocuments';
import TransactionFees from '../model/TransactionFees';
import TransactionId from '../model/TransactionId';
import Transactions from '../model/Transactions';

/**
* Transaction service.
* @module api/TransactionApi
* @version 1.0.0
*/
export default class TransactionApi {

    /**
    * Constructs a new TransactionApi. 
    * @alias module:api/TransactionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the chargeFee operation.
     * @callback module:api/TransactionApi~chargeFeeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Charges specified contract (account contract or card contract) with a fee configured in the MP's CMS
     * Operation name: `chargeFee`  Operation is used to charge the specified contract (**account contract** or **card contract**) with fee configured on MP's CMS.  Available fees in the standard product: | `feeTypeId`  | **Description**           | **Contract level**  | **Product applicability**  | |------------- |-------------------------- |-------------------- |--------------------------- | | APSF         | Paper statement fee       | Account contract    | Credit                     | | AUCF         | Urgent card fee           | Card contract       | Credit, Prepaid            | | MFM          | Miscellaneous custom fee  | Account contract    | Prepaid                    | 
     * @param {Number} contractId Unique technical contract identifier generated by the CMS.  The identifier is generated when contract (account or card) creation finishes successfully and is returned in:   * account contract creation response (`POST /accounts`, field: `accountContractId`).   * card contract creation response (`POST /cards`, field: `cardContractId`). 
     * @param {module:model/ChargeFee} chargeFee 
     * @param {Object} opts Optional parameters
     * @param {String} [idempotencyKey] Unique identifier generated by the issuer. Mastercard Processing uses this identifier to recognize subsequent retries of the same request and ensure idempotent behaviour by sending the same response without repeating the operation again. 
     * @param {module:api/TransactionApi~chargeFeeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionId}
     */
    chargeFee(contractId, chargeFee, opts, callback) {
      opts = opts || {};
      let postBody = chargeFee;
      // verify the required parameter 'contractId' is set
      if (contractId === undefined || contractId === null) {
        throw new Error("Missing the required parameter 'contractId' when calling chargeFee");
      }
      // verify the required parameter 'chargeFee' is set
      if (chargeFee === undefined || chargeFee === null) {
        throw new Error("Missing the required parameter 'chargeFee' when calling chargeFee");
      }

      let pathParams = {
        'contract_id': contractId
      };
      let queryParams = {
      };
      let headerParams = {
        'Idempotency-Key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json;charset=utf-8'];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = TransactionId;
      return this.apiClient.callApi(
        '/contracts/{contract_id}/charge-fees', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the creditContract operation.
     * @callback module:api/TransactionApi~creditContractCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Posts credit transaction to a contract (account contract or card contract)
     * Operation name: `creditContract`  Operation is used to post credit transaction for particular contract (**account contract** or **card contract**).  Available credit transactions in the standard product: | `transactionTypeCode`  | **Description**               | **Contract level**  | **Product applicability**  | |----------------------- |------------------------------ |-------------------- |--------------------------- | | I_TPC                  | Transaction posting - credit  | Account contract    | Credit, Prepaid            | | PT_1                   | Payment to Client Contract    | Account contract    | Credit                     | | TP                     | Top-up prepaid card           | Account contract    | Prepaid                    | | TPC_1                  | Transaction posting - credit  | Account contract    | Credit, Prepaid            |         
     * @param {Number} contractId Unique technical contract identifier generated by the CMS.  The identifier is generated when contract (account or card) creation finishes successfully and is returned in:   * account contract creation response (`POST /accounts`, field: `accountContractId`).   * card contract creation response (`POST /cards`, field: `cardContractId`). 
     * @param {module:model/TransactionContractCredit} transactionContractCredit 
     * @param {Object} opts Optional parameters
     * @param {String} [idempotencyKey] Unique identifier generated by the issuer. Mastercard Processing uses this identifier to recognize subsequent retries of the same request and ensure idempotent behaviour by sending the same response without repeating the operation again. 
     * @param {module:api/TransactionApi~creditContractCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionId}
     */
    creditContract(contractId, transactionContractCredit, opts, callback) {
      opts = opts || {};
      let postBody = transactionContractCredit;
      // verify the required parameter 'contractId' is set
      if (contractId === undefined || contractId === null) {
        throw new Error("Missing the required parameter 'contractId' when calling creditContract");
      }
      // verify the required parameter 'transactionContractCredit' is set
      if (transactionContractCredit === undefined || transactionContractCredit === null) {
        throw new Error("Missing the required parameter 'transactionContractCredit' when calling creditContract");
      }

      let pathParams = {
        'contract_id': contractId
      };
      let queryParams = {
      };
      let headerParams = {
        'Idempotency-Key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json;charset=utf-8'];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = TransactionId;
      return this.apiClient.callApi(
        '/contracts/{contract_id}/credits', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the debitContract operation.
     * @callback module:api/TransactionApi~debitContractCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Posts debit transaction to a contract (account contract or card contract)
     * Operation name: `debitContract`  Operation is used to post debit transaction for particular contract (**account contract** or **card contract**).  Available debit transactions in the standard product: | `transactionTypeCode`  | **Description**              | **Contract level**  | **Product applicability**  | |----------------------- |----------------------------- |-------------------- |--------------------------- | | BT1                    | Balance Transfer             | Account contract    | Credit                     | | FP                     | Fee posting                  | Account contract    | Credit                     | | I_TPD                  | Transaction posting - debit  | Account contract    | Credit, Prepaid            | | TPD                    | Transaction posting - debit  | Account contract    | Credit                     | 
     * @param {Number} contractId Unique technical contract identifier generated by the CMS.  The identifier is generated when contract (account or card) creation finishes successfully and is returned in:   * account contract creation response (`POST /accounts`, field: `accountContractId`).   * card contract creation response (`POST /cards`, field: `cardContractId`). 
     * @param {module:model/TransactionContractDebit} transactionContractDebit 
     * @param {Object} opts Optional parameters
     * @param {String} [idempotencyKey] Unique identifier generated by the issuer. Mastercard Processing uses this identifier to recognize subsequent retries of the same request and ensure idempotent behaviour by sending the same response without repeating the operation again. 
     * @param {module:api/TransactionApi~debitContractCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionId}
     */
    debitContract(contractId, transactionContractDebit, opts, callback) {
      opts = opts || {};
      let postBody = transactionContractDebit;
      // verify the required parameter 'contractId' is set
      if (contractId === undefined || contractId === null) {
        throw new Error("Missing the required parameter 'contractId' when calling debitContract");
      }
      // verify the required parameter 'transactionContractDebit' is set
      if (transactionContractDebit === undefined || transactionContractDebit === null) {
        throw new Error("Missing the required parameter 'transactionContractDebit' when calling debitContract");
      }

      let pathParams = {
        'contract_id': contractId
      };
      let queryParams = {
      };
      let headerParams = {
        'Idempotency-Key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json;charset=utf-8'];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = TransactionId;
      return this.apiClient.callApi(
        '/contracts/{contract_id}/debits', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContractTransactionDocuments operation.
     * @callback module:api/TransactionApi~getContractTransactionDocumentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionDocuments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves transaction documents for a contract (account contract or card contract)
     * Operation name: `getContractTransactionDocuments`  Operation is used to retrieve transaction documents for a specified contract (**account contract** or **card contract**).  Additional filtering can be applied:   * **Date from** - to define the start period   * **Date to** - to define the end period   * **Authorization filter** - to retrieve records with different impact on the contract balance   * **Collect authorizations** - to retrieve only cleared transactions or also pending authorizations   * **Contract hierarchy** - to enable contract hierarchy analysis   * **Direction** - to retrieve only debit or credit transactions   * **Transaction type code** - to retrieve transactions of a specified type  Note: Date filters use CMS posting date (`postingDate` field) to filter the records. 
     * @param {Number} contractId Unique technical contract identifier generated by the CMS.  The identifier is generated when contract (account or card) creation finishes successfully and is returned in:   * account contract creation response (`POST /accounts`, field: `accountContractId`).   * card contract creation response (`POST /cards`, field: `cardContractId`). 
     * @param {Date} dateFrom Date from (YYYY-MM-DD format). 
     * @param {Date} dateTo Date to (YYYY-MM-DD format). 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [authorizationFilterMode = 'A')] Specifies records filtering mode.  | **Possible values**  | **Description**                    | |--------------------- |----------------------------------- | | A                    | Not Matched Affecting Balance      | | N                    | Not Affecting Balance              | | S                    | Successful Only Affecting Balance  | | U                    | All Records                        |  Depending on its value the following authorizations are output:   * A (default value) - authorizations that lead to a contract's balance changes and haven't matched with financial documents (they are waiting for financial documents or already closed or declined).   * N - cardholder's requests not changing a contract's balance (Balance Inquiry, Online Statement, Top Up, Additional Online Service, Verification).   * S - active authorizations that lead to a contract's balance changes, waiting for a financial document to be matched. This option is similar to 'A' but excludes closed and declined authorizations.   * U - authorizations that lead to a contract's balance changes and cardholder's requests that do not change a contract's balance. Closed and declined authorizations are considered too. 
     * @param {module:model/String} [collectAuthorizations] Allows collecting information about authorization documents. The parameter is used in combination with the `authorization_filter_mode` parameter. 
     * @param {module:model/String} [contractHierarchy] Contracts hierarchy analysis mode.  | **Possible values**  | **Description**                                                                                | |--------------------- |----------------------------------------------------------------------------------------------- | | N                    | Search for transactions without contract's hierarchy analysis (default value)                  | | M                    | Main-Sub hierarchies only                                                                      | | R                    | Related Cards only. In this mode Liability and Main-Sub contract hierarchies are not analyzed  | | Y                    | Liability and Main-Sub contract hierarchies are analyzed                                       | 
     * @param {module:model/String} [direction] Transaction type's direction.  | **Possible values**  | |--------------------- | | CREDIT               | | DEBIT                | | NONE                 | 
     * @param {Number} [limit = 10)] The number of items you want the list to be limited to. 
     * @param {Number} [offset = 0)] The number of items to offset the start of the list from. 
     * @param {Array.<String>} [transactionTypeCodes] The list of `transactionTypeCode` separated by commas.  Transactions originated from the Banknet | `transactionTypeCode`  | `transactionType`                      | |:---------------------: |--------------------------------------- | | 0512                   | Retail with CashBack                   | | 0513 1                 | CH Debit                               | | 0515                   | Retail                                 | | 0518                   | Unique                                 | | 0522                   | CashBack 2Prs                          | | 0523 1                 | CH Debit 2Prs                          | | 0525                   | Retail 2Prs                            | | 0528                   | Unique 2Prs                            | | 0614 2                 | CH Payment                             | | 0616                   | Refund                                 | | 0624 2                 | CH Payment 2Prs                        | | 0626                   | Credit 2Prs                            | | 0717                   | Cash Advance                           | | 0719                   | ATM Cash Withdrawal                    | | 0727                   | Cash 2Prs                              | | 0729                   | ATM Cash withdrawal - 2nd presentment  |  Transactions originated from the Issuer in the standard product | `transactionTypeCode`  | `transactionType`              | **Product applicability**  | |----------------------- |------------------------------- |--------------------------- | | APSF                   | Paper statement fee            | Credit                     | | BT1                    | Balance Transfer               | Credit                     | | FP                     | Fee posting                    | Credit                     | | I_TPC                  | PBB Transfer posting - credit  | Credit, Prepaid            | | I_TPD                  | PBB Transfer posting - debit   | Credit, Prepaid            | | PT_1                   | Payment To Client Contract     | Credit                     | | TP                     | Prepaid Top-Up                 | Prepaid                    | | TPC_1                  | Transaction posting - credit   | Credit, Prepaid            | | TPD                    | Transaction posting - debit    | Credit                     |  Fees originated from the CMS in the standard product | `transactionTypeCode`  | `transactionType`                      | **Product applicability**  | |----------------------- |--------------------------------------- |--------------------------- | | A1F                    | ATM Fee                                | Prepaid                    | | AFM_1                  | BCC CA Annual Fee Main Card            | Prepaid                    | | AUCF                   | Urgent card fee                        | Credit, Prepaid            | | C1F                    | Cash Fee                               | Prepaid                    | | CF1                    | Country Fee                            | Prepaid                    | | FXF                    | Foreign exchange (FX) fee              | Credit                     | | INFC                   | Insurance Fixed Card                   | Credit                     | | INFS                   | Insurance Fixed Single                 | Credit, Prepaid            | | INFSC                  | Insurance Fixed Single Card            | Credit                     | | INP                    | Insurance Percentage                   | Credit                     | | IPP                    | BCC Insurance fee: Payment Protection  | Credit, Prepaid            | | JFA                    | Joining fee                            | Prepaid                    | | LC                     | New Lost Card for PIN Set              | Prepaid                    | | LPF                    | BCC Late Payment Fee                   | Credit                     | | M;                     | New Card for PIN Set                   | Prepaid                    | | M0                     | Plastic Renew Expired                  | Prepaid                    | | M19                    | Plastic Renew Misc (no Prod)           | Credit                     | | M8                     | Plastic Renew Misc                     | Prepaid                    | | MA_1                   | Balance Inquiry Fee                    | Prepaid                    | | MF_1                   | BCC Card Fee Billing                   | Prepaid                    | | MFM                    | Misc Fee Manual                        | Prepaid                    | | MR                     | Replaced Card for PIN Set (no Prod)    | Credit                     | | OVLF                   | OVL Fee                                | Credit                     | | PFMCC                  | Retail Fee based on MC                 | Prepaid                    | | PZ                     | PIN Change Fee                         | Prepaid                    | | RWCBTF                 | Retail with CB Transaction Fee         | Credit                     | | TPF                    | Top-up fee                             | Prepaid                    | | VCP                    | New Card for PIN Set (no Prod)         | Credit                     |  Interests originated from the CMS in the standard credit product | `transactionTypeCode`  | `transactionType`                  | |----------------------- |----------------------------------- | | ILBT3                  | Overdue cash interest              | | ILBT5                  | Overdue balance transfer interest  | | ILC3                   | Balance transfer interest          | | ILC5                   | Overdue retail interest            | | ILR3                   | Retail interest                    | | ILR5                   | Cash interest                      | 
     * @param {module:api/TransactionApi~getContractTransactionDocumentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionDocuments}
     */
    getContractTransactionDocuments(contractId, dateFrom, dateTo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contractId' is set
      if (contractId === undefined || contractId === null) {
        throw new Error("Missing the required parameter 'contractId' when calling getContractTransactionDocuments");
      }
      // verify the required parameter 'dateFrom' is set
      if (dateFrom === undefined || dateFrom === null) {
        throw new Error("Missing the required parameter 'dateFrom' when calling getContractTransactionDocuments");
      }
      // verify the required parameter 'dateTo' is set
      if (dateTo === undefined || dateTo === null) {
        throw new Error("Missing the required parameter 'dateTo' when calling getContractTransactionDocuments");
      }

      let pathParams = {
        'contract_id': contractId
      };
      let queryParams = {
        'date_from': dateFrom,
        'date_to': dateTo,
        'authorization_filter_mode': opts['authorizationFilterMode'],
        'collect_authorizations': opts['collectAuthorizations'],
        'contract_hierarchy': opts['contractHierarchy'],
        'direction': opts['direction'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'transaction_type_codes': this.apiClient.buildCollectionParam(opts['transactionTypeCodes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = TransactionDocuments;
      return this.apiClient.callApi(
        '/contracts/{contract_id}/transaction-documents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransactionDocuments operation.
     * @callback module:api/TransactionApi~getTransactionDocumentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionDocuments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves transaction documents by ID, ARN, RRN or SRN
     * Operation name: `getTransactionDocuments`   Method is used to retrieve transaction documents by  * ID - Transaction document identifier  * ARN - Acquirer Reference Number  * RRN - Retrieval Reference Number  * SRN - Source Registration Number   ID - Transaction document identifier   ARN - Transaction identification number generated by the acquirer according to payment scheme rules   RRN - Transaction identifier generated according to payment scheme rules   SRN - Document registration number assigned by the sender 
     * @param {module:model/String} transactionSelectorType Allows defining the type of selector passed in the `transaction_selector_value`. 
     * @param {String} transactionSelectorValue Allows defining the value for the transactions selector.  * If `transaction_selector_type` is equal to `ARN` then maxLength of `transaction_selector_value` is 32  * If `transaction_selector_type` is equal to `ID` then maxLength of `transaction_selector_value` is 18  * If `transaction_selector_type` is equal to `RRN` then maxLength of `transaction_selector_value` is 12  * If `transaction_selector_type` is equal to `SRN` then maxLength of `transaction_selector_value` is 32 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] The number of items you want the list to be limited to. 
     * @param {Number} [offset = 0)] The number of items to offset the start of the list from. 
     * @param {module:api/TransactionApi~getTransactionDocumentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionDocuments}
     */
    getTransactionDocuments(transactionSelectorType, transactionSelectorValue, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'transactionSelectorType' is set
      if (transactionSelectorType === undefined || transactionSelectorType === null) {
        throw new Error("Missing the required parameter 'transactionSelectorType' when calling getTransactionDocuments");
      }
      // verify the required parameter 'transactionSelectorValue' is set
      if (transactionSelectorValue === undefined || transactionSelectorValue === null) {
        throw new Error("Missing the required parameter 'transactionSelectorValue' when calling getTransactionDocuments");
      }

      let pathParams = {
      };
      let queryParams = {
        'transaction_selector_type': transactionSelectorType,
        'transaction_selector_value': transactionSelectorValue,
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = TransactionDocuments;
      return this.apiClient.callApi(
        '/transaction-documents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransactionFees operation.
     * @callback module:api/TransactionApi~getTransactionFeesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionFees} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves fees generated for a transaction.
     * Operation name: `getTransactionFees`  Operation is used to retrieve fees generated for a specified transaction. 
     * @param {Number} transactionId Transaction record id from the CMS system. 
     * @param {module:api/TransactionApi~getTransactionFeesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionFees}
     */
    getTransactionFees(transactionId, callback) {
      let postBody = null;
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling getTransactionFees");
      }

      let pathParams = {
        'transaction_id': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = TransactionFees;
      return this.apiClient.callApi(
        '/transactions/{transaction_id}/fees', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransactions operation.
     * @callback module:api/TransactionApi~getTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Transactions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves transactions for a specified contract (account contract or card contract)
     * Operation name: `getTransactions`  Operation is used to retrieve transactions for a specified contract (**account contract** or **card contract**).  Additional filtering can be applied:   * **Date from** - to define the start period   * **Date to** - to define the end period   * **Authorization filter mode** - to retrieve records with different impact on contract balance   * **Authorized flag** - to retrieve records which were authorized or not   * **Transaction type code** - to retrieve transactions of a specified type  Note: Date filters use CMS \"transaction date\" (`transactionDate` field) to filter the records. 
     * @param {Number} contractId Unique technical contract identifier generated by the CMS.  The identifier is generated when contract (account or card) creation finishes successfully and is returned in:   * account contract creation response (`POST /accounts`, field: `accountContractId`).   * card contract creation response (`POST /cards`, field: `cardContractId`). 
     * @param {Date} dateFrom Date from (YYYY-MM-DD format). 
     * @param {Date} dateTo Date to (YYYY-MM-DD format). 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [authorizationFilterMode = 'A')] Specifies records filtering mode.  | **Possible values**  | **Description**                    | |--------------------- |----------------------------------- | | A                    | Not Matched Affecting Balance      | | N                    | Not Affecting Balance              | | S                    | Successful Only Affecting Balance  | | U                    | All Records                        |  Depending on its value the following authorizations are output:   * A (default value) - authorizations that lead to a contract's balance changes and haven't matched with financial documents (they are waiting for financial documents or already closed or declined).   * N - cardholder's requests not changing a contract's balance (Balance Inquiry, Online Statement, Top Up, Additional Online Service, Verification).   * S - active authorizations that lead to a contract's balance changes, waiting for a financial document to be matched. This option is similar to 'A' but excludes closed and declined authorizations.   * U - authorizations that lead to a contract's balance changes and cardholder's requests that do not change a contract's balance. Closed and declined authorizations are considered too. 
     * @param {module:model/String} [authorized] Determines whether the transaction was authorized. 
     * @param {Number} [limit = 10)] The number of items you want the list to be limited to. 
     * @param {Number} [offset = 0)] The number of items to offset the start of the list from. 
     * @param {Array.<String>} [transactionTypeCodes] The list of `transactionTypeCode` separated by commas.  Transactions originated from the Banknet | `transactionTypeCode`  | `transactionType`                      | |:---------------------: |--------------------------------------- | | 0512                   | Retail with CashBack                   | | 0513 1                 | CH Debit                               | | 0515                   | Retail                                 | | 0518                   | Unique                                 | | 0522                   | CashBack 2Prs                          | | 0523 1                 | CH Debit 2Prs                          | | 0525                   | Retail 2Prs                            | | 0528                   | Unique 2Prs                            | | 0614 2                 | CH Payment                             | | 0616                   | Refund                                 | | 0624 2                 | CH Payment 2Prs                        | | 0626                   | Credit 2Prs                            | | 0717                   | Cash Advance                           | | 0719                   | ATM Cash Withdrawal                    | | 0727                   | Cash 2Prs                              | | 0729                   | ATM Cash withdrawal - 2nd presentment  |  Transactions originated from the Issuer in the standard product | `transactionTypeCode`  | `transactionType`              | **Product applicability**  | |----------------------- |------------------------------- |--------------------------- | | APSF                   | Paper statement fee            | Credit                     | | BT1                    | Balance Transfer               | Credit                     | | FP                     | Fee posting                    | Credit                     | | I_TPC                  | PBB Transfer posting - credit  | Credit, Prepaid            | | I_TPD                  | PBB Transfer posting - debit   | Credit, Prepaid            | | PT_1                   | Payment To Client Contract     | Credit                     | | TP                     | Prepaid Top-Up                 | Prepaid                    | | TPC_1                  | Transaction posting - credit   | Credit, Prepaid            | | TPD                    | Transaction posting - debit    | Credit                     |  Fees originated from the CMS in the standard product | `transactionTypeCode`  | `transactionType`                      | **Product applicability**  | |----------------------- |--------------------------------------- |--------------------------- | | A1F                    | ATM Fee                                | Prepaid                    | | AFM_1                  | BCC CA Annual Fee Main Card            | Prepaid                    | | AUCF                   | Urgent card fee                        | Credit, Prepaid            | | C1F                    | Cash Fee                               | Prepaid                    | | CF1                    | Country Fee                            | Prepaid                    | | FXF                    | Foreign exchange (FX) fee              | Credit                     | | INFC                   | Insurance Fixed Card                   | Credit                     | | INFS                   | Insurance Fixed Single                 | Credit, Prepaid            | | INFSC                  | Insurance Fixed Single Card            | Credit                     | | INP                    | Insurance Percentage                   | Credit                     | | IPP                    | BCC Insurance fee: Payment Protection  | Credit, Prepaid            | | JFA                    | Joining fee                            | Prepaid                    | | LC                     | New Lost Card for PIN Set              | Prepaid                    | | LPF                    | BCC Late Payment Fee                   | Credit                     | | M;                     | New Card for PIN Set                   | Prepaid                    | | M0                     | Plastic Renew Expired                  | Prepaid                    | | M19                    | Plastic Renew Misc (no Prod)           | Credit                     | | M8                     | Plastic Renew Misc                     | Prepaid                    | | MA_1                   | Balance Inquiry Fee                    | Prepaid                    | | MF_1                   | BCC Card Fee Billing                   | Prepaid                    | | MFM                    | Misc Fee Manual                        | Prepaid                    | | MR                     | Replaced Card for PIN Set (no Prod)    | Credit                     | | OVLF                   | OVL Fee                                | Credit                     | | PFMCC                  | Retail Fee based on MC                 | Prepaid                    | | PZ                     | PIN Change Fee                         | Prepaid                    | | RWCBTF                 | Retail with CB Transaction Fee         | Credit                     | | TPF                    | Top-up fee                             | Prepaid                    | | VCP                    | New Card for PIN Set (no Prod)         | Credit                     |  Interests originated from the CMS in the standard credit product | `transactionTypeCode`  | `transactionType`                  | |----------------------- |----------------------------------- | | ILBT3                  | Overdue cash interest              | | ILBT5                  | Overdue balance transfer interest  | | ILC3                   | Balance transfer interest          | | ILC5                   | Overdue retail interest            | | ILR3                   | Retail interest                    | | ILR5                   | Cash interest                      | 
     * @param {module:api/TransactionApi~getTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Transactions}
     */
    getTransactions(contractId, dateFrom, dateTo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contractId' is set
      if (contractId === undefined || contractId === null) {
        throw new Error("Missing the required parameter 'contractId' when calling getTransactions");
      }
      // verify the required parameter 'dateFrom' is set
      if (dateFrom === undefined || dateFrom === null) {
        throw new Error("Missing the required parameter 'dateFrom' when calling getTransactions");
      }
      // verify the required parameter 'dateTo' is set
      if (dateTo === undefined || dateTo === null) {
        throw new Error("Missing the required parameter 'dateTo' when calling getTransactions");
      }

      let pathParams = {
        'contract_id': contractId
      };
      let queryParams = {
        'date_from': dateFrom,
        'date_to': dateTo,
        'authorization_filter_mode': opts['authorizationFilterMode'],
        'authorized': opts['authorized'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'transaction_type_codes': this.apiClient.buildCollectionParam(opts['transactionTypeCodes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = Transactions;
      return this.apiClient.callApi(
        '/contracts/{contract_id}/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the releaseBlockedFunds operation.
     * @callback module:api/TransactionApi~releaseBlockedFundsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BlockedFundsReleaseResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Releases funds of the pending transaction.
     * Operation name: `releaseBlockedFunds`  Operation is used to release funds for the pending transaction before automatic cancelation occurs. 
     * @param {Number} contractId Unique technical contract identifier generated by the CMS.  The identifier is generated when contract (account or card) creation finishes successfully and is returned in:   * account contract creation response (`POST /accounts`, field: `accountContractId`).   * card contract creation response (`POST /cards`, field: `cardContractId`). 
     * @param {Number} transactionId Transaction record id from the CMS system. 
     * @param {module:model/BlockedFundsRelease} blockedFundsRelease 
     * @param {module:api/TransactionApi~releaseBlockedFundsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BlockedFundsReleaseResult}
     */
    releaseBlockedFunds(contractId, transactionId, blockedFundsRelease, callback) {
      let postBody = blockedFundsRelease;
      // verify the required parameter 'contractId' is set
      if (contractId === undefined || contractId === null) {
        throw new Error("Missing the required parameter 'contractId' when calling releaseBlockedFunds");
      }
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling releaseBlockedFunds");
      }
      // verify the required parameter 'blockedFundsRelease' is set
      if (blockedFundsRelease === undefined || blockedFundsRelease === null) {
        throw new Error("Missing the required parameter 'blockedFundsRelease' when calling releaseBlockedFunds");
      }

      let pathParams = {
        'contract_id': contractId,
        'transaction_id': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json;charset=utf-8'];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = BlockedFundsReleaseResult;
      return this.apiClient.callApi(
        '/contracts/{contract_id}/transactions/{transaction_id}/releasing-blocked-funds', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reverseTransaction operation.
     * @callback module:api/TransactionApi~reverseTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReverseTransactionId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reverses selected transaction made by the Issuer.
     * Operation name: `reverseTransaction`  Operation is used to reverse selected transaction made by the Issuer. Transaction types that can be reversed must be preconfigured in the CMS during the onboarding process.  The transaction which can be reversed must be in posting status `Posted`. After a successful transaction reversal, the proper balance will be changed. 
     * @param {Number} transactionId Transaction record id from the CMS system. 
     * @param {module:model/ReverseTransactionReason} reverseTransactionReason 
     * @param {Object} opts Optional parameters
     * @param {String} [idempotencyKey] Unique identifier generated by the issuer. Mastercard Processing uses this identifier to recognize subsequent retries of the same request and ensure idempotent behaviour by sending the same response without repeating the operation again. 
     * @param {module:api/TransactionApi~reverseTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReverseTransactionId}
     */
    reverseTransaction(transactionId, reverseTransactionReason, opts, callback) {
      opts = opts || {};
      let postBody = reverseTransactionReason;
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling reverseTransaction");
      }
      // verify the required parameter 'reverseTransactionReason' is set
      if (reverseTransactionReason === undefined || reverseTransactionReason === null) {
        throw new Error("Missing the required parameter 'reverseTransactionReason' when calling reverseTransaction");
      }

      let pathParams = {
        'transaction_id': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Idempotency-Key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json;charset=utf-8'];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = ReverseTransactionId;
      return this.apiClient.callApi(
        '/transactions/{transaction_id}/reversal', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
